# Flicklet TV Tracker - Cursor Rules

## Project Overview
**Flicklet** is a modern TV and movie tracking web application built with vanilla JavaScript, Firebase, and TMDB API. It's a Progressive Web App (PWA) with mobile-first design, featuring user authentication, cloud sync, and comprehensive media management.

## Architecture & Framework

### Core Technology Stack
- **Frontend**: Vanilla JavaScript (ES6+), HTML5, CSS3
- **Build System**: Vite with Terser minification
- **Backend**: Firebase (Auth, Firestore, Storage)
- **API**: The Movie Database (TMDB) API
- **Mobile**: Capacitor for native app packaging
- **Styling**: CSS Custom Properties, Mobile-first responsive design

### Project Structure
```
www/
├── index.html                 # Main SPA entry point (v27.71)
├── js/                       # Core JavaScript modules
│   ├── app.js               # Main application controller
│   ├── auth-manager.js      # Centralized authentication system
│   ├── functions.js         # Core business logic
│   ├── utils.js             # Utility functions
│   ├── data-init.js         # Data initialization
│   └── firebase-init.js     # Firebase setup
├── scripts/                  # Feature modules
│   ├── components/Card.js   # Unified card component
│   ├── search.js            # Search functionality
│   └── tmdb.js              # TMDB API integration
├── styles/                   # CSS modules
│   ├── main.css             # Core styles
│   ├── components.css       # Component styles
│   └── mobile.css           # Mobile-specific styles
└── netlify/functions/       # Serverless functions
```

## Key Design Patterns

### 1. Modular JavaScript Architecture
- **IIFE Pattern**: All modules use Immediately Invoked Function Expressions
- **Global Namespace**: `window.FlickletApp` as main application controller
- **Event-Driven**: Custom events for module communication (`app:data:ready`, `firebase:ready`)
- **Dependency Injection**: Functions passed as parameters to avoid tight coupling

### 2. Component-Based UI System
- **Unified Card Component**: Single `Card.js` component with variants (compact, expanded, poster)
- **CSS Custom Properties**: Centralized theming with `:root` variables
- **Mobile-First**: Responsive design with mobile breakpoints
- **Accessibility**: ARIA attributes, semantic HTML, keyboard navigation

### 3. State Management
- **Single Source of Truth**: `window.appData` global object
- **Local Storage**: Primary data persistence with Firebase sync
- **Reactive Updates**: Event listeners trigger UI updates
- **Immutable Patterns**: Data updates create new objects rather than mutating

## Authentication System (CRITICAL) ✅ COMPLETE

### AuthManager Architecture
The authentication system uses a centralized `AuthManager` with strict patterns. **ALL THREE LOGIN METHODS ARE FULLY FUNCTIONAL** as of v27.82:

#### ✅ Working Login Methods
1. **Google Sign-In**: Popup (desktop) or redirect (mobile/blocked) - ✅ WORKING
2. **Apple Sign-In**: Redirect-only with proper flag management - ✅ WORKING  
3. **Email/Password**: Form-based with modal display - ✅ WORKING

#### Button Binding Rules
- **Single Listener Only**: `#accountButton` must have exactly 1 click listener
- **Idempotent Binding**: Use `__authClickHandler` property to prevent duplicates
- **Top Window Check**: Always verify `window === window.parent` for iframe safety
- **Logging Required**: Use specific log strings for debugging

#### Required Log Strings
```javascript
// Button binding
'[auth] apply:button:bind:attached'
'[auth] apply:button:bind:skipped (already)'

// Redirect handling
'[auth] apply:redirect:clear'
'[auth] apply:redirect:skip (no flag)'
'[auth] apply:redirect:resolve:start'
'[auth] apply:redirect:resolve:done'

// Provider flows
'[auth] apply:provider:start google popup'
'[auth] apply:provider:start apple redirect'
'[auth] apply:provider:start email form'

// Identity management
'[identity] username:found=<username>'
'[identity] username:missing → prompt'
'[identity] username:saved=<username>'
'[identity] snark:render=<snarkText>'
```

#### Redirect Hygiene ✅ IMPLEMENTED
- **Always Clear**: `sessionStorage.removeItem('auth:redirectPending')` in `finally` blocks
- **Flag Management**: Use `setRedirectFlag()` and `clearRedirectFlag()` consistently
- **Error Handling**: Clear flags on both success and error paths
- **DOM Readiness**: Gated redirect handling by flag and DOM readiness
- **Fast Guards**: Immediate return if no redirect flag or DOM not ready

#### Username Pipeline ✅ IMPLEMENTED
- **Display Name**: Shows on account button (Firebase `displayName` or email prefix)
- **Username**: Shows in `#leftSnark` (Firestore `settings.username`)
- **Flow**: Sign-in → Check username → Prompt if missing → Save → Render snark
- **Persistence**: Save to both Firestore and local `appData.settings.username`

#### Critical Fixes Applied ✅
1. **Apple Login TypeError**: Fixed with hard redirect implementation and proper error handling
2. **Email Modal Visibility**: Fixed by removing `#emailAuthModal` from provider modal cleanup
3. **Redirect Flag Management**: Enhanced with DOM readiness checks and fast guards
4. **Modal Styling**: Enhanced with higher z-index (`99999`) and forced visibility
5. **Comprehensive Debugging**: Added detailed logging for all authentication flows

## Coding Standards & Conventions

### JavaScript Style
```javascript
// Function naming: camelCase with descriptive verbs
function loadUserData() { }
function updateTabCounts() { }
function performSearch() { }

// Constants: UPPER_SNAKE_CASE
const TAB_IDS = ['home', 'watching', 'wishlist', 'watched', 'discover', 'settings'];
const MOBILE_BP = 640;

// Variables: camelCase with descriptive names
let isSearching = false;
let currentQuery = '';
let searchTimeout = null;

// Objects: descriptive property names
const cardData = {
  id: item.id,
  title: item.title,
  posterUrl: item.posterUrl,
  rating: item.rating
};
```

### CSS Architecture
```css
/* CSS Custom Properties for theming */
:root {
  --fg: #1f2937;                 /* Primary text */
  --bg: #ffffff;                 /* Background */
  --muted: #374151;              /* Muted text */
  --accent: #ff4c8d;             /* Accent color */
  --border: #e5e7eb;             /* Border color */
}

/* BEM-style naming for components */
.card { }
.card--poster { }
.card__title { }
.card__actions { }

/* Mobile-first responsive design */
@media (max-width: 768px) {
  .card { /* mobile styles */ }
}
```

### HTML Structure
```html
<!-- Semantic HTML5 with accessibility -->
<main role="main">
  <section id="homeSection" class="tab-section active" aria-labelledby="homeTab">
    <div class="home-group">
      <div class="preview-row-container">
        <!-- Card components -->
      </div>
    </div>
  </section>
</main>

<!-- Data attributes for JavaScript targeting -->
<button data-action="add" data-id="123" data-list="wishlist">
  Add to Wishlist
</button>
```

## Key Functions & Modules

### Core Application (`app.js`)
- **`FlickletApp.init()`**: Main initialization sequence
- **`FlickletApp.switchToTab(tab)`**: Tab navigation with search clearing
- **`FlickletApp.updateUI()`**: UI refresh after data changes
- **`FlickletApp.saveData()`**: Firebase data persistence
- **`FlickletApp.handlePostAuthSuccess(user)`**: Post-auth pipeline
- **`FlickletApp.handleUserIdentity(user)`**: Username/snark management

### Authentication (`auth-manager.js`) ✅ COMPLETE
- **`AuthManager.init()`**: Initialize auth system with gated redirect handling
- **`AuthManager.setupAccountButton()`**: Idempotent button binding with single listener
- **`AuthManager.startLogin(provider)`**: Multi-provider auth (Google/Apple/Email)
- **`AuthManager.handleRedirectResult()`**: Redirect flow handling with DOM readiness
- **`AuthManager.showProviderModal()`**: Provider selection UI
- **`AuthManager.showEmailModal()`**: Email/password form with enhanced visibility
- **`AuthManager.handleEmailSubmit()`**: Email authentication with comprehensive logging
- **`AuthManager.startAppleLogin()`**: Apple redirect-only (does NOT work on localhost)
- **`AuthManager.startGoogleLogin()`**: Google popup/redirect with fallback handling

### Business Logic (`functions.js`)
- **`loadListContent(listType)`**: Render list items with unified card system
- **`updateTabCounts()`**: Update tab badges with counts
- **`moveItem(id, dest)`**: Move items between lists
- **`removeItemFromCurrentList(id)`**: Remove items from current list

### Search System (`search.js`)
- **`SearchModule.performSearch()`**: Main search execution
- **`SearchModule.clearSearch()`**: Clear search and return to previous tab
- **`SearchModule.getSearchState()`**: Get current search state

### Card Component (`Card.js`)
- **`Card(options)`**: Create standardized card elements
- **`createCardData(item, source, section)`**: Normalize item data for cards

## Data Flow & State Management

### Data Sources
1. **Local Storage**: Primary data persistence (`flicklet-data`)
2. **Firebase Firestore**: Cloud sync for authenticated users
3. **TMDB API**: Movie/TV show metadata and search
4. **User Input**: Search queries, list modifications

### State Updates
```javascript
// 1. User action triggers function
moveItem(itemId, 'watched');

// 2. Update global state
appData.movies.watched.push(item);

// 3. Persist to storage
saveAppData();

// 4. Update UI
updateUI();
updateTabCounts();
```

### Event System
```javascript
// Custom events for module communication
document.dispatchEvent(new CustomEvent('app:data:ready', { 
  detail: { source: 'localStorage' } 
}));

// Event listeners in modules
document.addEventListener('app:data:ready', () => {
  updateTabCounts();
});
```

## Firebase Integration

### Authentication
- **Google Sign-In**: Primary authentication method
- **Apple Sign-In**: Secondary authentication method
- **Email/Password**: Tertiary authentication method
- **Firebase Auth**: User state management
- **Persistence**: Local storage with cloud sync

### Data Structure
```javascript
// Firestore document structure
users/{uid}/
├── profile: { email, displayName, photoURL }
├── watchlists: {
│   ├── tv: { watching: [], wishlist: [], watched: [] }
│   └── movies: { watching: [], wishlist: [], watched: [] }
│   }
└── settings: { theme, lang, username, usernamePrompted }
```

### Firebase Field Mapping (Evidence-Based)
**CRITICAL**: This mapping is based on actual Firebase data analysis and must be followed exactly.

#### User Profile Fields
| App Field | Firebase Path | Type | Direction | Notes |
|-----------|---------------|------|-----------|-------|
| uid | users/{uid}.uid | string | read+write | Matches auth UID; present as string |
| email | users/{uid}.email | string | read+write | Also present at profile.email |
| email | users/{uid}.profile.email | string | read+write | Duplicate data; keep in sync with top-level |
| displayName | users/{uid}.profile.displayName | string | read+write | Preferred name field; top-level username conflicts observed |
| username | users/{uid}.username | string | read+write | Conflicts observed across users (e.g., 'Travis' vs 'Travis Likes') |
| photoURL | users/{uid}.photoURL | string\|null | read+write | Also present at profile.photoURL (string or empty) |
| photoURL | users/{uid}.profile.photoURL | string | read+write | Duplicate of top-level photoURL; empty string observed |
| lastLoginAt | users/{uid}.lastLoginAt | string\|timestamp | read | Type varies across users: ISO string vs Firestore timestamp |
| lastUpdated | users/{uid}.lastUpdated | timestamp | read+write | Observed on first user document |
| ownerUid | users/{uid}.ownerUid | string | read+write | Observed on first user document |
| pro | users/{uid}.pro | boolean | read+write | Top-level subscription flag observed on first user |

#### Settings Fields
| App Field | Firebase Path | Type | Direction | Notes |
|-----------|---------------|------|-----------|-------|
| lang | users/{uid}.settings.lang | string | read+write | Language code; 'en' observed |
| mardiGras | users/{uid}.settings.mardiGras | boolean | read+write | Observed on first user |
| settings_displayName | users/{uid}.settings.displayName | string | read | Literal dotted key at top-level (not nested). Treat as data anomaly |

#### Notification Fields
| App Field | Firebase Path | Type | Direction | Notes |
|-----------|---------------|------|-----------|-------|
| theme | users/{uid}.notif.theme | string | read+write | Observed 'light' |
| episodesNotif | users/{uid}.notif.episodes | boolean | read+write | Episode notifications toggle |
| digestNotif | users/{uid}.notif.digest | boolean | read+write | Observed on second user |
| discoverNotif | users/{uid}.notif.discover | boolean | read+write | Observed on second user |
| proNotif | users/{uid}.notif.pro | boolean | read+write | Observed on both; semantics distinct from top-level 'pro' |

#### Custom Rows Fields
| App Field | Firebase Path | Type | Direction | Notes |
|-----------|---------------|------|-----------|-------|
| myRows[].key | users/{uid}.myRows[].key | string | read+write | Preset keys like 'anime','horror' |
| myRows[].type | users/{uid}.myRows[].type | string | read+write | Observed 'preset' |

#### Watchlist Movie Fields
**Movies Watched/Watching/Wishlist** - All arrays follow same structure:
| App Field | Firebase Path | Type | Direction | Notes |
|-----------|---------------|------|-----------|-------|
| watchlists.movies.{list}[].adult | users/{uid}.watchlists.movies.{list}[].adult | boolean | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |
| watchlists.movies.{list}[].backdrop_path | users/{uid}.watchlists.movies.{list}[].backdrop_path | string\|null | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |
| watchlists.movies.{list}[].genre_ids | users/{uid}.watchlists.movies.{list}[].genre_ids | array<number> | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |
| watchlists.movies.{list}[].id | users/{uid}.watchlists.movies.{list}[].id | number | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |
| watchlists.movies.{list}[].media_type | users/{uid}.watchlists.movies.{list}[].media_type | string | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |
| watchlists.movies.{list}[].original_language | users/{uid}.watchlists.movies.{list}[].original_language | string | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |
| watchlists.movies.{list}[].original_title | users/{uid}.watchlists.movies.{list}[].original_title | string | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |
| watchlists.movies.{list}[].overview | users/{uid}.watchlists.movies.{list}[].overview | string | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |
| watchlists.movies.{list}[].popularity | users/{uid}.watchlists.movies.{list}[].popularity | number | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |
| watchlists.movies.{list}[].poster_path | users/{uid}.watchlists.movies.{list}[].poster_path | string\|null | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |
| watchlists.movies.{list}[].release_date | users/{uid}.watchlists.movies.{list}[].release_date | string | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |
| watchlists.movies.{list}[].title | users/{uid}.watchlists.movies.{list}[].title | string | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |
| watchlists.movies.{list}[].type | users/{uid}.watchlists.movies.{list}[].type | string | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |
| watchlists.movies.{list}[].video | users/{uid}.watchlists.movies.{list}[].video | boolean | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |
| watchlists.movies.{list}[].vote_average | users/{uid}.watchlists.movies.{list}[].vote_average | number | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |
| watchlists.movies.{list}[].vote_count | users/{uid}.watchlists.movies.{list}[].vote_count | number | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |
| watchlists.movies.{list}[].networks | users/{uid}.watchlists.movies.{list}[].networks | array\|absent | read+write | Observed in snapshots; 'type' optional; 'networks' occasionally present |

#### Watchlist TV Fields
**TV Watched/Watching/Wishlist** - All arrays follow same structure:
| App Field | Firebase Path | Type | Direction | Notes |
|-----------|---------------|------|-----------|-------|
| watchlists.tv.{list}[].adult | users/{uid}.watchlists.tv.{list}[].adult | boolean | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].backdrop_path | users/{uid}.watchlists.tv.{list}[].backdrop_path | string | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].first_air_date | users/{uid}.watchlists.tv.{list}[].first_air_date | string | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].genre_ids | users/{uid}.watchlists.tv.{list}[].genre_ids | array<number> | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].genres | users/{uid}.watchlists.tv.{list}[].genres | array<object{id,name}> | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].homepage | users/{uid}.watchlists.tv.{list}[].homepage | string | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].id | users/{uid}.watchlists.tv.{list}[].id | number | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].in_production | users/{uid}.watchlists.tv.{list}[].in_production | boolean | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].languages | users/{uid}.watchlists.tv.{list}[].languages | array<string> | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].last_air_date | users/{uid}.watchlists.tv.{list}[].last_air_date | string | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].last_episode_to_air | users/{uid}.watchlists.tv.{list}[].last_episode_to_air | object | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].media_type | users/{uid}.watchlists.tv.{list}[].media_type | string | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].name | users/{uid}.watchlists.tv.{list}[].name | string | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].networks | users/{uid}.watchlists.tv.{list}[].networks | array<object{id,logo_path,name,origin_country}> | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].next_episode_to_air | users/{uid}.watchlists.tv.{list}[].next_episode_to_air | null\|object | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].number_of_episodes | users/{uid}.watchlists.tv.{list}[].number_of_episodes | number | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].number_of_seasons | users/{uid}.watchlists.tv.{list}[].number_of_seasons | number | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].origin_country | users/{uid}.watchlists.tv.{list}[].origin_country | array<string> | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].original_language | users/{uid}.watchlists.tv.{list}[].original_language | string | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].original_name | users/{uid}.watchlists.tv.{list}[].original_name | string | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].overview | users/{uid}.watchlists.tv.{list}[].overview | string | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].popularity | users/{uid}.watchlists.tv.{list}[].popularity | number | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].poster_path | users/{uid}.watchlists.tv.{list}[].poster_path | string | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].production_companies | users/{uid}.watchlists.tv.{list}[].production_companies | array<object{id,logo_path,name,origin_country}> | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].runtime | users/{uid}.watchlists.tv.{list}[].runtime | number\|absent | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].status | users/{uid}.watchlists.tv.{list}[].status | string\|absent | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].vote_average | users/{uid}.watchlists.tv.{list}[].vote_average | number | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].vote_count | users/{uid}.watchlists.tv.{list}[].vote_count | number | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[]._score | users/{uid}.watchlists.tv.{list}[]._score | number\|absent | read+write | Observed across users; some fields optional/absent in given items |
| watchlists.tv.{list}[].because | users/{uid}.watchlists.tv.{list}[].because | string\|absent | read+write | Observed across users; some fields optional/absent in given items |

#### Data Anomalies (Handle Carefully)
| App Field | Firebase Path | Type | Direction | Notes |
|-----------|---------------|------|-----------|-------|
| person (anomaly).media_type | users/{uid}.watchlists.movies.watched[].media_type | string | read | One item had media_type 'person' with person-shaped fields; treat as anomaly |
| person (anomaly).known_for[] | users/{uid}.watchlists.movies.watched[].known_for[] | array<object> | read | Present only when media_type='person' |
| watchlists.tv.undefined[] | users/{uid}.watchlists.tv.undefined[] | array<object> | read | Unexpected list key 'undefined' observed on first user |
| database_location | META.database_location | string | read | Provided as 'nam5'; not stored inside a user document |

#### Critical Implementation Notes
1. **Duplicate Fields**: `email` and `photoURL` exist at both top-level and `profile.*` - keep in sync
2. **Username Conflicts**: Top-level `username` conflicts with `profile.displayName` - prefer `profile.displayName`
3. **Type Variations**: `lastLoginAt` can be string or timestamp - handle both
4. **Optional Fields**: Many watchlist fields are optional/absent - always check existence
5. **Data Anomalies**: Handle `media_type='person'` and `undefined` list keys gracefully
6. **Array Structure**: All watchlist arrays follow consistent structure across `watching`, `wishlist`, `watched`

### Sync Strategy
1. **Local First**: All operations work offline
2. **Cloud Sync**: Background sync when authenticated
3. **Conflict Resolution**: Last-write-wins with timestamps

## Performance Optimizations

### Loading Strategy
- **Critical CSS**: Inlined for above-the-fold content
- **Async CSS**: Non-critical styles loaded asynchronously
- **Script Loading**: Explicit order with dependencies
- **Image Lazy Loading**: `loading="lazy"` on poster images

### Rendering Optimizations
- **Virtual Scrolling**: Large lists use virtual scrolling
- **Debounced Search**: 500ms delay on search input
- **Memoization**: Cached search results and API calls
- **Request Idle Callback**: Heavy operations deferred to idle time

## Mobile & Responsive Design

### Breakpoints
- **Mobile**: ≤640px (primary target)
- **Tablet**: 641px - 768px
- **Desktop**: ≥769px

### Mobile-Specific Features
- **Touch Gestures**: Swipe navigation for carousels
- **Viewport Units**: `100svh` for full-screen mobile
- **Safe Areas**: `env(safe-area-inset-*)` for notched devices
- **Snap Scrolling**: `scroll-snap-type` for card carousels

## Testing & Quality Assurance

### Pre-Development Validation Requirements
Before making any code changes, the assistant must:

1. **API Key Validation**
   - Verify TMDB API key in meta tag is valid and functional
   - Test one API call to ensure openTMDBLink works without errors
   - If API key invalid, STOP and request valid key from user

2. **Data Source Validation**
   - Confirm all data sources use real, valid IDs (not fake/sample data)
   - Verify data structure matches what functions expect
   - If using sample data, STOP and request real data or different approach

3. **End-to-End Testing Requirements**
   - Test all interactive elements (clicks, navigation) work without errors
   - Verify visual changes are actually visible and functional
   - Confirm settings changes affect display as expected
   - If any test fails, STOP and fix before proceeding

4. **Visual Verification (Mandatory)**
   - Before coding: Take screenshot of current state
   - After coding: Take screenshot of new state
   - Verify changes are visible and functional
   - If no visual change, STOP and debug rendering

5. **CSS Debugging Workflow (CRITICAL)**
   - Test CSS Loading: Add obvious visual change (e.g., `background: red !important`) to verify file is being served
   - Specificity Issues: Use more specific selectors (e.g., `#group-1-your-shows .home-preview-row`) when rules are overridden
   - Cache Testing: User uses "Empty Cache and Hard Reload" to test changes
   - No Build Process: CSS changes take effect immediately with Netlify Dev - no compilation needed
   - File Location: All CSS changes go directly in `www/styles/` directory

### Code Quality Tools
- **ESLint**: JavaScript linting
- **JSCPD**: Duplicate code detection
- **Axe**: Accessibility testing
- **Lighthouse**: Performance auditing
- **Depcheck**: Dependency analysis

### Accessibility Standards
- **WCAG 2.1 AA Compliance**: All components must meet accessibility standards
- **ARIA Labels**: Proper labeling for screen readers
- **Keyboard Navigation**: Full keyboard accessibility
- **Color Contrast**: WCAG AA compliant color ratios
- **Focus Management**: Clear focus indicators and logical tab order

#### WCAG 2.1 AA Compliance Checkpoints
- **Perceivable**:
  - Text alternatives for images and media
  - Captions and transcripts for video content
  - Sufficient color contrast (4.5:1 for normal text, 3:1 for large text)
  - Resizable text up to 200% without loss of functionality
- **Operable**:
  - Keyboard accessible for all functionality
  - No seizure-inducing content (flashing < 3 times per second)
  - Clear navigation and consistent UI patterns
  - Sufficient time limits with ability to extend or disable
- **Understandable**:
  - Clear language and readable text
  - Consistent navigation and functionality
  - Error identification and suggestions for correction
  - Help and documentation available
- **Robust**:
  - Valid, semantic HTML markup
  - Compatible with assistive technologies
  - Future-proof code that works with evolving technologies

### Testing Strategy
- **Unit Tests**: Individual function testing
- **Visual Tests**: Screenshot comparison
- **Integration Tests**: End-to-end user flows
- **Performance Tests**: Core Web Vitals monitoring

## Security Considerations

### Content Security Policy
```html
<meta http-equiv="Content-Security-Policy" 
      content="default-src 'self'; script-src 'self' 'unsafe-inline' https://www.gstatic.com; style-src 'self' 'unsafe-inline';">
```

### Data Validation
- **Input Sanitization**: XSS prevention
- **API Validation**: TMDB response validation
- **Firebase Rules**: Server-side data validation

## Development Workflow

### Localhost Server Rules (CRITICAL)
- **NEVER start Vite dev server**: Assistant must never run `npm run dev` or start any localhost servers
- **User controls servers**: User will start servers if needed, assistant should not assume or start them
- **Port 8888 conflict**: User always has localhost on port 8888, starting another server will cause conflicts
- **Apple Login limitation**: Apple Sign-In does NOT work on localhost - this is expected behavior, not a bug
- **Server availability**: If localhost doesn't show up, user will start it - do not attempt to start servers

### Development Environment (CRITICAL)
- **Netlify Dev**: User runs "Netlify Dev" on localhost:8888 for development
- **Static File Serving**: No build process needed - CSS/JS changes take effect immediately
- **Cache Management**: User uses "Empty Cache and Hard Reload" (right-click refresh button → Empty Cache and Hard Reload)
- **DevTools**: User typically has "Disable cache" checked in Network tab, but uses hard reload for testing
- **File Changes**: All changes to `www/` directory are served directly without compilation

### Legacy System Cleanup Rules (CRITICAL)
- **Investigate thoroughly**: When encountering legacy systems, search the ENTIRE codebase for usage
- **Search patterns**: Use multiple search strategies (grep, codebase_search, file patterns)
- **Check all contexts**: Look in HTML, JS, CSS, config files, and any other file types
- **Verify dependencies**: Check if other systems depend on the legacy system
- **Remove if unused**: If no active usage found, remove the legacy system entirely
- **Update references**: Clean up any remaining references or fallbacks to removed systems
- **Test thoroughly**: Ensure removal doesn't break any functionality

### Build Process
```bash
# Development (USER STARTS - NOT ASSISTANT)
npm run dev          # Vite dev server on port 8000

# Production
npm run build        # Vite build with Terser minification
npm run preview      # Preview production build

# Quality Assurance
npm run audit:dup    # Duplicate code detection
npm run audit:dead   # Dead code analysis
npm run lint:strict  # Strict linting
npm run a11y:axe     # Accessibility audit
npm run lh:mobile    # Lighthouse mobile audit
```

### Version Management
- **Semantic Versioning**: Major.Minor.Patch
- **Auto-increment**: Version bumped on code changes (currently v27.82)
- **Rollback Support**: Easy rollback with version display
- **Authentication Complete**: All login methods working as of v27.82

## Common Patterns & Best Practices

### Error Handling
```javascript
try {
  const result = await performOperation();
  return result;
} catch (error) {
  console.error('Operation failed:', error);
  showNotification('Operation failed', 'error');
  return null;
}
```

### Async Operations
```javascript
// Promise-based async operations
async function loadData() {
  try {
    const data = await fetchData();
    processData(data);
  } catch (error) {
    handleError(error);
  }
}
```

### DOM Manipulation
```javascript
// Safe DOM queries with fallbacks
const element = document.getElementById('target') || 
                document.querySelector('.fallback');

if (element) {
  element.classList.add('active');
}
```

### Event Delegation
```javascript
// Use event delegation for dynamic content
document.addEventListener('click', (e) => {
  const button = e.target.closest('[data-action]');
  if (button) {
    handleAction(button.dataset.action);
  }
});
```

## Troubleshooting Guide

### Common Issues
1. **Firebase Not Loading**: Check `firebase-config.js` and network connectivity
2. **Search Not Working**: Verify TMDB API key and `searchTMDB` function
3. **Cards Not Rendering**: Check `Card.js` component and CSS classes
4. **Mobile Layout Issues**: Verify viewport meta tag and CSS breakpoints
5. **Auth Button Issues**: Check for duplicate listeners, verify `AuthManager.setupAccountButton()`
6. **Username Not Showing**: Verify `#leftSnark` element and `renderSnark()` function

### Debug Tools
- **Console Logging**: Extensive logging with `[module]` prefixes
- **Performance Monitor**: Built-in performance tracking
- **Error Boundaries**: Graceful error handling with fallbacks

### Authentication Debugging ✅ COMPLETE
```javascript
// Check button listeners (should be exactly 1)
getEventListeners(document.getElementById('accountButton')).click?.length

// Check redirect flag
sessionStorage.getItem('auth:redirectPending')

// Check username rendering
document.getElementById('leftSnark')?.textContent

// Check account button label
document.getElementById('accountButtonLabel')?.textContent

// Check email modal visibility
document.getElementById('emailAuthModal')?.offsetParent !== null

// Check provider modal state
document.getElementById('providerModal')?.offsetParent !== null

// Debug all authentication flows
console.log('[auth] All login methods working:', {
  google: '✅ Popup/redirect with fallback',
  apple: '✅ Redirect-only (does NOT work on localhost)', 
  email: '✅ Form-based with enhanced modal visibility'
});
```

#### Authentication Status ✅ ALL WORKING
- **Google Login**: ✅ Popup (desktop) / Redirect (mobile) with proper fallback
- **Apple Login**: ✅ Redirect-only (does NOT work on localhost - expected behavior)
- **Email Login**: ✅ Form-based with enhanced modal visibility (z-index: 99999)
- **Modal Management**: ✅ Proper cleanup without conflicts
- **Redirect Handling**: ✅ Gated by flag and DOM readiness
- **Error Handling**: ✅ Comprehensive logging and user feedback

## FlickWord Game System

### Overview
FlickWord is a Wordle-style daily word guessing game integrated into the Flicklet app. It features a modal-based interface with responsive design, dynamic stats tracking, and keyboard color feedback.

### Architecture

#### Core Files
- **`www/features/flickword-v2.html`** - Main game implementation (iframe content)
- **`www/scripts/modules/flickword-modal.js`** - Modal control and stats management
- **`www/index.html`** - Game launcher and stats display (lines 536-575)
- **`www/styles/main.css`** - Modal and stats styling (lines 2670-2715)

#### Game Flow
1. **Launch**: User clicks FlickWord button → opens modal with iframe
2. **Play**: User enters 5-letter words → gets color feedback
3. **Complete**: Game ends → stats update → modal closes
4. **Stats**: Main page displays updated statistics

### Key Components

#### 1. Modal System
```html
<!-- Game Modal Structure -->
<div class="game-modal" id="modal-flickword" aria-hidden="true" role="dialog">
  <div class="gm-overlay" data-close></div>
  <div class="gm-dialog" role="document">
    <header class="gm-header">
      <h3 id="modal-flickword-title">🎯 FlickWord</h3>
      <button class="gm-close" type="button" aria-label="Close" data-close>&times;</button>
    </header>
    <main class="gm-body">
      <iframe id="flickword-game-frame" src="/features/flickword-v2.html" 
              sandbox="allow-scripts allow-same-origin"></iframe>
    </main>
  </div>
</div>
```

#### 2. Stats Display
```html
<!-- Stats Card Layout -->
<div class="game-stats">
  <!-- Top Row: Overall Performance -->
  <div class="stat-item">
    <span class="stat-label">Games</span>
    <span class="stat-value" data-fw-games>0</span>
  </div>
  <div class="stat-item">
    <span class="stat-label">Won</span>
    <span class="stat-value" data-fw-won>0</span>
  </div>
  <div class="stat-item">
    <span class="stat-label">Lost</span>
    <span class="stat-value" data-fw-lost>0</span>
  </div>
  <!-- Bottom Row: Current Performance -->
  <div class="stat-item">
    <span class="stat-label">Streak</span>
    <span class="stat-value" data-fw-streak>0</span>
  </div>
  <div class="stat-item">
    <span class="stat-label">Best</span>
    <span class="stat-value" data-fw-best>0</span>
  </div>
  <div class="stat-item">
    <span class="stat-label">Win %</span>
    <span class="stat-value" data-fw-win>—</span>
  </div>
</div>
```

## Future Considerations

### Scalability
- **Code Splitting**: Lazy load non-critical modules
- **Service Workers**: Offline functionality and caching
- **CDN Integration**: Static asset optimization

### Feature Roadmap
- **Real-time Sync**: WebSocket integration for live updates
- **Advanced Search**: Filters, sorting, and saved searches
- **Social Features**: Sharing and collaboration
- **Analytics**: User behavior tracking and insights

## Document Maintenance Rules

### Update Protocol
- **Gap Identification**: When gaps or missing information are discovered in this document during development, the assistant must ask the user for approval before updating
- **User Approval Required**: Always confirm with the user before adding new sections or modifying existing content
- **Version Tracking**: Document updates should be noted in version comments when significant changes are made
- **Completeness Check**: Regularly review the document for completeness against actual codebase implementation

---

*This document serves as the definitive guide for understanding and working with the Flicklet TV Tracker codebase. Keep it updated as the project evolves.*
