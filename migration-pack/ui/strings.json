[
  "Firebase modular bridge not ready yet; skip init",
  "Firebase modular bridge ready",
  "Firebase bridge error",
  "features/trivia.html",
  "DailyTrivia root not found",
  "Daily Trivia Game",
  ";\r\n    iframe.sandbox = ",
  ";\r\n    iframe.style.width = ",
  ";\r\n    /* Height now managed by card system */\r\n    iframe.style.border = ",
  ";\r\n    iframe.style.borderRadius = ",
  ";\r\n\r\n    // If your trivia uses a daily seed, pass date (safe even if ignored)\r\n    iframe.src = ",
  ");\r\n        const next = { ...prev, ...data.payload };\r\n        localStorage.setItem(",
  ");\r\n        $(",
  ") && $(",
  ").replaceChildren(String(stats.streak ?? 0));\r\n        $(",
  ").replaceChildren(String(stats.best ?? 0));\r\n        $(",
  ").replaceChildren(String(stats.acc ?? ",
  "));\r\n      } catch {}\r\n    };\r\n    window.addEventListener(",
  ", onMsg);\r\n\r\n    handle = {\r\n      iframe,\r\n      destroy() {\r\n        try {\r\n          iframe.removeEventListener(",
  ", onLoad);\r\n        } catch {}\r\n        try {\r\n          window.removeEventListener(",
  ", onMsg);\r\n        } catch {}\r\n        try {\r\n          iframe.src = ",
  "Trivia mount failed",
  "Trivia unmount failed",
  ".gm-body",
  "use strict",
  "🔍 Fallback search initialization starting...",
  "clearSearchBtn",
  "✅ Setting up search button (fallback)",
  "🔍 Search button clicked (fallback)",
  "✅ Setting up clear search button (fallback)",
  "🧹 Clear search button clicked (fallback)",
  "✅ Setting up search input Enter key (fallback)",
  "⌨️ Enter key pressed (fallback)",
  "✅ Fallback search initialization complete",
  "💬 Opening settings to feedback section",
  ".settings-tabs button[data-target=",
  "#about .settings-subsection:last-child",
  "💬 Settings tab not found",
  "Please go to Settings → About to share your feedback",
  "🔧 Episode tracking toggle handler starting...",
  "🔧 Episode tracking toggle already set up, skipping",
  "🔧 Episode tracking toggle found:",
  "🔧 Episode tracking toggle not found, will retry...",
  "🔧 Stored episode tracking value:",
  "🔧 Episode tracking toggle changed:",
  "🔧 Setting episode tracking to:",
  "🔧 updateEpisodeTrackingUI called with enabled:",
  ");\r\n    console.log(",
  ", episodeButtons.length);\r\n    episodeButtons.forEach((btn, index) => {\r\n      console.log(\r\n        ",
  ",\r\n        btn.textContent,\r\n        ",
  ",\r\n        enabled ? ",
  " : ",
  ",\r\n      );\r\n      btn.style.display = enabled ? ",
  ";\r\n    });\r\n\r\n    // Update any existing progress hints\r\n    const progressHints = document.querySelectorAll(",
  ");\r\n    progressHints.forEach((hint) => {\r\n      hint.style.display = enabled ? ",
  "🔧 Retrying to find episode tracking toggle, attempt:",
  "🔧 Failed to find episode tracking toggle after 20 attempts",
  "🔧 Page load - updating episode tracking UI, enabled:",
  "🔧 Curated rows setting handler starting...",
  "t do it again\n    if (input && input.dataset.setupComplete) {\n      console.log(",
  ");\n      return true;\n    }\n\n    input = document.querySelector(",
  ");\n    console.log(",
  ", !!input, input);\n    if (!input) {\n      console.warn(",
  "🔧 setValueSafely called with:",
  "isSettingValue will be set to true",
  "🔧 Set value safely to:",
  "🔧 setValueSafely completed, isSettingValue reset to false",
  "🔧 Stored value:",
  ");\n    }\n\n    // Function to apply the setting\n    function applySetting() {\n      console.log(\n        ",
  ",\n        input.value,\n        ",
  ",\n        isInitialSetup,\n        ",
  ",\n        hasUserInteracted,\n        ",
  "🔧 Setting curated rows to:",
  "🔧 Dispatched curated:rerender event",
  "🔧 Showing notification for user interaction - value changed from",
  ",\n          n,\n        );\n        window.showNotification(",
  "t notify again\n      } else {\n        console.log(\n          ",
  ",\n          hasUserInteracted,\n          ",
  ",\n          isSettingValue,\n          ",
  ",\n          lastNotifiedValue !== n,\n          ",
  "✅ Saved",
  ";\n        }, 2000);\n      }\n\n      setTimeout(() => {\n        input.style.borderColor = ",
  ";\n        input.style.backgroundColor = ",
  ";\n      }, 1000);\n    }\n\n    // Debounced function for input events\n    function debouncedApply() {\n      console.log(",
  "🔧 User interacted with input - notifications enabled, reset lastNotifiedValue",
  "🔧 User changed input - notifications enabled",
  "🔧 User blurred input - notifications enabled",
  "🔧 Initial setup complete - notifications enabled",
  "🔧 refreshValue called - resetting hasUserInteracted to false",
  "🔧 Refreshing value from storage:",
  "🔧 No refresh needed - value already correct:",
  "🔧 Input clicked",
  "🔧 Input focused",
  "🔧 Event listeners attached to input",
  "🔧 Input is hidden - user needs to go to Settings > Layout tab to see it",
  "🔧 Input is visible and ready",
  "🔧 Retrying to find input, attempt:",
  "🔧 Failed to find input after 20 attempts",
  "🔧 Layout section became active, re-setting up input",
  ")) {\n        console.log(",
  ");\n        clearInterval(checkForTabs);\n\n        const layoutTab = document.querySelector(",
  ");\n        if (layoutTab) {\n          layoutTab.addEventListener(",
  ", () => {\n            console.log(",
  ");\n            setTimeout(() => {\n              if (!input) {\n                console.log(",
  ");\n                setupInput();\n              } else {\n                console.log(",
  ");\n                console.log(",
  ", input.offsetParent !== null);\n                console.log(",
  ", input.parentElement?.offsetParent !== null);\n                console.log(",
  ", input.parentElement?.className);\n                console.log(\n                  ",
  "🔧 Refreshing curated rows setting on Layout tab click",
  "🔧 Currently watching limit setting handler starting...",
  "t do it again\r\n    if (input && input.dataset.setupComplete) {\r\n      console.log(",
  ");\r\n      return true;\r\n    }\r\n\r\n    input = document.querySelector(\r\n      ",
  ",\r\n    );\r\n    console.log(",
  ", !!input, input);\r\n    if (!input) {\r\n      console.warn(",
  "🔧 Stored currently watching limit value:",
  ");\r\n    }\r\n\r\n    // Function to apply the setting\r\n    function applySetting() {\r\n      console.log(\r\n        ",
  ",\r\n        input.value,\r\n        ",
  ",\r\n        isInitialSetup,\r\n        ",
  ",\r\n        hasUserInteracted,\r\n        ",
  "🔧 Setting currently watching limit to:",
  "🔧 Dispatched currentlyWatching:rerender event",
  ",\r\n          n,\r\n        );\r\n        window.showNotification(",
  "t notify again\r\n      } else {\r\n        console.log(\r\n          ",
  ",\r\n          hasUserInteracted,\r\n          ",
  ",\r\n          isSettingValue,\r\n          ",
  ",\r\n          lastNotifiedValue !== n,\r\n          ",
  ";\r\n        }, 2000);\r\n      }\r\n\r\n      setTimeout(() => {\r\n        input.style.borderColor = ",
  ";\r\n        input.style.backgroundColor = ",
  "🔧 debouncedApply called for currently watching limit",
  "🔧 Debounced apply executing for currently watching limit",
  "🔧 Currently watching limit input event fired",
  "🔧 Currently watching limit change event fired",
  "🔧 Currently watching limit input setup complete",
  "🔧 Currently watching limit setup attempt",
  "🔧 Failed to setup currently watching limit input after",
  "🔧 Refreshing currently watching limit setting...",
  "ℹ️ Firebase modular bridge not ready — cloud features disabled",
  ".local",
  ".lan",
  "netlify.app",
  "[SW] Registration skipped in this environment:",
  "📱 Mobile class applied - viewport width:",
  "📱 Mobile class added on resize",
  "📱 Mobile class removed on resize",
  "SW disabled on preview",
  "[SW] Disabled for deploy preview:",
  "Firebase modular bridge not ready yet; skipping init",
  "❌ Firebase config missing apiKey",
  "✅ Firebase modular bridge ready:",
  "🔥 Firebase bridge error:",
  "🏠 Home Layout Guardrails loaded",
  "❌ HOME ORDER VIOLATION: homeSection not found",
  "🏠 Home sections found:",
  "❌ HOME ORDER VIOLATION: Missing required section ",
  ");\r\n        orderViolation = true;\r\n      } else if (foundIndex !== index) {\r\n        console.error(\r\n          ",
  "❌ HOME ORDER VIOLATION: Unexpected section ",
  " at position ${index}",
  "❌ HOME ORDER VIOLATION: Removing unexpected nodes",
  "🗑️ Removing unexpected section: ${child.id}",
  ".stats",
  "🗑️ Purging legacy section: ${selector}",
  "💬 Quote bar initialized - content handled by marquee system",
  "🚫 Auto-inject systems disabled",
  ".flickword-mount",
  "🎯 FlickWord mount found: .flickword-mount",
  "🎯 FlickWord mount fallback: #homeSection",
  "🎯 FlickWord system overridden for new layout",
  ".community-content",
  ".community-left",
  ".community-right",
  "🔄 Community containers resized",
  "🏠 Initializing Home Layout Guardrails...",
  "🎮 Initializing Community Games...",
  "🎮 Game script check:",
  "🎮 FlickletTrivia found, checking for init function...",
  "🎮 Available methods:",
  "🎮 Trivia elements found:",
  ") {\r\n          console.log(",
  ");\r\n          // Apply compact styling to existing content\r\n          questionEl.style.fontSize = ",
  ";\r\n          questionEl.style.lineHeight = ",
  ";\r\n          questionEl.style.marginBottom = ",
  ";\r\n\r\n          // Style existing choice buttons\r\n          const existingButtons = choicesEl.querySelectorAll(",
  ");\r\n          existingButtons.forEach((btn) => {\r\n            btn.style.padding = ",
  ";\r\n            btn.style.fontSize = ",
  ";\r\n            btn.style.marginBottom = ",
  ";\r\n            btn.style.borderRadius = ",
  "🎮 Community games containers ready",
  "✅ Home layout order validated",
  "🏠 Home section DOM changed, re-asserting order...",
  "🎯 Opening FlickWord modal",
  "s date for the game\r\n    const today = new Date().toISOString().split(",
  ")[0];\r\n    frame.src = ",
  ";\r\n    modal.style.display = ",
  ";\r\n\r\n    // Focus management\r\n    const closeBtn = modal.querySelector(",
  ");\r\n    if (closeBtn) closeBtn.focus();\r\n  }\r\n}\r\n\r\nfunction closeFlickWordModal() {\r\n  console.log(",
  ");\r\n  const modal = document.getElementById(",
  ");\r\n  const frame = document.getElementById(",
  ");\r\n\r\n  if (modal) {\r\n    modal.style.display = ",
  ";\r\n    if (frame) frame.src = ",
  ".flickword-teaser .streak",
  ".flickword-teaser .best",
  ");\r\n    streakEl.textContent = ",
  ";\r\n    bestEl.textContent = ",
  ";\r\n  }\r\n}\r\n\r\n// Initialize FlickWord teaser\r\nfunction initFlickWordTeaser() {\r\n  console.log(",
  ");\r\n  updateFlickWordStats();\r\n\r\n  // Listen for game results to update stats\r\n  window.addEventListener(",
  ", function (event) {\r\n    if (event.data && event.data.type === ",
  ") {\r\n      console.log(",
  ", event.data);\r\n      updateFlickWordStats();\r\n    }\r\n  });\r\n}\r\n\r\n// Initialize when ready\r\nif (document.readyState === ",
  ") {\r\n  document.addEventListener(",
  "🎮 Script starting...",
  "🎮 Initializing Game Cards Modal System",
  "🎮 Opening modal:",
  " + id);\r\n    if (!m) {\r\n      console.error(",
  ", id);\r\n      return;\r\n    }\r\n    lastOpener = opener || document.activeElement;\r\n    m.setAttribute(",
  "🎮 Modal opened:",
  "s date\r\n    if (id === ",
  ") {\r\n      const frame = qs(",
  ");\r\n      if (frame) {\r\n        const today = new Date().toISOString().split(",
  ")[0];\r\n        frame.src = ",
  ";\r\n      }\r\n    }\r\n\r\n    // Focus trap\r\n    const focusables = qsa(\r\n      ",
  "🔴 Closing modal:",
  "🎮 Wiring card:",
  "to modal:",
  " + cardId);\r\n    if (!card) {\r\n      console.error(",
  ", cardId);\r\n      return;\r\n    }\r\n    const open = (e) => {\r\n      console.log(",
  ", cardId);\r\n      e.preventDefault();\r\n      openModal(modalId, card);\r\n    };\r\n    card.addEventListener(",
  ", open);\r\n    card.addEventListener(",
  ", (e) => {\r\n      if (e.key === ",
  " || e.key === ",
  ") open(e);\r\n    });\r\n    const btn = qs(",
  " + cardId + ",
  ");\r\n    if (btn) {\r\n      console.log(",
  ", cardId);\r\n      btn.addEventListener(",
  ", open);\r\n    } else {\r\n      console.warn(",
  ", cardId);\r\n    }\r\n  }\r\n  // Check if modals exist\r\n  console.log(\r\n    ",
  ",\r\n    qsa(",
  ").map((m) => m.id),\r\n  );\r\n  console.log(",
  ", qs(",
  "));\r\n  console.log(",
  "));\r\n\r\n  wireCard(",
  ".game-modal",
  "🔴 Close button clicked for modal:",
  "🎮 Opening Trivia modal with data:",
  ".game-modal[aria-hidden=",
  "📊 Performance monitoring initialized",
  ".tab",
  "⚠️ High memory usage:",
  "❌ Module load error: ${modulePath}",
  "[perf] recordInteraction: invalid type",
  "[perf] recordInteraction guard",
  "📊 ${name}: ${metric.value.toFixed(2)}ms (${metric.rating})",
  ");\r\n      stored[name] = metric;\r\n      localStorage.setItem(",
  ", JSON.stringify(stored));\r\n    } catch (error) {\r\n      console.warn(",
  "${metric} is poor (${this.metrics[metric].value.toFixed(2)}ms)",
  "${metric} needs improvement (${this.metrics[metric].value.toFixed(2)}ms)",
  "Optimize images and reduce server response time for better LCP",
  "Reduce JavaScript execution time and optimize third-party scripts",
  "Add size attributes to images and avoid inserting content above existing content",
  "Consider code splitting for slow modules: ${slowModules\r\n            .map((m) => m.module)\r\n            .join(",
  "🔒 Security scanner initialized",
  ");\r\n\r\n    if (!cspMeta) {\r\n      this.addVulnerability(",
  "Content Security Policy not implemented",
  ")) {\r\n      this.addWarning(",
  "CSP allows unsafe-inline",
  "CSP allows unsafe-eval",
  "CSP missing default-src directive",
  "CSP missing script-src directive",
  "Potential XSS vulnerability: innerHTML usage",
  "Potential XSS vulnerability: insertAdjacentHTML usage",
  "document.write",
  "Potential XSS vulnerability: document.write usage",
  "Critical XSS vulnerability: eval() usage",
  "new Function",
  "Critical XSS vulnerability: new Function() usage",
  "Potentially dangerous URL: ",
  "Mixed content: HTTP image on HTTPS page",
  "Mixed content: HTTP script on HTTPS page",
  "Security headers should be verified server-side",
  "Potential hardcoded API key found",
  ")) {\r\n        this.addWarning(",
  "Potential hardcoded password found",
  "], [data-action*=",
  ",\r\n    );\r\n    if (authButtons.length === 0) {\r\n      this.addInfo(",
  "No authentication buttons found",
  "input, textarea, select",
  "Input missing required attribute",
  "Consider input sanitization for text inputs",
  "No try-catch error handling found",
  "console.error",
  "Consider adding console.error for error logging",
  ")) {\r\n          this.addWarning(",
  "Old jQuery version detected",
  "Old Bootstrap version detected",
  ") && !src.startsWith(",
  ");\r\n    });\r\n\r\n    if (externalScripts.length > 0) {\r\n      this.addInfo(",
  "${externalScripts.length} external dependencies found",
  "🚨 Security Vulnerability [${severity.toUpperCase()}]: ${message}",
  "⚠️ Security Warning [${severity.toUpperCase()}]: ${message}",
  "ℹ️ Security Check [${severity.toUpperCase()}]: ${message}",
  "Implement proper input validation and output encoding to prevent XSS attacks",
  "Implement a strict Content Security Policy",
  "Ensure all resources are served over HTTPS",
  "Implement secure authentication and avoid hardcoded credentials",
  "Add proper input validation and sanitization",
  "🔒 Running security scan...",
  "🔒 Security scan completed:",
  "t showing\r\n */\r\n\r\nconsole.log(",
  ");\r\n\r\n// Check if HomeClean class exists\r\nif (window.HomeClean) {\r\n    console.log(",
  ");\r\n    \r\n    // Check if it has the new methods\r\n    const instance = new window.HomeClean();\r\n    console.log(",
  ", {\r\n        hasCreateCWCardContent: typeof instance.createCWCardContent === ",
  ",\r\n        hasGetRealCurrentlyWatching: typeof instance.getRealCurrentlyWatching === ",
  ",\r\n        hasTransformItemToCardData: typeof instance.transformItemToCardData === ",
  "\r\n    });\r\n    \r\n    // Check if it",
  "✅ [DEBUG] Using NEW HomeClean implementation",
  "Test Show",
  "S1 E1",
  "/assets/img/poster-placeholder.png",
  "🔍 [DEBUG] Card content preview:",
  "...",
  "Want to Watch",
  "Not Interested",
  "Delete",
  "✅ [DEBUG] All 4 buttons found in card content",
  "❌ [DEBUG] Missing buttons in card content",
  "❌ [DEBUG] Using OLD HomeClean implementation",
  "❌ [DEBUG] HomeClean class not found",
  "🔍 [DEBUG] HomeClean state:",
  "⚠️ [DEBUG] No homeCleanState found",
  "✅ [DEBUG] #clean-root found",
  ".card",
  "🔍 [DEBUG] Found ${cards.length} cards",
  "🔍 [DEBUG] First card classes:",
  "🔍 [DEBUG] Found ${buttons.length} buttons in first card",
  "🔍 [DEBUG] Button ${i}:",
  "❌ [DEBUG] No buttons found in first card",
  "🔍 [DEBUG] First card HTML:",
  ".holiday-chip",
  "✅ [DEBUG] Holiday chip found",
  "⚠️ [DEBUG] No holiday chip found",
  "❌ [DEBUG] #clean-root not found",
  ");\r\nif (homeCleanCSS) {\r\n    console.log(",
  ");\r\n} else {\r\n    console.error(",
  ");\r\n}\r\n\r\nconsole.log(",
  "🔄 [FORCE REFRESH] Starting HomeClean force refresh...",
  "🗑️ [FORCE REFRESH] Destroying existing component...",
  ");\r\n        existingScripts.forEach(script => {\r\n            console.log(",
  "📥 [FORCE REFRESH] Reloading HomeClean script...",
  "✅ [FORCE REFRESH] HomeClean script reloaded",
  "❌ [FORCE REFRESH] Failed to reload HomeClean script",
  "✅ [FORCE REFRESH] New implementation loaded successfully",
  "🚀 [FORCE REFRESH] Mounting component...",
  "✅ [FORCE REFRESH] Component mounted successfully",
  "🔍 [FORCE REFRESH] Final check:",
  "🎉 [FORCE REFRESH] SUCCESS! Buttons are now visible",
  "❌ [FORCE REFRESH] Buttons still not visible",
  "❌ [FORCE REFRESH] Failed to mount component",
  "❌ [FORCE REFRESH] mountHomeClean not available",
  "❌ [FORCE REFRESH] Old implementation still loaded",
  "❌ [FORCE REFRESH] HomeClean class not found after reload",
  "❌ [FORCE REFRESH] Force refresh failed:",
  "🏁 [FORCE REFRESH] Force refresh completed",
  "\r\n      <div class=",
  ">\r\n        <div class=",
  "></div>\r\n        <div class=",
  "></div>\r\n      </div>\r\n    ",
  "✅ Core UI initialized",
  "🔍 Searching for:",
  "✅ Search completed",
  "✅ App functionality initialized",
  "🔄 No Firebase document found, preserving local settings",
  ";\r\n        const localTheme = appData.settings?.theme || ",
  "🔄 User signed in - loading from Firebase",
  ";\r\n      const localTheme = appData.settings?.theme || ",
  "🔄 Loading TV data from Firebase",
  "🔍 Firebase TV watching count:",
  "🔄 No TV data in Firebase, preserving local data",
  "🔄 Loading movie data from Firebase",
  "🔍 Firebase movie watching count:",
  "🔄 No movie data in Firebase, preserving local data",
  "🔄 No Firebase data found, preserving local data",
  "✅ User data loaded from Firebase successfully",
  "❌ Failed to load user data from Firebase:",
  ".modal-backdrop",
  ";\r\n\r\n    // Create modal content\r\n    const modal = document.createElement(",
  ");\r\n    modal.className = ",
  ";\r\n\r\n    // Add title\r\n    if (title) {\r\n      const titleEl = document.createElement(",
  ";\r\n      modal.appendChild(titleEl);\r\n    }\r\n\r\n    // Add content\r\n    if (html) {\r\n      if (typeof html === ",
  ";\r\n    closeBtn.addEventListener(",
  ";\r\n      modal.style.transform = ",
  ";\r\n    });\r\n\r\n    // Close on backdrop click\r\n    backdrop.addEventListener(",
  ".settings-tabs button",
  "🔧 Settings tabs found on page load:",
  "🔧 Tab ${index}:",
  ".card-more-menu",
  ".card-more-btn",
  "🔧 Click event detected on:",
  "🔧 Click target classes:",
  "🔧 Click target parent classes:",
  "🔧 Click target parent parent classes:",
  "🔧 Is settings tab button?",
  "🔧 All settings tabs found:",
  "⚙️ Settings tab clicked via event delegation:",
  "⚙️ Found tabs:",
  ".settings-section",
  "⚙️ Found sections:",
  "⚙️ Hiding section:",
  "⚙️ Target element:",
  "for selector:",
  "⚙️ Showing section:",
  "❌ Target not found:",
  "t log this as an error - it",
  "🔧 Found data-action element:",
  "🔧 Button element details:",
  "📺 Opening episode tracking for:",
  "📺 Episode tracking enabled:",
  "📺 openEpisodeModal available:",
  "📺 Modal function called successfully",
  "📺 Error calling episode modal:",
  "📺 Episode tracking modal function not available",
  "🔗 Button element:",
  "🔗 Button ID:",
  "🔗 Button classes:",
  "🔗 Calling openShareSelectionModal with event:",
  "🔗 Share modal function called successfully",
  "🔗 Error calling share modal:",
  "🔗 Share modal function not available",
  "🔗 Available functions:",
  "🔗 Poster button clicked:",
  ".show-card",
  ".card-more-dropdown",
  ".providers-slot",
  ".extras-slot",
  ".trivia-slot",
  "🔧 DOMContentLoaded - FABs should be visible now",
  "🚀 Using centralized FlickletApp initialization",
  "🔧 Initializing FAB docking system",
  "🔧 Manual FAB docking trigger",
  "⚠️ Using fallback initialization sequence",
  "Share import guard error:",
  "\r\n              <option value=",
  ">EN</option>\r\n              <option value=",
  ">ES</option>\r\n            ",
  "🔍 Feedback form submit handler called",
  "🔍 Hostname:",
  "127.0.0.1",
  "🏠 Local development mode - showing success message",
  "Thanks for sharing! Your thoughts have been received. 💭 (Local mode - will work in production)",
  "🌐 Production mode - submitting to Netlify",
  "/.netlify/functions/feedback",
  "✅ Feedback submitted successfully:",
  "Thanks for sharing! Your thoughts have been received. 💭",
  "❌ Error submitting feedback:",
  "Sorry, there was an error submitting your feedback. Please try again.",
  ");\r\n    if (feedbackForm) {\r\n      console.log(",
  ");\r\n      feedbackForm.addEventListener(",
  ", handleFeedbackSubmit);\r\n    } else {\r\n      console.log(",
  ");\r\n    a.href = URL.createObjectURL(blob);\r\n    a.download = ",
  "[Flicklet] Boot OK",
  "🧪 [VALIDATION] Starting HomeClean implementation test...",
  "✅ [VALIDATION] HomeClean class found",
  "❌ [VALIDATION] HomeClean class not found",
  "249, 250, 251",
  "✅ [VALIDATION] Light theme variables applied",
  "⚠️ [VALIDATION] Light theme variables may not be applied",
  "✅ [VALIDATION] #homeSection found",
  "❌ [VALIDATION] #homeSection not found",
  "🧪 [VALIDATION] Testing HomeClean initialization...",
  "✅ [VALIDATION] HomeClean initialized successfully",
  "✅ [VALIDATION] #clean-root created",
  "✅ [VALIDATION] All containers created",
  "⚠️ [VALIDATION] Only ${containersFound}/${containers.length} containers found",
  "✅ [VALIDATION] All rails created",
  "⚠️ [VALIDATION] Only ${railsFound}/${rails.length} rails found",
  "✅ [VALIDATION] ${cards.length} cards rendered",
  "⚠️ [VALIDATION] No cards rendered",
  ".rail",
  "✅ [VALIDATION] Rail scroll-snap configured",
  "⚠️ [VALIDATION] Rail scroll-snap not configured",
  "❌ [VALIDATION] #clean-root not created",
  "❌ [VALIDATION] HomeClean initialization failed",
  "❌ [VALIDATION] HomeClean test failed:",
  "🧪 [VALIDATION] Testing accessibility...",
  ".title, .group-title",
  "✅ [VALIDATION] Text contrast appears adequate",
  "⚠️ [VALIDATION] Text contrast may need improvement",
  ");\r\n        const h3Elements = cleanRoot.querySelectorAll(",
  ");\r\n        \r\n        if (h2Elements.length > 0 && h3Elements.length > 0) {\r\n            console.log(",
  ");\r\n        } else {\r\n            console.warn(",
  ");\r\n        }\r\n    }\r\n}\r\n\r\n// Run tests\r\ntestHomeCleanInit().then(() => {\r\n    testAccessibility();\r\n    console.log(",
  "🧪 [REAL DATA TEST] Testing Currently Watching data connection...",
  "🔍 [REAL DATA TEST] Checking data sources...",
  "✅ [REAL DATA TEST] WatchlistsAdapterV2 found",
  "🔍 [REAL DATA TEST] User UID:",
  "No user (local data)",
  "📊 [REAL DATA TEST] Adapter data:",
  "✅ [REAL DATA TEST] Found ${adapterData.watchingIds.length} watching IDs",
  "📺 [REAL DATA TEST] Item ${id}:",
  "\r\n                        });\r\n                    } else {\r\n                        console.warn(",
  ");\r\n                    }\r\n                }\r\n            } else {\r\n                console.warn(",
  ");\r\n            }\r\n        } else {\r\n            console.warn(",
  "🧪 [REAL DATA TEST] Testing HomeClean with real data...",
  "✅ [REAL DATA TEST] #homeSection found, initializing HomeClean...",
  "✅ [REAL DATA TEST] HomeClean initialized successfully",
  "📺 [REAL DATA TEST] Rendered ${cards.length} cards in CW rail",
  ".title",
  ".meta",
  "🎬 [REAL DATA TEST] First card: ",
  " - ${meta}",
  "❌ [REAL DATA TEST] HomeClean initialization failed",
  "❌ [REAL DATA TEST] #homeSection not found",
  "❌ [REAL DATA TEST] HomeClean class not found",
  "❌ [REAL DATA TEST] Test failed:",
  "🎉 [REAL DATA TEST] Test completed",
  "[home-clean] Failed to load holiday assignments:",
  "[home-clean] Failed to save holiday assignments:",
  "\r\n            <svg width=",
  " height=",
  " xmlns=",
  ">\r\n                <rect width=",
  " fill=",
  "/>\r\n                <text x=",
  " y=",
  " text-anchor=",
  " dominant-baseline=",
  " \r\n                      font-family=",
  " font-size=",
  ">\r\n                    ${text}\r\n                </text>\r\n            </svg>\r\n        ",
  "Title ${i}",
  "S${Math.floor(Math.random() * 3) + 1} • E${Math.floor(Math.random() * 10) + 1}",
  "Poster ${i}",
  "cw-${item.title}",
  "Unknown Title",
  "No Poster",
  "S${item.season || 1} • E${item.episode || 1}",
  "[home-clean] Next Up Data from tv.watching:",
  "[home-clean] No TV watching data for Next Up",
  "t have nextAirDate/airDate, just show all items as ",
  "\r\n        return source.slice(0, 12).map(item => {\r\n            return {\r\n                id: item.id || ",
  ",\r\n                title: item.name || item.title || ",
  ",\r\n                poster: item.poster_path ? \r\n                    ",
  " : \r\n                    this.generatePosterSVG(",
  ", 220, 330),\r\n                upNextText: ",
  "${genre.toLowerCase()}-show",
  "flicklet:curatedCache:${genre.toLowerCase()}",
  "[home-clean] Using cached data for ${genre}",
  "[home-clean] Fetching ${genre} data from TMDB...",
  "),\r\n                    sort_by: ",
  "for-you-${item.name}",
  "No description available.",
  "[home-clean] Failed to fetch ${genre} data:",
  "[home-clean] No data available for ${genre}. tmdbGet:",
  "[home-clean] Cache read error:",
  "[home-clean] Cache write error:",
  "card cw",
  "<div class=",
  ">Holiday: ${this.holidayAssignments[item.id]}</div>",
  ";\r\n\r\n        card.innerHTML = ",
  "background-image: url(",
  "); background-size: cover; background-position: center;",
  "${item.id}",
  "card up-next",
  "\r\n            <div class=",
  " style=",
  "${item.poster}",
  "></div>\r\n            <div class=",
  ">\r\n                <div class=",
  ">${item.title}</div>\r\n                <div class=",
  ">${item.upNextText}</div>\r\n            </div>\r\n        ",
  "card for-you",
  ")\r\n            : ",
  "[home-clean] Rail ${railId} not found",
  ".card-container",
  "[home-clean] Card container not found in ${railId}",
  ":\r\n                    card = this.createCWCard(item);\r\n                    break;\r\n                case ",
  ":\r\n                    card = this.createUpNextCard(item);\r\n                    break;\r\n                case ",
  "[home-clean] Rail ${railId} has ${data.length} cards, expected 12",
  ");\r\n        this.renderRail(",
  ", upNextData, ",
  "[home-clean] Failed to render For You rails:",
  "[home-clean] Action ${action} executed for ${title}",
  "[home-clean] Analytics track:",
  "[home-clean] Analytics tracking failed:",
  "Added ",
  " to wishlist",
  "[home-clean] Move to wishlist failed:",
  "Marked ",
  " as watched",
  "[home-clean] Mark as watched failed:",
  "Dismissed ",
  ");\r\n        } catch (error) {\r\n            console.error(",
  "Deleted ",
  ", error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show toast notification\r\n     */\r\n    showToast(message, type = ",
  "[home-clean] Toast: ${message}",
  "[home-clean] Toast failed:",
  "] .title",
  "[home-clean] Holiday assigned:",
  ");\r\n        if (!card) return;\r\n\r\n        let content = card.querySelector(",
  ");\r\n        let existingBadge = content.querySelector(",
  ");\r\n        \r\n        if (existingBadge) {\r\n            existingBadge.textContent = ",
  ";\r\n        } else {\r\n            const badge = document.createElement(",
  ");\r\n            badge.className = ",
  ";\r\n            badge.textContent = ",
  ";\r\n            content.insertBefore(badge, content.querySelector(",
  "Currently Watching",
  "Next Up",
  "Not found",
  "x mandatory",
  "[home-clean] Rail Report:",
  "[home-clean] Rerendered with current data sources",
  "card cw-card",
  ".poster-fallback",
  "Holiday +",
  "Add to Holiday",
  ";\n        chip.style.padding = ",
  ";\n        chip.style.borderRadius = ",
  ";\n        chip.style.border = ",
  ";\n        chip.style.background = ",
  ";\n        chip.style.color = ",
  ";\n        chip.style.fontSize = ",
  ";\n        chip.style.fontWeight = ",
  ";\n        chip.style.cursor = ",
  ";\n        \n        const blurb = document.createElement(",
  ");\n        blurb.className = ",
  ";\n        blurb.textContent = this.data.blurb || ",
  "[CardCW] Generated actions container with ${buttons.length} buttons for ${this.data.title}",
  "\n            <svg width=",
  ">\n                <rect width=",
  "/>\n                <text x=",
  " \n                      font-family=",
  ">\n                    ${title}\n                </text>\n            </svg>\n        ",
  "<img src=",
  " alt=",
  " class=",
  " />",
  "card fy-card",
  ";\n        \n        const where = document.createElement(",
  ");\n        where.className = ",
  ";  // FIXED: Dedicated class for blue tag\n        where.textContent = ",
  "cta-btn action-btn",
  "action-btn cta-btn",
  "[CardForYou] Generated actions container with 1 button for ${this.data.title}",
  "card up-card",
  ";\n        \n        const upNext = document.createElement(",
  ");\n        upNext.className = ",
  ";  // FIXED: Dedicated class for green line\n        upNext.textContent = this.data.upNextLine || ",
  " id=",
  " role=",
  " aria-modal=",
  ">\r\n                    <div class=",
  ">🎄 Assign Holiday Theme</div>\r\n                    <div class=",
  ">\r\n                        <div class=",
  " data-holiday=",
  ">🎃 Halloween</div>\r\n                        <div class=",
  ">🦃 Thanksgiving</div>\r\n                        <div class=",
  ">🎄 Christmas</div>\r\n                        <div class=",
  ">🎊 New Year</div>\r\n                        <div class=",
  ">💝 Valentine",
  "holiday-modal-btn primary",
  ";\r\n\r\n        // Add modal styles\r\n        const styles = ",
  ";\r\n\r\n        // Insert styles and modal\r\n        document.head.insertAdjacentHTML(",
  ", styles);\r\n        document.body.insertAdjacentHTML(",
  ", modalHTML);\r\n        \r\n        this.modal = document.getElementById(",
  ".holiday-option",
  ".holiday-option.selected",
  "New Year\\",
  "Independence Day",
  "Labor Day",
  "Memorial Day",
  "Veterans Day",
  " data-close=",
  ">\r\n                    <h3>Assign Holiday</h3>\r\n                    <button class=",
  ">&times;</button>\r\n                </div>\r\n                <div class=",
  ">\r\n                    <p class=",
  "></p>\r\n                    <div class=",
  ">\r\n                        ${this.holidays.map(holiday => ",
  ").join(",
  ")}\r\n                    </div>\r\n                </div>\r\n                <div class=",
  ">\r\n                    <button class=",
  ">Cancel</button>\r\n                </div>\r\n            </div>\r\n        ",
  ".card-title",
  "Assign holiday for: ${options.title || ",
  ";\r\n        }\r\n        \r\n        // Show modal\r\n        this.modal.style.display = ",
  ";\r\n        document.body.style.overflow = ",
  ";\r\n        \r\n        // Focus first holiday option\r\n        const firstOption = this.modal.querySelector(",
  ");\r\n        if (firstOption) {\r\n            firstOption.focus();\r\n        }\r\n        \r\n        console.log(",
  ";\r\n        \r\n        // Clear current card\r\n        this.currentCard = null;\r\n        \r\n        console.log(",
  "[HolidayModal] Selected holiday:",
  "[HomeClean] Initializing component...",
  "[HomeClean] Content replaced successfully",
  "[HomeClean] No root element provided",
  "[HomeClean] Component initialized successfully",
  "[HomeClean] Initialization failed:",
  "[HomeClean] Preserved community section",
  "[HomeClean] Preserved feedback section",
  "[HomeClean] Restored community content",
  "[HomeClean] Restored feedback content",
  "\n            <!-- 1. Your Shows Container (2 rails: CW + Next Up) -->\n            <div class=",
  ">\n                <div class=",
  ">\n                    <h2 class=",
  ">Your Shows</h2>\n                </div>\n                <div class=",
  "></div>\n                \n                <!-- Currently Watching Subsection -->\n                <div class=",
  ">\n                    <h3>Currently Watching</h3>\n                    <div class=",
  "></div>\n                </div>\n\n                <!-- Next Up Subsection -->\n                <div class=",
  ">\n                    <h3>Up Next</h3>\n                    <div class=",
  "Scream into the void... What devours your soul about Flicklet?",
  ";\n        \n        console.log(",
  "[HomeClean] Rendering all rails...",
  "[HomeClean] AppData available:",
  "[HomeClean] TV data:",
  "[HomeClean] Movies data:",
  "[HomeClean] Combined watching:",
  ", 3),\n            nextup: tvData.watching?.slice(0, 3) || this.generateMockData(",
  ", 3),\n            foryou: {\n                drama: moviesData.wishlist?.slice(0, 4) || this.generateMockData(",
  ", 4, ",
  "),\n                comedy: moviesData.wishlist?.slice(4, 8) || this.generateMockData(",
  "),\n                horror: moviesData.wishlist?.slice(8, 12) || this.generateMockData(",
  ")\n            },\n            theaters: moviesData.watching?.slice(0, 6) || this.generateMockData(",
  ", 6, ",
  ")\n        };\n        \n        console.log(",
  ");\n        \n        // Render CW rail\n        await this.renderRail(",
  ", realData.cw);\n        \n        // Render Next Up rail\n        await this.renderRail(",
  "[HomeClean] All rails rendered successfully",
  ") {\n        const baseData = {\n            id: Math.random().toString(36).substr(2, 9),\n            title: ",
  ",\n            meta: ",
  ",\n            blurb: ",
  ",\n            poster: null  // FIXED: Use null to trigger fallback SVG\n        };\n        \n        if (type === ",
  ") {\n            baseData.upNextLine = ",
  ";\n            delete baseData.blurb;  // No blurb for read-only\n        }\n        \n        if (type === ",
  ") {\n            baseData.meta = ",
  " #${i + 1}",
  ") {\n        const rail = this.container.querySelector(",
  ");\n        if (!rail) {\n            console.warn(",
  ");\n            return;\n        }\n        \n        console.log(",
  " (${genre})",
  "} in #${railId}",
  "[HomeClean] Skipped invalid card at index ${index} in ${railId}",
  "[HomeClean] Rendered ${data.length} cards in #${railId}",
  ":\n                    card = new window.CardCW(item);\n                    break;\n                case ",
  ":\n                    card = new window.CardNextUp(item);\n                    break;\n                case ",
  ":\n                    card = new window.CardForYou(item);\n                    break;\n                case ",
  "[HomeClean] Unknown card type: ${cardType}",
  "[HomeClean] Failed to create card instance for ${cardType}",
  "[HomeClean] Failed to render card element for ${cardType}",
  ");\n            \n            // Store card reference\n            this.cards.set(",
  ", card);\n            \n            return cardElement;\n            \n        } catch (error) {\n            console.error(",
  ", error);\n            return document.createElement(",
  "[HomeClean] Setting up event listeners...",
  "[HomeClean] Event listeners set up",
  "[HomeClean] Data ready event received, refreshing rails...",
  "[HomeClean] Cards changed event received, refreshing rails...",
  "[HomeClean] Item added event received, refreshing rails...",
  "[HomeClean] Item removed event received, refreshing rails...",
  "[HOLIDAY DEBUG] Setting up holiday chip monitoring...",
  "[HOLIDAY DEBUG] Holiday chip ADDED at ${new Date().toISOString()}:",
  "[HOLIDAY DEBUG] Holiday chip REMOVED at ${new Date().toISOString()}:",
  ") {\n                        // Holiday debug disabled\n                        // console.log(",
  "[HOLIDAY DEBUG] Found ${existingChips.length} existing holiday chips at ${new Date().toISOString()}",
  ";\n            \n            if (!isVisible) {\n                // Holiday debug disabled\n                // console.log(",
  "[HomeClean] Action clicked: ${action} for ${title}",
  "[HomeClean] Unknown action: ${action}",
  "[HomeClean] HolidayModal not initialized",
  "[HomeClean] Assigning holiday ${holiday} to card ${cardId}",
  ");\n        assignments[cardId] = holiday;\n        localStorage.setItem(",
  ");\n        if (card) {\n            let holidayChip = card.querySelector(",
  "Holiday: ${holiday}",
  "[HomeClean] Refreshing component...",
  "[HomeClean] Global refresh called",
  "[HomeClean] No instance available for global refresh",
  "[HomeClean] Moving ${title} to wishlist",
  "[HomeClean] No moveItem function available",
  "[HomeClean] Marking ${title} as watched",
  "[HomeClean] Dismissing ${title}",
  "[HomeClean] No removeItem function available",
  "[HomeClean] Deleting ${title}",
  "[HomeClean] Destroying component...",
  "[HomeClean] Constructor exported – ready for resurrection!",
  "[HomeClean] Starting mount process...",
  "[HomeClean] Component already mounted",
  "[HomeClean] Component mounted successfully",
  "[HomeClean] Failed to initialize component",
  "[HomeClean] Mount failed:",
  "[HomeClean] Starting destroy process...",
  "[HomeClean] Component destroyed successfully",
  "[HomeClean] Destroy failed:",
  "[HomeClean] All component files loaded",
  "[HomeClean] Failed to load component files:",
  ");\n        if (existingScript) {\n            console.log(",
  "[HomeClean] HomeClean component already available, skipping load",
  "[HomeClean] Loading script: ${src}",
  "[HomeClean] Successfully loaded: ${src}",
  "[HomeClean] Failed to load: ${src}",
  "Failed to load ${src}",
  "[HomeClean] Mock mode ${window.FLAGS.mockMode ? ",
  "[HomeClean] Entry point loaded",
  "🚀 Phase 5 Implementation Complete!",
  "\r\n📋 Phase 5 Deliverables:\r\n\r\n✅ 1. Updated HomeClean Component Structure:\r\n   - Changed container ID from ",
  " to ",
  "#clean-root .rail",
  ");\r\n\r\n// Auto-run validation if HomeClean is mounted\r\nif (window.homeCleanState?.isMounted) {\r\n    console.log(",
  "triviaTile not found, skipping trivia initialization",
  ".trivia-stats",
  "Required trivia elements missing:",
  "/.netlify/functions/trivia-proxy",
  ",\r\n      q: ",
  ",\r\n      choices: [",
  "Alien: Earth",
  "Star Trek",
  "The Expanse",
  "Martin Freeman",
  "David Tennant",
  "Matt Smith",
  "House of the Dragon",
  "Apple TV+",
  "The Mandalorian",
  "HBO Max",
  "Amazon Prime",
  "Breaking Bad",
  "Stranger Things",
  "The Duffer Brothers",
  "Shonda Rhimes",
  "David Fincher",
  "The Walking Dead",
  ") {\r\n    const langCode = lang === ",
  " ? ",
  ";\r\n    const cacheKey = ",
  ")[0];\r\n      const seed = utcDate.replace(/-/g, ",
  "${TRIVIA_API_BASE}?amount=5&category=14&difficulty=medium&type=multiple&encode=url3986&seed=${seed}",
  "Proxy error ",
  "Trivia API failed, using fallback:",
  "Unable to load trivia questions right now.",
  "[Trivia] fetch failed",
  ")[0];\r\n    const seed = utcDate.replace(/-/g, ",
  ")[0];\r\n    const dailyKey = ",
  ";\r\n    const currentCount = parseInt(localStorage.getItem(dailyKey) || ",
  ";\r\n    const dailyCount = parseInt(localStorage.getItem(dailyKey) || ",
  ");\r\n\r\n    // Simple counter in top left\r\n    const statsHTML = ",
  ");\r\n    safeSetTextContent(fEl, ",
  ");\r\n    safeSetHidden(nBtn, true);\r\n\r\n    q.choices.forEach((text, idx) => {\r\n      const li = document.createElement(",
  ");\r\n      li.setAttribute(",
  ");\r\n      li.className = ",
  ";\r\n    cEl.style.pointerEvents = ",
  ".choice-btn",
  "feedback-${isCorrect ? ",
  ";\r\n    fEl.style.display = ",
  ";\r\n    safeSetTextContent(\r\n      fEl,\r\n      isCorrect\r\n        ? ",
  "\r\n        : ",
  ")[0];\r\n      const dailyKey = ",
  ";\r\n      const dailyCount = parseInt(localStorage.getItem(dailyKey) || ",
  "Daily limit reached!",
  "\r\n          <div style=",
  ">\r\n            <p>You",
  "Pro users get 50 questions per day",
  "Upgrade to Pro for 50 questions per day",
  ",\r\n        );\r\n        safeSetTextContent(fEl, ",
  "Error loading trivia question:",
  "Error loading question. Please try again.",
  "Error initializing trivia:",
  "Daily Trivia",
  "Loading question...",
  "Next Question",
  "Firebase not loaded",
  "flicklet-71dff.firebaseapp.com",
  "flicklet-71dff.appspot.com",
  "[firebase-config] ready for projectId:",
  "[firebase-config] Firebase initialized successfully",
  "[Firestore] exists:",
  "[Firestore] test failed:",
  "[Firestore] Test function available: window._testFirestore(uid)",
  "[firebase-config] Firebase initialization failed:",
  "[firebase-config] Firebase SDK not loaded yet",
  "Flicklet v28.148.0 - TV & Movie Tracker",
  "Skip to main content",
  "Skip to search",
  "Skip to navigation",
  "Ready to discover your next favorite show?",
  "TV &amp; Movie Tracker",
  "v28.147.0",
  "Sign In",
  "Search",
  "Loading inspirational quote...",
  "Already Watched",
  "Search Results",
  "Your Shows",
  "Target FlickWord",
  "Win %",
  "Word Game",
  "Wordle-style daily word play",
  "Play Now",
  "Brain Daily Trivia",
  "Fresh question, new bragging rights",
  "For You",
  "💬 Share Your Thoughts",
  "Help us improve Flicklet with your feedback",
  "🐛 Report a Bug",
  "💡 Suggest a Feature",
  "💬 General Feedback",
  "📹 Submit Video",
  "Recommendations based on your likes and ratings.",
  "Manage your account and basic preferences",
  "Display Name",
  "Save",
  "Your name will appear in the header and personalize your experience",
  "My Statistics",
  "View your watching statistics and achievements",
  "Loading stats...",
  "Not Interested Management",
  "Manage shows and movies you've marked as not interested",
  "Manage Not Interested List",
  "Choose which types of notifications you'd like to receive",
  "Upcoming episode alerts",
  "Get notified when new episodes of shows you're watching are about to air",
  "Weekly discover picks",
  "Monthly stats digest",
  "Get a monthly summary of your watching statistics and achievements",
  "⭐ Pro Notifications",
  "Advanced notification features for Pro users",
  "🔔 Advanced Notifications (PRO)",
  "Enable advanced notifications",
  "Lead time (hours):",
  "Monitor lists:",
  "🔒 Pro feature - upgrade to unlock advanced notifications",
  "Layout Settings",
  "Customize how your lists and cards are displayed",
  "📋 Core Features",
  "Basic layout customization available to all users",
  "Condensed list view (more items per screen)",
  "Show more items per screen by reducing card spacing and padding",
  "Show movie/TV show posters",
  "Display poster images for each show and movie in your lists",
  "Theme Preference",
  "Dark Mode",
  "Click to switch between light and dark themes",
  "Home Page TV/Movie Lists",
  "Number of curated recommendation sections to show on the home page",
  "🎯 Customize Curated Row Genres",
  "Curated Row 1",
  "Curated Row 2",
  "Curated Row 3",
  "Reset to Smart Defaults",
  "Currently Watching Preview Limit",
  "Number of currently watching shows to display on the home page preview",
  "Movie Enable Episode Tracking",
  "• Track your progress through each season",
  "• Get notifications for new\n                        episodes",
  "• See detailed watching statistics",
  "⭐ Pro Layout Features",
  "Advanced layout and theming features for Pro users",
  "Art Theme Packs",
  "Dark Pro 🔒",
  "Neon Pro 🔒",
  "Minimal Pro 🔒",
  "🔒 Pro unlocks more themes",
  "Data Management",
  "Export, import, or reset your data",
  "Basic data management features available to all users",
  "Export JSON",
  "Download a complete backup of your lists and settings as a JSON file",
  "Import JSON",
  "Restore your data from a previously exported Flicklet backup file",
  "🚫 Not Interested List",
  "Manage items you don't want to see in recommendations",
  "Eye View Not Interested Items",
  "🗑️ Clear All",
  "Items you're not interested in:",
  "Items marked as \"Not Interested\" won't appear in your Discover recommendations",
  "Share Lists",
  "Generate a shareable text list of your TV shows and movies to send to friends",
  "Reset All Data",
  "⚠️ Permanently delete all your lists, settings, and data. This cannot be undone.",
  "⭐ Pro Data Features",
  "Advanced data management features for Pro users",
  "Export CSV (Pro)",
  "Export your data in CSV format for use in spreadsheets (Pro feature)",
  "Pro Features",
  "Unlock advanced features and premium content with Flicklet Pro",
  "Preview Pro Features",
  "Toggle Pro features on/off to see what's available without purchasing",
  "Extra Trivia (Pro)",
  "Access additional trivia questions and behind-the-scenes content (Pro feature)",
  "Pro Features Include:",
  "Advanced features and premium content available with Flicklet Pro subscription",
  "🏠 About Unique4U",
  "👥 About the Creators",
  "📱 About the App",
  "Data Attribution:",
  "This product uses the TMDB API but is not\n                  endorsed or certified by TMDB.",
  "So we made this instead:",
  "Stupidly easy.",
  "Open it, add your show, done.",
  "Always free at the core.",
  "No paywalls for the basics.",
  "Friend-proof sharing.",
  "Copy your list and drop it in a text when\n                    someone asks, \"What should I watch?\"",
  "Share Your Thoughts",
  "Don't fill this out if you're human:",
  "Your Message",
  "Share It!",
  "Cancel",
  "Reset to Defaults",
  "Share Selected Items",
  "Select Everything",
  "Select what to share",
  "📋 Copy",
  "🎯 FlickWord",
  "🧠 Daily Trivia",
  "Use\n              system",
  "Light (default)",
  "Mardi Gras overlay",
  "[card-actions] Unknown action",
  "[card-actions] Failed",
  "Failed to update list",
  "✅ Card actions loaded",
  "Unknown action handler: ${name}",
  "[actions] Moving to wishlist:",
  "[actions] Calling window.moveItem with:",
  "[actions] Calling window.addToListFromCache with:",
  "[actions] No move function available, using fallback",
  "[actions] Moving to watching:",
  "[actions] Debug - window.moveItem available:",
  "[actions] Debug - window.addToListFromCache available:",
  "[actions] Debug - fallbackMoveItem available:",
  "[actions] Calling fallbackMoveItem with:",
  "re sure the main system isn",
  "[actions] WatchlistsAdapter is available but moveItem is not - this might be a timing issue",
  "[actions] Retrying with window.moveItem after delay",
  "[actions] Still no moveItem after delay, using fallback",
  "[actions] WatchlistsAdapter not available, using fallback",
  "[actions] Undoing to wishlist:",
  "[actions] Marking not interested:",
  "[actions] Adding to wishlist:",
  "[actions] Calling addToListFromCache for:",
  "[actions] addToListFromCache completed",
  "[actions] addToListFromCache function not available, polling for availability...",
  "[actions] Function available after ${attempts} attempts, calling addToListFromCache for:",
  "[actions] Attempt ${attempts}/${maxAttempts}, retrying in ${delay}ms...",
  "[actions] addToListFromCache still not available after",
  "[actions] Marking as watched:",
  "[actions] moveItem function not available, polling for availability...",
  "[actions] Function available after ${attempts} attempts, calling moveItem for:",
  "[actions] moveItem still not available after",
  "[actions] Opening details:",
  "[actions] Exporting item:",
  "Exporting ${item.title}...",
  "[actions] Sharing item:",
  "Sharing ${item.title}...",
  "[actions] Recommending item:",
  "Recommending ${item.title} to a friend...",
  "[actions] Opening episode modal:",
  "[actions] Opening Smart Notifications for:",
  "🔔 Smart Notifications for ",
  "\\n\\nSet custom lead times for new episodes and choose which lists to monitor.",
  "[actions] Opening Viewing Journey for:",
  "📊 Viewing Journey for ",
  ",\r\n  );\r\n}\r\n\r\nfunction openAdvancedCustomization(item) {\r\n  console.log(",
  "🎨 Advanced Customization for ",
  "\\n\\nUnlock premium color schemes, custom accent colors, and advanced layout options.",
  "[actions] Opening Extra Trivia for:",
  "🧠 Extra Trivia for ",
  "\\n\\nAccess additional trivia questions and behind-the-scenes content.",
  "[actions] Opening Pro Preview for:",
  "⭐ Pro Preview for ",
  "\\n\\nToggle Pro features on/off to see what",
  "Delete item",
  "Remove ",
  "this title",
  " from your lists?",
  "Delete ",
  "? This cannot be undone.",
  "[delete] Debug - removeItemFromCurrentList available:",
  "[delete] Debug - window.removeItemFromCurrentList:",
  "[delete] Removing item:",
  "🔄 [delete] Syncing deletion to Firebase...",
  "🔄 [delete] Invalidating WatchlistsAdapter cache...",
  "[delete] removeItemFromCurrentList not available, trying fallback...",
  "[delete] Using fallback removal from appData",
  "[delete] Removed from ${mediaType}.${list}",
  "[delete] No remover wired for",
  "t loaded yet\r\nfunction fallbackMoveItem(itemId, destinationList) {\r\n  console.log(",
  ", itemId, ",
  ", destinationList);\r\n  console.log(",
  ", window.appData);\r\n\r\n  // Don",
  "[actions] No appData available for fallback move",
  "[actions] Item not found for fallback move:",
  "[actions] Available items in appData:",
  "[actions] Item already in target list:",
  "[actions] Source array is not valid:",
  "[actions] Removed item from source list:",
  "[actions] Added item to destination list:",
  "🔄 [actions] Syncing fallback move to Firebase...",
  "🔄 [actions] Invalidating WatchlistsAdapter cache...",
  "[actions] Fallback move completed:",
  ";\n\n  function resolvePosterUrl(poster_path) {\n    if (!poster_path || poster_path.trim() === ",
  ") return PLACEHOLDER_SVG;\n    if (poster_path.startsWith(",
  ") || poster_path.startsWith(",
  ")) return poster_path;\n    if (poster_path.startsWith(",
  ")) return ",
  ");\n    const mediaType = raw.media_type || raw.mediaType || raw.type || (raw.first_air_date ? ",
  ") || ",
  ";\n    const title = raw.title || raw.name || raw.original_title || raw.original_name || ",
  ";\n    const overview = raw.overview || ",
  ";\n    \n    // Normalize additional fields to remove ",
  " values\n    // Extract genres - prefer first genre, but handle multiple\n    let genre = raw.genre || ",
  ");\n    }\n    const seasonEpisode = raw.seasonEpisode || raw.sxxExx || ",
  ";\n    const nextAirDate = raw.next_episode_air_date || raw.nextAirDate || raw.next_air_date || ",
  ";\n    const runtime = raw.runtime || raw.episode_run_time || ",
  ";\n    const whereToWatch = raw.whereToWatch || raw.provider || ",
  ";\n    const curatorBlurb = raw.curatorBlurb || raw.description || ",
  ";\n    const userRating = raw.userRating || raw.rating || 0;\n    const progress = raw.progress || ",
  "✅ Card data adapter loaded",
  "[marquee] using fallback quotes:",
  ",\r\n          ",
  "[FIX] Legacy disabled",
  ",\n    alias: ",
  ",\n    avatarUrl: ",
  ",\n    email: ",
  "t override it\n        if (window.__USERNAME_JUST_SAVED__) {\n          console.log(",
  ";\n          this.email = user.email || ",
  ")[0] || ",
  ";\n          this.alias = settingsDisplayName || user.displayName || user.email?.split(",
  ";\n          this.avatarUrl = user.photoURL || ",
  ";\n          \n          console.log(",
  ", this.displayName, ",
  ", !!settingsDisplayName);\n        }\n      } else {\n        this.displayName = ",
  ";\n        this.alias = ",
  ";\n        this.avatarUrl = ",
  ";\n        this.email = ",
  "👤 ${this.displayName}",
  "Signed in as ${this.email}. Click to sign out.",
  "Click to sign in",
  "${this.alias}, your couch has a permanent dent",
  "${this.alias}, ready to binge?",
  "${this.alias}, what",
  ",\n          ",
  ";\n      }\n\n      // Update settings access\n      const settingsElements = document.querySelectorAll(",
  ");\n      settingsElements.forEach((el) => {\n        if (this.isAuthenticated) {\n          el.style.display = ",
  ";\n          el.removeAttribute(",
  ");\n        } else {\n          el.style.display = ",
  ";\n          el.setAttribute(",
  "[app] Refreshing tab discovery after auth state change...",
  "🚀 [FlickletApp] init",
  "🔢 Emitted cards:changed event during initialization",
  "✅ [FlickletApp] ready",
  "💥 [FlickletApp] init failed:",
  "[FlickletApp] Data init timeout, proceeding anyway",
  ";\n      try {\n        if (typeof applyTranslations === ",
  ") {\n          applyTranslations(lang);\n        }\n      } catch (e) {\n        FlickletDebug.warn(",
  "initFirebase skipped (SDK not present)",
  "⚠️ Firebase already initialized, skipping",
  "🔥 Initializing Firebase...",
  "✅ Firebase available, setting up auth listener",
  "❌ Firebase initialization timeout after 8 seconds",
  "Firebase initialization timeout",
  "Firebase initialization failed",
  "🔄 Setting up fallback authentication system",
  "🔒 ${t(",
  ";\n        accountBtn.title =\n          t(",
  ";\n      }\n\n      // Show a notification about offline mode\n      this.showNotification(\n        t(",
  ",\n        ",
  ",\n      );\n    },\n\n    setupAuthListener() {\n      try {\n        console.log(",
  "👤 Current user on init:",
  "User: ${user.email}",
  "No user",
  "❌ Auth listener setup failed:",
  "👤 Sign Out",
  "Signed in as ${emailOrName}",
  "Signed in",
  "👤 Sign In",
  "Sign in",
  "font-size:12px;opacity:.8;margin-top:2px;",
  "Sign out",
  ";\n          hint.style.display = show ? ",
  ") return;\n          sessionStorage.setItem(",
  ");\n\n          const wrap = document.createElement(",
  ");\n          wrap.innerHTML = ",
  "position:fixed;inset:0;display:grid;place-items:center;background:rgba(0,0,0,.35);z-index:9999",
  "background:#fff;padding:16px 20px;border-radius:10px;max-width:420px;width:92%;box-shadow:0 10px 30px rgba(0,0,0,.2)",
  "margin:0 0 8px 0;",
  "margin:0 0 14px 0;",
  "btn btn--sm",
  ";\n          document.body.appendChild(wrap);\n          document.getElementById(",
  ")?.addEventListener(",
  ", () => wrap.remove());\n          document.getElementById(",
  "\n              <div id=",
  ">\n                <div style=",
  ">\n                  <h3 style=",
  ">what should we call you?</h3>\n                  <input id=",
  " value=",
  " />\n                  <div style=",
  ">\n                    <button id=",
  " type=",
  " data-action=",
  ">Skip</button>\n                    <button id=",
  ">Save</button>\n                  </div>\n                </div>\n              </div>",
  "Firestore not available",
  "margin:8px 0;font-weight:600;",
  "#header-left, header .left, body",
  "${name}<div style=",
  ">I have a PhD in binge-watching.</div>",
  "[auth] username flow failed",
  "[auth] Firebase not available",
  "[auth] Sign-in failed",
  "[auth] Sign-out failed",
  "[app] processUserSignIn already in progress, skipping duplicate call",
  "✅ User signed in, processing...",
  ".modal-backdrop[data-modal=",
  "🔄 Creating user database entry...",
  ",\n                  displayName: user.displayName || ",
  ",\n                  photoURL: user.photoURL || ",
  "✅ User database entry created successfully",
  "❌ Failed to create user database entry:",
  "🔄 Loading user data from Firebase cloud storage...",
  "✅ User data loaded from cloud successfully",
  "already in list",
  "🔄 Refreshing UI after cloud data load...",
  "🔢 Emitted cards:changed event after cloud data load...",
  "🔄 Refreshing current tab content:",
  "⚠️ DataInit.trySync function not available - user data not loaded from cloud",
  "❌ Failed to load user data from cloud:",
  "🔍 User signed in, Firebase user data:",
  "🔍 Setting account button label with Firebase displayName:",
  "s using the latest Firebase data\n        setTimeout(() => {\n          console.log(",
  "✅ Loaded existing username into appData:",
  "🔍 Username check:",
  "🔧 Prompting for username...",
  "🔧 Username prompt result:",
  "✅ Username saved:",
  "✅ Username prompt marked as completed (skipped)",
  "🔍 Username already exists or was prompted:",
  "❌ Error in user sign-in processing:",
  "❌ Error in processUserSignIn:",
  "🧹 FlickletApp.clearUserData called",
  "🧹 localStorage cleared",
  "🧹 Failed to clear localStorage:",
  ",\n          displayName: ",
  ",\n          lang: ",
  ",\n          theme: ",
  "🧹 appData reset to empty state",
  "Welcome back!",
  ";\n        headerGreeting.textContent = ",
  ";\n      }\n\n      // Clear any duplicate cards\n      if (typeof window.cleanupDuplicateCards === ",
  ") {\n        window.cleanupDuplicateCards();\n      }\n\n      // Trigger UI refresh\n      if (typeof window.updateUI === ",
  ") {\n        window.updateUI();\n      }\n\n      console.log(",
  "ensureUser function not available",
  "🔥 Reading from Firestore:",
  "✅ Firestore read successful:",
  ", createdAt: Date.now() };\n          await ref.set(defaults, { merge: true });\n          console.log(",
  ", defaults);\n          return defaults;\n        }\n      } catch (error) {\n        console.error(",
  "🔥 Writing to Firestore:",
  "✅ Firestore write successful",
  "❌ Firestore write failed:",
  "❌ [FlickletApp] handlePostAuthSuccess failed:",
  "✅ User doc updated in Firestore",
  "❌ Failed to update user doc:",
  "[CloudLoad] Hydrated from Firestore. Bytes:",
  "[CloudLoad] Failed:",
  "[SeedCloud] payload too large, aborting seed:",
  ",\n          );\n          return false;\n        }\n\n        await db.doc(",
  ").set(payload, { merge: true });\n        console.info(\n          ",
  ",\n          (bytes / 1024).toFixed(1),\n          ",
  ",\n        );\n        return true;\n      } catch (error) {\n        console.error(",
  "🔄 Merging cloud watchlists data:",
  "✅ Cloud data merged with local",
  "❌ Failed to load/merge cloud data:",
  "[identity] username:missing → prompt",
  "❌ Failed to handle user identity:",
  ").trim();\n        if (username) {\n          console.info(",
  ");\n        }\n        return username;\n      } catch (error) {\n        console.error(",
  "[identity] username:saved=${trimmedUsername}",
  "❌ Failed to set username:",
  "[identity] snark:render=${snarkText}",
  ",\n      );\n      existingModals.forEach((modal) => {\n        console.log(",
  ");\n        modal.remove();\n      });\n    },\n\n    async promptForUsernameOnce(suggest = ",
  ") {\n      // Check if username modal is already open\n      if (document.querySelector(",
  "⚠️ Username modal already in progress, waiting for existing promise",
  "🔧 Creating username modal...",
  "What do I call you?",
  "\n          <div style=",
  ">\n            <p style=",
  ">Choose a name to personalize your experience</p>\n            <input id=",
  " autocomplete=",
  " placeholder=",
  "]/g, (m) => ({ ",
  ">\n            <div style=",
  ">\n              <button id=",
  ">Skip</button>\n              <button id=",
  ">Save</button>\n            </div>\n          </div>\n        ",
  "s distinct from login modal\n        const wrap = document.querySelector(",
  ");\n        if (wrap) {\n          wrap.setAttribute(",
  "🔧 Modal backdrop clicked, closing",
  "🔧 Username modal already closed, ignoring duplicate call",
  "🔧 Username modal closing with value:",
  "uSave",
  "uCancel",
  "🔧 Setting up username modal buttons:",
  "🔧 Cancel button clicked",
  ";\n              console.log(",
  ", value);\n\n              // Validate input\n              if (value.length < 1) {\n                console.log(",
  ");\n                const errorEl = document.querySelector(",
  ");\n                if (errorEl) {\n                  errorEl.textContent = ",
  "🔧 Username too long, showing error",
  "Name must be 50 characters or less",
  "🔧 Username validated, closing modal",
  "🔧 Save button event listener attached",
  "❌ Save button not found!",
  ";\n                console.log(",
  ");\n          if (backdrop) {\n            backdrop.addEventListener(",
  ", (e) => {\n              if (e.target === backdrop) {\n                console.log(",
  "🔍 Using Firebase displayName:",
  "🔍 Using passed displayName:",
  "🔍 Using email prefix:",
  "👤 ${finalName}",
  ")} ${email}. ${t(",
  ";\n        console.log(",
  "${username}, try not to binge 12 seasons tonight",
  "${username}, your watchlist is judging you",
  "${username}, remember to eat between episodes",
  "${username}, sleep is also important",
  "${username}, your couch has a permanent dent",
  "🔧 openModal called:",
  ")\n      ) {\n        console.log(",
  ");\n        return null;\n      }\n\n      const wrap = document.createElement(",
  ");\n      wrap.className = ",
  ";\n      wrap.setAttribute(",
  "auth-modal-${Date.now()}",
  ";\n\n      // Don",
  "\n        <div class=",
  " aria-labelledby=",
  " data-testid=",
  " data-modal-body tabindex=",
  ">\n          <h3 id=",
  ">${title}</h3>\n          <div class=",
  ">${html}</div>\n          <div data-auth-msg aria-live=",
  "></div>\n          ${\n            showDefaultClose\n              ? ",
  "pointer-events: auto;",
  "btn secondary",
  ">Close</button>\n          </div>\n          ",
  "\n          }\n        </div>\n      ",
  "🔧 closeModal called",
  "🔧 Removing modal:",
  "🔧 Modal closed",
  "🔄 Running Firebase document migration...",
  "📄 No document to migrate",
  ") {\n          updates[",
  "✅ Migration completed",
  "✅ No migration needed",
  "❌ Migration failed:",
  "🧹 Running cleanup for stray field...",
  "📄 No document to clean up",
  "✅ Cleanup completed",
  "✅ No cleanup needed",
  "❌ Cleanup failed:",
  "🔔 ${type.toUpperCase()}: ${message}",
  "\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: ${type === ",
  " : type === ",
  "👤 <span data-i18n=",
  "🔍 updateAccountButton using Firebase displayName:",
  "🔍 updateAccountButton using email prefix:",
  ";\n      if (accountHint) accountHint.textContent = t(",
  "updateTabContent function not available",
  ".tab-section",
  ");\n      allTabs.forEach(tab => {\n        tab.setAttribute(",
  ");\n      if (homeTab) {\n        homeTab.setAttribute(",
  "🔄 LEGACY: Switching to tab: ${tab}",
  "🔍 Search state check:",
  "🧹 Clearing search due to tab switch to:",
  "🔍 Search not active, no clearing needed",
  "⚠️ Error checking search state:",
  "⚠️ SearchModule not available for search clearing",
  ");\n            }\n          }\n        } catch (error) {\n          console.warn(",
  "⚠️ Error getting search state for tab visibility:",
  "🔍 Search mode - showing tab: ${name}Tab",
  ");\n            console.log(",
  ");\n          } else {\n            // Show other tabs without active styling\n            btn.classList.remove(",
  ");\n            btn.classList.remove(",
  "); // Remove old active class\n            btn.setAttribute(",
  "t override with inline styles\n          console.log(",
  ");\n        } else {\n          console.error(",
  "✅ ${result.sectionId} visibility: ${tab === ",
  "⚠️ Failed to update visibility for: ${result.sectionId}",
  "✅ ${sectionId} visibility: ${tab === ",
  "⚠️ Home section not found: ${sectionId}",
  "t manage home sections\n          console.log(",
  ".top-search",
  "🔍 Search bar hidden for",
  ";\n          console.log(",
  ", tab, ",
  ");\n        }\n      }\n\n      // Load content for this tab first\n      if (typeof updateTabContent === ",
  "⚠️ ThemeManager not available",
  ";\n        }\n      }\n\n      console.log(",
  ");\n      this.showNotification(",
  "🎭 toggleMardiGras called",
  "🎭 Current Mardi Gras state:",
  ";\n      console.log(",
  "🎭 Body data-mardi attribute:",
  "🎭 Body classes:",
  "🎭 Mardi Gras FAB element:",
  "🎭 Mardi Gras FAB icon element:",
  ", icon.textContent);\n        }\n      }\n\n      console.log(",
  ");\n      this.showNotification(\n        ",
  ";\n        }\n      }\n\n      // Set Mardi Gras toggle icon\n      const mardiFab = document.getElementById(",
  ");\n      if (mardiFab) {\n        const icon = mardiFab.querySelector(",
  ") {\n            e.preventDefault();\n            document.getElementById(",
  ")?.focus();\n          } else if (e.key === ",
  ".overflow",
  ".overflow[aria-expanded=",
  ").forEach(o => \n          o.setAttribute(",
  ".media-card",
  "[App] Button clicked:",
  "🔐 Sign-in button clicked",
  "❌ showSignInModal not available",
  "🎯 FlickWord button clicked",
  "❌ openFlickWordModal function not available",
  "🧠 Trivia button clicked",
  "❌ openTriviaModal function not available",
  ", action);\n        }\n      });\n\n      // FAB Event Handlers\n      document.addEventListener(",
  ", (e) => {\n        // Settings FAB\n        if (e.target.closest(",
  ")) {\n          e.preventDefault();\n          e.stopPropagation();\n          console.log(",
  ");\n          console.log(",
  ", !!window.navEngine);\n          console.log(",
  ", typeof window.navEngine?.activate);\n          this.switchToTab(",
  ");\n        }\n\n        // Theme Toggle FAB\n        if (e.target.closest(",
  ");\n          this.toggleTheme();\n        }\n\n        // Mardi Gras Toggle FAB\n        if (e.target.closest(",
  "🔐 showSignInModal called - using FlickletAuth",
  "🔒 Offline mode active, not showing sign-in modal",
  "Authentication is currently unavailable. Your data is stored locally and will sync when Firebase is available.",
  "✅ openModal now available, creating sign-in modal",
  "❌ openModal function not available after timeout",
  "Sign-in system is not ready. Please refresh the page.",
  "openModal function not available",
  "🔐 Creating sign-in modal...",
  "\n            <p style=",
  ")}</p>\n            <div style=",
  ">🔒 Google</button>\n              <button id=",
  ">🍎 Apple</button>\n              <button id=",
  ">✉️ Email</button>\n            </div>\n          ",
  "❌ FlickletAuth.loginWithGoogle not available",
  "❌ FlickletAuth.loginWithApple not available",
  "❌ FlickletAuth.loginWithEmail not available",
  "❌ Error creating sign-in modal:",
  "🚪 showSignOutModal called, currentUser:",
  "❌ No current user, cannot show sign out modal",
  ")[0] || t(",
  ");\n\n      const confirmed = confirm(\n        ",
  ",\n      );\n      if (confirmed) {\n        console.log(",
  ");\n        // Call the new sign out method\n        this.signOut();\n      } else {\n        console.log(",
  ");\n      }\n    },\n\n    signOut() {\n      if (typeof firebase !== ",
  "✅ User signed out successfully",
  "❌ Sign out failed:",
  "❌ Firebase auth not available for sign out",
  "[FlickletApp] Games containers not found, skipping games initialization",
  "[FlickletApp] flickwordTile not found",
  "[FlickletApp] triviaTile not found",
  "🎯 Initializing FlickWord modal...",
  "✅ FlickWord modal initialized successfully",
  "⚠️ initializeFlickWordModal function not found in module",
  "❌ Failed to load FlickWord modal module:",
  "❌ Error initializing FlickWord modal:",
  "🧠 Initializing Trivia modal...",
  "✅ Trivia modal initialized successfully",
  "⚠️ initializeTriviaModal function not found in module",
  "❌ Failed to load Trivia modal module:",
  "❌ Error initializing Trivia modal:",
  "🎬 Initializing genres...",
  "✅ loadGenres function found, calling it",
  "❌ loadGenres function not available",
  "✅ Genres initialization complete",
  "🔍 Account button debug info:",
  "🧪 Testing sign-in modal...",
  "✅ Sign-in modal test successful",
  "❌ Sign-in modal test failed:",
  "🔍 Authentication system debug info:",
  "🌐 FlickletApp.changeLanguage delegating to LanguageManager:",
  "🌐 LanguageManager not available, falling back to window.changeLanguage",
  "💾 FlickletApp.saveData: Starting lean save to Firebase",
  "[saveData] payload too large, skipping Firestore save:",
  ",\n          );\n          // Still try to save locally with lean data\n          window.saveAppData(",
  ", minimal);\n          return;\n        }\n\n        // Save to Firestore\n        await db.doc(",
  ").set(payload, { merge: true });\n        console.info(",
  ", (bytes / 1024).toFixed(1), ",
  ");\n\n        // Mirror to LocalStorage (guarded)\n        window.saveAppData(",
  ", payload);\n\n        FlickletDebug.info(\n          ",
  ",\n        );\n      } catch (error) {\n        FlickletDebug.error(",
  "💾 Fallback: Lean data saved to localStorage only",
  "❌ Even localStorage save failed:",
  "🔍 FlickletApp search state changed:",
  ".tab-container",
  "🔍 Tab container made visible during search",
  ".fab, .fab-left",
  ".tab-section:not([hidden])",
  ":scope > .fab-dock",
  ".fab-left",
  ".fab-stack",
  "t in a stack\n        const individualFabs = Array.from(document.querySelectorAll(",
  ")).filter(\n          (btn) => !btn.closest(",
  "t exist\n          let individualStack = dock.querySelector(",
  ");\n          if (!individualStack) {\n            individualStack = document.createElement(",
  ");\n            individualStack.className = ",
  "[data-tab], .tab, .tab-link",
  ".settings-tabs button[data-target]",
  "Settings tab clicked:",
  "🚀 DOMContentLoaded - initializing FlickletApp",
  "❌ FlickletApp initialization failed:",
  ";\n      input.value = currentName;\n      console.log(",
  "📊 Data ready event received:",
  "✅ UserViewModel refreshed with settings data",
  "[ensureUser] Waiting for Firebase...",
  "No authenticated user",
  ";\n\n      // Create dialog box\n      const dialog = document.createElement(",
  "Segoe UI",
  ";\n\n      dialog.innerHTML = ",
  "margin: 0 0 20px 0; font-size: 16px; line-height: 1.4;",
  "display: flex; gap: 12px; justify-content: center;",
  ">Yes</button>\n          <button id=",
  ">No</button>\n        </div>\n      ",
  "Display name input not found",
  "Display name is empty",
  "This will change your username from ",
  ". Are you sure you want to continue?",
  "Username change cancelled by user",
  "🔄 Starting display name save process for:",
  "📝 Created new appData object",
  "📝 Created new appData.settings object",
  "✅ Updated appData.settings:",
  "✅ Display name saved to SettingsManager:",
  "⚠️ SettingsManager not available or set method missing",
  "✅ Data saved via saveAppData function",
  "✅ Data saved to localStorage directly",
  "❌ Failed to save to localStorage:",
  "Failed to save to localStorage: ",
  "✅ Username saved to Firebase via setUsername:",
  "❌ setUsername returned false",
  "setUsername method returned false",
  "❌ Failed to save username to Firebase:",
  "t continue if Firebase save fails - this is critical\n          throw new Error(",
  "✅ Updated currentUser.displayName:",
  "✅ UserViewModel.updateDisplayName called",
  "⚠️ UserViewModel not available or updateDisplayName method missing",
  "✅ UserViewModel.update called with currentUser",
  "❌ Failed to update UI:",
  "t throw here - data is saved, just UI update failed\n      }\n\n      console.log(",
  ", newName);\n\n      // Show success feedback\n      const btn = document.getElementById(",
  ");\n      if (btn) {\n        const originalText = btn.innerHTML;\n        btn.innerHTML = ",
  ";\n        btn.style.background = ",
  ";\n        setTimeout(() => {\n          btn.innerHTML = originalText;\n          btn.style.background = ",
  ";\n        }, 2000);\n      }\n    } catch (error) {\n      console.error(",
  ", error);\n      const errorMessage = error.message || ",
  ";\n      alert(",
  ");\n      \n      // Show error feedback\n      const btn = document.getElementById(",
  "DOM not ready, deferring back-to-top initialization",
  ";\n      backToTopBtn.setAttribute(",
  "Back to top",
  "Back-to-top functionality initialized",
  "[app] initBackToTop failed:",
  "[auth] apply:init",
  "[auth] apply:redirect:skip (no-flag)",
  "[auth] handleRedirectResult(): ERROR",
  "✅ Auth Manager ready",
  "[auth] AuthManager ready (top):",
  "⏳ Firebase not ready, waiting...",
  "[auth] Auth listener already registered, skipping",
  "🔥 Setting up CENTRALIZED Firebase auth listener",
  "[auth] apply:single-listener:attached",
  "🔥 [CENTRALIZED] Auth state changed:",
  "👤 User signed in:",
  "👋 User signed out",
  "🔍 Auth listeners active = 1",
  "Account: ${displayName}",
  "Sign in to your account",
  "Signed in as ${displayName}",
  "Not signed in",
  "${provider}-${method || ",
  "}-${Date.now()}",
  "[auth] ${provider} login already in progress, ignoring duplicate request",
  "🔐 Starting ${provider} login${method ? ",
  "} [${requestId}]",
  "[auth] Apple login coerced from popup to redirect",
  "Unknown provider: ${provider}",
  "❌ ${provider} login failed:",
  "Sign-in failed. Please try again.",
  "Firebase not available",
  "[auth] startGoogleLogin(): Firebase methods available:",
  "[auth] Mobile detection:",
  "[auth] apply:provider:start google ${method}",
  "[auth] signInWithPopup not available, falling back to redirect",
  "[auth] unsupported login method for provider",
  "[auth] Popup error:",
  "window.closed",
  "🔄 Popup blocked or COOP error, falling back to redirect",
  "[auth] Unexpected popup error:",
  "[auth] apply:redirect:flag:set google",
  "No redirect method available",
  "[auth] apply:provider:start apple redirect",
  ",\r\n        );\r\n      }\r\n\r\n      // mark that we expect a redirect result\r\n      sessionStorage.setItem(\r\n        ",
  ",\r\n        JSON.stringify({ provider: ",
  ", ts: Date.now() }),\r\n      );\r\n\r\n      const provider = new firebase.auth.OAuthProvider(",
  ");\r\n      provider.addScope(",
  "[auth] apple redirect error:",
  "[auth] apply:provider:start email form",
  "✅ ${provider} login successful:",
  "Signed in with ${provider}",
  "🔄 [CENTRALIZED] Starting post-login data loading...",
  "☁️ Cloud sync enabled for user:",
  "🔍 [CENTRALIZED] Available functions:",
  "🔄 [CENTRALIZED] Attempting cloud sync with DataInit...",
  "✅ [CENTRALIZED] DataInit.trySync completed",
  "🔄 [CENTRALIZED] Attempting cloud sync with legacy trySync...",
  "✅ [CENTRALIZED] Legacy trySync completed",
  "🔄 [CENTRALIZED] Loading data directly from Firebase...",
  "✅ [CENTRALIZED] Direct Firebase load completed",
  "🔄 [CENTRALIZED] Calling FlickletApp.handlePostAuthSuccess for username logic...",
  "✅ [CENTRALIZED] FlickletApp.handlePostAuthSuccess completed",
  "⚠️ [CENTRALIZED] FlickletApp.handlePostAuthSuccess not available - username logic may not work",
  "🔍 [CENTRALIZED] Data after loading:",
  "🔄 [CENTRALIZED] Triggering UI refresh after auth change",
  "✅ [CENTRALIZED] UI refresh triggered",
  "❌ [CENTRALIZED] Post-login data loading failed:",
  "❌ [CENTRALIZED] Error stack:",
  "❌ ${provider} login error:",
  "[auth] showEmailModal(): ENTER",
  "auth-modal-backdrop email-modal-backdrop",
  "\r\n        <div class=",
  ">\r\n          <h2 id=",
  ">Sign in with Email</h2>\r\n          <form id=",
  ">\r\n            <div class=",
  ">\r\n              <label for=",
  ">Email</label>\r\n              <input type=",
  " required>\r\n            </div>\r\n            <div class=",
  ">Password</label>\r\n              <input type=",
  " required>\r\n            </div>\r\n            <div id=",
  ">\r\n              <button type=",
  ">Cancel</button>\r\n              <button type=",
  ">Sign In</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      ",
  "[auth] Email form submitted",
  "[auth] closeEmailModal(): ENTER",
  ";\r\n        console.log(",
  ");\r\n      } else {\r\n        console.log(",
  "[auth] handleEmailSubmit: starting email authentication",
  "[auth] Email form data:",
  "Signing in...",
  "Email and password are required",
  ")) {\r\n          throw new Error(",
  ");\r\n        }\r\n\r\n        if (password.length < 6) {\r\n          throw new Error(",
  ");\r\n        }\r\n\r\n        console.log(",
  ");\r\n        const result = await window.firebaseAuth.signInWithEmailAndPassword(email, password);\r\n        console.log(",
  ", result.user?.email);\r\n        this.handleLoginSuccess(result.user, ",
  ");\r\n      } catch (error) {\r\n        console.error(",
  ", error);\r\n        errorEl.textContent = error.message || ",
  ";\r\n        errorEl.style.display = ",
  ";\r\n      } finally {\r\n        submitBtn.disabled = false;\r\n        submitBtn.textContent = ",
  ";\r\n        accountLabel.textContent = displayName;\r\n        accountBtn.title = ",
  ";\r\n\r\n        // Set context instruction\r\n        if (accountContext) {\r\n          accountContext.textContent = ",
  ";\r\n        }\r\n\r\n        console.info(",
  ";\r\n\r\n      // Create modal using the same pattern as auth modal\r\n      let modal = document.getElementById(",
  ");\r\n      if (!modal) {\r\n        modal = document.createElement(",
  ");\r\n        modal.id = ",
  ";\r\n        modal.className = ",
  ";\r\n        modal.setAttribute(",
  ">Sign out confirmation</h2>\r\n          <p>You",
  "auth-button auth-button--danger",
  "auth-button auth-button--cancel",
  ";\r\n      };\r\n\r\n      if (confirmBtn) {\r\n        confirmBtn.addEventListener(",
  ", () => {\r\n          console.log(",
  "[auth] User cancelled sign out",
  "button, [href], input, select, textarea, [tabindex]:not([tabindex=",
  "✅ Signed out successfully",
  "Sign out failed. Please try again.",
  "🧹 Starting sign out process...",
  "accounts.google.com",
  "google.com",
  "🔍 [CENTRALIZED] Checking redirect status:",
  "⏳ [CENTRALIZED] Auth state change during redirect - waiting for redirect result",
  "🧹 [CENTRALIZED] Closing auth modal on sign out",
  "🧹 [CENTRALIZED] User signed out - clearing local data",
  "🔄 [AUTHMANAGER] Loading user data from Firebase for:",
  "ℹ️ [AUTHMANAGER] No user document found in Firebase",
  "✅ [AUTHMANAGER] User data loaded from Firebase:",
  "✅ [AUTHMANAGER] Updated watchlists from Firebase",
  "✅ [AUTHMANAGER] Updated direct TV data from Firebase:",
  "✅ [AUTHMANAGER] Updated direct movies data from Firebase:",
  "✅ [AUTHMANAGER] Updated settings from Firebase",
  "✅ [AUTHMANAGER] Saved data to localStorage",
  "✅ [AUTHMANAGER] Cleared WatchlistsAdapter cache",
  "✅ [AUTHMANAGER] Data loading completed successfully",
  "❌ [AUTHMANAGER] Failed to load user data from Firebase:",
  "🧹 Calling clearUserData function...",
  "🧹 Using data-init clearUserData...",
  "🧹 Calling FlickletApp.clearUserData...",
  ";\r\n        window.appData.settings.displayName = ",
  ");\r\n      }\r\n\r\n      // Clear localStorage\r\n      try {\r\n        localStorage.removeItem(",
  ");\r\n        console.log(",
  ");\r\n      } catch (e) {\r\n        console.warn(",
  "🧹 [AUTHMANAGER] Cleared WatchlistsAdapter cache",
  ".list-container",
  ">Nothing here yet.</div>",
  "🧹 [AUTHMANAGER] Cleared rendered cards",
  "🧹 [AUTHMANAGER] Emitted cards:changed event after clear",
  "✅ Sign out process completed",
  "[auth] AuthModalManager.open()",
  "re open but element isn",
  "[auth] AuthModalManager: self-healing - resetting state",
  "[auth] AuthModalManager: already open, skipping",
  "[auth] AuthModalManager: failed to create modal element",
  "[auth] AuthModalManager: modal opened successfully",
  "[auth] AuthModalManager.close()",
  "[auth] AuthModalManager: not open, nothing to close",
  "[auth] AuthModalManager: modal closed successfully",
  "\r\n          <div class=",
  ">\r\n            <h2 id=",
  ">Sign in to sync</h2>\r\n            <p>Continue to Flicklet</p>\r\n            <div class=",
  ">\r\n              <button id=",
  ">\r\n                Continue with Google\r\n              </button>\r\n              <button id=",
  ">\r\n                Continue with Apple\r\n              </button>\r\n              <button id=",
  ">\r\n                Continue with Email\r\n              </button>\r\n            </div>\r\n            <div class=",
  ">Cancel</button>\r\n            </div>\r\n          </div>\r\n        ",
  "[auth] Google provider selected",
  "[auth] Apple provider selected",
  "[auth] Email provider selected",
  "[auth] Auth modal cancelled",
  "[auth] Auth modal closed via overlay click",
  "[auth] Auth modal closed via Escape key",
  "[auth] showProviderModal(): ENTER (top)",
  "[auth] showProviderModal(): blocked → userSignedIn",
  "[auth] closeProviderModal(): using AuthModalManager",
  "[auth] apply:button:bind:skipped (already)",
  "[auth] CLICK (top) accountButton",
  "re in top window\r\n          if (window !== window.parent) {\r\n            console.log(",
  ");\r\n            window.parent.postMessage({ type: ",
  ", provider: ",
  " }, ",
  "[auth] User signed in, showing sign-out confirmation",
  "[auth] User not signed in, showing provider modal",
  "[auth] Account button action completed",
  "[auth] apply:button:bind:attached",
  "📨 Received auth request from iframe:",
  "FLICKLET_${type.toUpperCase()}",
  "[auth] handleRedirectResult(): checking redirect result...",
  "[auth] apply:redirect:skip (flag-missing at entry)",
  "[auth] apply:redirect:defer (no body)",
  "[auth] apply:redirect:resolve:start",
  "No location for new iframe",
  "[auth] handleRedirectResult(): Firebase auth not ready for redirect",
  "[auth] handleRedirectResult(): success →",
  "[auth] handleRedirectResult(): no user in result",
  ");\r\n            if (info?.provider === ",
  ") {\r\n              console.warn(\r\n                ",
  ",\r\n              );\r\n              console.warn(",
  ");\r\n              console.warn(",
  ");\r\n              console.warn(\r\n                ",
  "[auth] Apple login completed, user is signed in:",
  "[auth] Error details:",
  "[auth] Iframe error - likely no actual redirect in progress",
  "[auth] No auth event - redirect may have been cancelled or already processed",
  "[auth] User is signed in despite no-auth-event error:",
  "Sign-in failed: ${error.message}",
  "[auth] apply:redirect:clear",
  "[auth] apply:redirect:resolve:done",
  "[auth] Mobile UA detected but desktop viewport - using desktop auth flow",
  "🔍 [DIAGNOSTIC] Starting data loading diagnosis...",
  "❌ [DIAGNOSTIC] No user signed in",
  "✅ [DIAGNOSTIC] User signed in:",
  "🔍 [DIAGNOSTIC] User UID:",
  "❌ [DIAGNOSTIC] Firebase Firestore not available",
  "❌ [DIAGNOSTIC] No Firebase document found for user",
  "✅ [DIAGNOSTIC] Firebase document found",
  "🔍 [DIAGNOSTIC] Firebase data keys:",
  "✅ [DIAGNOSTIC] Watchlists data found",
  "🔍 [DIAGNOSTIC] TV data:",
  "🔍 [DIAGNOSTIC] Movies data:",
  "❌ [DIAGNOSTIC] No watchlists data in Firebase",
  "✅ [DIAGNOSTIC] Direct TV data found",
  "🔍 [DIAGNOSTIC] Direct TV:",
  "✅ [DIAGNOSTIC] Direct Movies data found",
  "🔍 [DIAGNOSTIC] Direct Movies:",
  "🔍 [DIAGNOSTIC] Local appData:",
  "🔄 [DIAGNOSTIC] Attempting to force load data...",
  "🔍 [DIAGNOSTIC] Local appData after loading:",
  "🔄 [DIAGNOSTIC] Triggering UI update...",
  "✅ [DIAGNOSTIC] Diagnosis complete",
  "❌ [DIAGNOSTIC] Error during diagnosis:",
  "[auth] clearAllAuthModals(): cleaning up all auth modals",
  "#providerModal, .modal-backdrop[data-modal=",
  "], #signInModal, #emailAuthModal, .modal-backdrop",
  "[auth] clearAllAuthModals(): removing modal",
  "🚀 Starting sign-in process...",
  "waiting for Firebase ready...",
  "firebaseApp missing",
  "using redirect method for sign in",
  "signIn bootstrap failed:",
  "ℹ️ No sign-in attempt detected, skipping redirect result check",
  "🔍 Checking for redirect result...",
  "🔍 Current URL:",
  "🔍 URL search:",
  "🔍 URL hash:",
  "🔍 Referrer:",
  "🔍 Calling getRedirectResult...",
  "🔍 Redirect result:",
  "✅ redirect sign-in successful",
  "🔄 triggering data sync after redirect sign-in",
  "ℹ️ no redirect result - user not returning from sign-in",
  "❌ redirect result handling failed:",
  ";\r\n        button.innerHTML = ",
  ";\r\n        button.title = ",
  ";\r\n        button.dataset.state = ",
  ";\r\n      }\r\n      if (label) label.textContent = user.displayName || user.email || ",
  ";\r\n      if (greeting) {\r\n        greeting.innerHTML = ",
  "UI updated for signed-in user:",
  "🔑 Sign In",
  "UI updated for signed-out state",
  "[auth] DEPRECATED: setupAuthListener() - use AuthManager instead",
  "[auth] DEPRECATED: startSignIn() - use AuthManager.startLogin() instead",
  "[auth] DEPRECATED: handleRedirectResult() - handled by AuthManager",
  "[auth] DEPRECATED: startSignOut() - use AuthManager.signOut() instead",
  "[auth] DEPRECATED: initRedirectHandler() - handled by AuthManager",
  "FlickletApp.init missing",
  "Set Episode Progress",
  "Add Tag",
  "Trailer / Extras",
  "Remind Me (Configurable)",
  "✅ Cards V2 config loaded",
  "🔄 Clean Data Loader starting...",
  "🔄 Loading user data and replacing cards...",
  "❌ No user signed in - cannot load data",
  "✅ User signed in:",
  "❌ Firebase Firestore not available",
  "🔄 Loading data from Firebase...",
  "❌ No Firebase document found for user",
  "✅ Firebase document found",
  "❌ No watchlists data in Firebase document",
  "🔄 Loading TV data...",
  "🔍 TV watching count:",
  "🔍 TV wishlist count:",
  "🔍 TV watched count:",
  "✅ TV data loaded into appData",
  "🔄 Loading movie data...",
  "🔍 Movie watching count:",
  "🔍 Movie wishlist count:",
  "🔍 Movie watched count:",
  "✅ Movie data loaded into appData",
  "✅ Data saved to localStorage",
  "🔄 Updating UI...",
  "✅ UI updated",
  "✅ Emitted cards:changed event",
  "✅ Tab content updated:",
  "✅ Data loading and card replacement completed successfully!",
  "Data Loaded",
  "Your shows and movies have been loaded with the new design!",
  "❌ Error loading user data:",
  "Data Load Failed",
  "Failed to load your data. Please try again.",
  "🔄 Replacing all cards with clean unified cards...",
  "⚠️ Container ${containerId} not found",
  ";\r\n\r\n        // Get section name\r\n        const section = containerId.replace(",
  "🔄 Creating ${sectionData.length} clean cards for ${section} section",
  "${item.year} • ${item.mediaType === ",
  "\r\n                : item.mediaType === ",
  "\r\n                  ? ",
  "\r\n                  : ",
  "✅ Card replacement complete: ${replacedCount} cards replaced",
  "❌ Card replacement failed:",
  ">🎬</div>\r\n      <div class=",
  ">Nothing here yet</div>\r\n      <div class=",
  ">Your ${sectionName.toLowerCase()} list is empty</div>\r\n    ",
  "🔄 User already signed in, loading data...",
  "✅ Clean Data Loader ready. Use window.loadUserDataAndReplaceCards() to manually load data.",
  "Cannot add event listener: element not found",
  "storage.get(${key})",
  "storage.set(${key})",
  "storage.remove(${key})",
  "storage.clear",
  ";\r\n        },\r\n        ",
  ";\r\n      return str.replace(\r\n        /[&<>",
  "]/g,\r\n        (match) =>\r\n          ({\r\n            ",
  "\r\n            position: fixed;\r\n            top: 20px;\r\n            right: 20px;\r\n            background: ${type === ",
  "🔧 Common Utilities loaded",
  ".player-placeholder",
  ".community-player-placeholder",
  ".loading-spinner",
  "Community Player",
  "seed fetch failed",
  ">Community features are coming soon.</div>",
  ";\n\n    const c = dailyCard;\n    const card = document.createElement(",
  ");\n    card.className = ",
  ").toLowerCase()}",
  ");\n    if (c.attribution?.watermark) card.dataset.watermark = c.attribution.watermark;\n\n    let mediaEl = ",
  ";\n    if (c.media?.kind === ",
  " && c.media.src) {\n      mediaEl = ",
  "${c.media.src}",
  "${c.accessibility?.alt || ",
  ";\n      const muted = c.media.muted ? ",
  ";\n      const poster = c.media.poster ? ",
  "${c.media.poster}",
  ";\n      mediaEl = ",
  ";\n    } else if (c.media?.kind === ",
  " && c.media.src) {\n      const autoplay = c.media.autoplay ? ",
  ";\n      const controls = c.media.controls !== false ? ",
  ";\n      const showinfo = c.media.showinfo !== false ? ",
  ";\n      const rel = c.media.rel !== false ? ",
  ";\n      const loop = c.media.loop ? ",
  ";\n      \n      // Build clean YouTube embed URL\n      let embedUrl = c.media.src;\n      if (!embedUrl.includes(",
  ")) {\n        embedUrl += ",
  ";\n      } else {\n        embedUrl += ",
  ";\n      }\n      \n      embedUrl += ",
  ";\n      \n      // Only add playlist if loop is enabled and we have a playlist\n      if (loop === ",
  " && c.media.playlist) {\n        embedUrl += ",
  ";\n      }\n      \n      mediaEl = ",
  " \n          allow=",
  " \n          allowfullscreen\n          loading=",
  "\n          title=",
  "YouTube video",
  "\n          aria-label=",
  ">\n        </iframe>\n      </div>",
  "<p class=",
  ">${c.subtitle}</p>",
  ";\n    const desc = c.description ? ",
  ";\n    const poll = c.stats?.poll?.length\n      ? ",
  "Poll results",
  "\n          <div class=",
  " aria-label=",
  ">\n            <span class=",
  ">${p.label}</span>\n            <span class=",
  "></span>\n            <span class=",
  ">${p.percent}%</span>\n          </div>",
  ")}\n        </div>",
  ";\n\n    const tracked =\n      typeof c.stats?.trackedCountToday === ",
  "\n        ? ",
  "\n        : ",
  ";\n\n    const cta = c.cta\n      ? c.cta.action !== ",
  "${c.cta.url || ",
  ">${c.cta.label}</a>",
  "<button class=",
  " aria-disabled=",
  ">${c.cta.label || ",
  ";\n\n    card.innerHTML = ",
  "}</div>\n      <div class=",
  ">\n        ${desc}\n        ${poll}\n        ${tracked}\n      </div>\n      <footer>\n        <div class=",
  ">\n          <img class=",
  " src=",
  "/assets/avatars/staff.png",
  " />\n          <span class=",
  ">${c.attribution?.displayName || ",
  "}</span>\n          ${c.attribution?.watermark ? ",
  ">${c.attribution.watermark}</span>",
  "}\n        </div>\n        <div class=",
  ">${cta}</div>\n      </footer>\n    ",
  ".community-section",
  ".community-player",
  ") ||\n                   root.querySelector(",
  ".player-viewport",
  ".player-caption",
  ".player-controls",
  "\n        <button type=",
  ">Prev</button>\n        <button type=",
  ">Next</button>\n      ",
  ";\n    const hasVideo = type.includes(",
  ") || !!card.querySelector(",
  ");\n    const hasImage = !!card.querySelector(",
  ");\n    const likes = parseInt(card.dataset.score || card.dataset.likes || ",
  ", 10) || 0;\n    const ts = parseInt(card.dataset.timestamp || card.getAttribute(",
  "community data fetch failed",
  "failed to fetch community data:",
  ");\n    title.className = ",
  ");\n      subtitle.className = ",
  ";\n      const muted = item.media.muted ? ",
  ";\n      const controls = item.media.controls !== false ? ",
  ";\n      const showinfo = item.media.showinfo !== false ? ",
  ";\n      const rel = item.media.rel !== false ? ",
  ";\n      const loop = item.media.loop ? ",
  ";\n      \n      // Build clean YouTube embed URL\n      let embedUrl = item.media.src;\n      if (!embedUrl.includes(",
  " && item.media.playlist) {\n        embedUrl += ",
  ";\n      }\n      \n      iframe.src = embedUrl;\n      iframe.frameBorder = ",
  ";\n      iframe.allow = ",
  ";\n      iframe.allowFullscreen = true;\n      iframe.loading = ",
  ";\n      iframe.title = item.title || ",
  ";\n      iframe.setAttribute(",
  ", item.accessibility?.alt || item.title || ",
  ");\n      desc.className = ",
  ".community-card",
  ";\n    // try clone poster/video safely\n    const media = card.querySelector(",
  ")?.cloneNode(true);\n    const title = card.querySelector(",
  ")?.textContent?.trim() || ",
  "no DOM cards found, fetching community data...",
  "items from community data",
  ".prev",
  ".next",
  "; caption.textContent = ",
  "; }\n      else { renderInto(viewport, caption, items[idx]); start(); }\n      console.info(NS, ",
  "root not found",
  "missing parts",
  "Staff Pick",
  ",\r\n      firebase: {\r\n        apiKey: ",
  ",\r\n        authDomain: ",
  ",\r\n        projectId: ",
  ",\r\n      },\r\n      google: {\r\n        clientId: ",
  ",\r\n      },\r\n      app: {\r\n        version: ",
  ",\r\n        name: ",
  ",\r\n        authDomain: process.env.FIREBASE_AUTH_DOMAIN || ",
  ",\r\n        projectId: process.env.FIREBASE_PROJECT_ID || ",
  ",\r\n      };\r\n      config.google = {\r\n        clientId: process.env.GOOGLE_CLIENT_ID || ",
  "TMDB API key is required",
  "TMDB API key appears to be invalid (too short)",
  "Configuration validation failed:",
  ", primary:true,  pro:false },\r\n      { id:",
  ",     label:",
  ",       icon:",
  ",      label:",
  ",        icon:",
  ", primary:false, pro:false },\r\n    ],\r\n    wishlist: [\r\n      { id:",
  ", label:",
  ", icon:",
  ",            icon:",
  ",     icon:",
  ",             icon:",
  ", primary:false, pro:false },\r\n    ],\r\n    watched: [\r\n      { id:",
  ",      icon:",
  ", primary:false, pro:false },\r\n    ],\r\n    discover: [\r\n      { id:",
  "missing id",
  "[data-api] Saving rating for ${id}: ${rating}",
  "[data-init] warn function error:",
  "User data cleared successfully",
  "Failed to clear user data:",
  "local appData loaded:",
  "loadUserDataAndReplaceCards failed:",
  "Firebase not available - using local-only mode",
  "Cloud enabled - auth state changes handled by centralized AuthManager",
  "cloud disabled (auth/db not ready) — local-only mode",
  "Firebase ready event received, re-evaluating cloud status",
  "Cloud sync enabled after Firebase ready event",
  "auth state:",
  "Triggering UI refresh after auth change (ready event)",
  "Emitted cards:changed event after auth change (ready event)",
  "sync on auth-change failed:",
  "🔍 Checking redirect status (ready event):",
  "⏳ Auth state change during redirect (ready event) - waiting for redirect result",
  "🧹 User signed out after sign-in attempt (ready event) - clearing local data",
  "ℹ️ No sign-in attempt detected (ready event) - keeping existing data",
  "immediate sync failed:",
  "init failure:",
  "sync skipped:",
  "- no user",
  "- no db",
  "sync: starting (auth ready)",
  "Local data is newer than Firebase data, skipping overwrite:",
  "Firebase data is newer or equal, will sync:",
  "Firebase data is empty, preserving local data to prevent data loss",
  "Data transformation complete:",
  "window.appData updated from localStorage after sync",
  "Skipping Firebase sync - local data is newer",
  "sync complete:",
  "sync error:",
  "Unknown error",
  ")) + ",
  "[data-init] init: no auth user after wait; aborting sync",
  "[data-init] sync: starting (auth ready)",
  "No appData to migrate",
  "Data already in Firebase structure",
  "Migrating data to Firebase structure...",
  "Migration complete:",
  "Migrating from Firebase structure for compatibility...",
  "Syncing data between old and new structures...",
  "No appData provided",
  "No valid data structure found",
  "Incomplete watchlists structure",
  "Invalid movies structure in watchlists",
  "Invalid tv structure in watchlists",
  "Invalid movies structure",
  "Invalid tv structure",
  "Starting data migration process...",
  "Data validation failed:",
  "Data migration completed successfully",
  "Data migration utility loaded",
  "Initializing DataOperations...",
  "WatchlistsAdapterV2 not available",
  "DataOperations initialized",
  "DataOperations.addItem called:",
  "Item ID is required",
  "Invalid list name",
  "Adding item to list:",
  "Adapter not available",
  "Calling adapter.addItem...",
  "Adapter.addItem result:",
  "Saving data...",
  "Emitting event...",
  "Item added successfully",
  "Failed to add item to adapter",
  "Add item failed:",
  "Invalid list names",
  "Item already in target list",
  "Moving item between lists:",
  "Item moved successfully",
  "Failed to move item in adapter",
  "Move item failed:",
  "Removing item from list:",
  "Item removed successfully",
  "Failed to remove item from adapter",
  "Remove item failed:",
  "Get items failed:",
  "Has item check failed:",
  "Data saved to localStorage",
  "Data saved to Firebase",
  "Skipping Firebase save - no authenticated user",
  "Data saved successfully",
  "Save data failed:",
  "Event emitted:",
  "Event emission failed:",
  "DataOperations loaded",
  "[DataOptimizer] Invalid item for full details:",
  "[DataOptimizer] Failed to get full details:",
  ",\r\n      );\r\n\r\n      // Save optimized data\r\n      localStorage.setItem(",
  ", JSON.stringify(optimized));\r\n\r\n      // Update window.appData\r\n      if (typeof window.loadAppData === ",
  ") {\r\n        window.loadAppData();\r\n      }\r\n\r\n      return optimized;\r\n    } catch (error) {\r\n      console.error(",
  "[DataOptimizer] Pre-save optimization: ${Math.round(size / 1024)}KB",
  ", \r\n        primary: true, \r\n        pro: false, \r\n        handler: ",
  " \r\n      },\r\n      { \r\n        id: ",
  ", \r\n        label: ",
  ", \r\n        icon: ",
  ", \r\n        primary: false, \r\n        pro: false, \r\n        handler: ",
  ", \r\n        primary: false, \r\n        pro: true, \r\n        handler: ",
  " \r\n      }\r\n    ],\r\n    \r\n    wishlist: [\r\n      { \r\n        id: ",
  " \r\n      }\r\n    ],\r\n    \r\n    watched: [\r\n      { \r\n        id: ",
  " \r\n      }\r\n    ],\r\n    \r\n    discover: [\r\n      { \r\n        id: ",
  " \r\n      }\r\n    ],\r\n    \r\n    home: [\r\n      { \r\n        id: ",
  "Pro status:",
  ".tab.active",
  ");\r\n    if (currentTab && [",
  "UPSELL MODAL:",
  "Upgrade to Pro to unlock this feature!",
  "Unknown Item",
  "Advanced Analytics",
  "Upgrade to Pro to unlock ${item?.title || ",
  "}!\\n\\nPro features include:\\n• Export data\\n• Share recommendations\\n• Advanced analytics\\n• Priority support",
  "Upsell event received:",
  "🎬 MediaCard Demo Settings Loaded",
  "💡 Use toggleProStatus() to switch between Pro/Free views",
  "🔒 Pro actions will show upsell modal when clicked by non-Pro users",
  "🗑️ DOM cache invalidated",
  "📋 Cache hit for element: ${id}",
  "🗑️ Removed stale cache entry for: ${id}",
  "💾 Cached element: ${id}",
  "❌ Element not found: ${id}",
  "📋 Cache hit for selector: ${selector}",
  "💾 Cached selector: ${selector}",
  "📋 Cache hit for selectorAll: ${selector}",
  "💾 Cached selectorAll: ${selector}",
  "🗑️ Cleared cache entry: ${id}",
  "🗑️ Auto-invalidated ${invalidated} stale cache entries",
  "💾 DOM Cache system initialized",
  "🚨 Emergency functions loading - ensuring critical functionality",
  "⚠️ loadUserDataFromCloud not available, creating emergency fallback",
  "🔄 Emergency loadUserDataFromCloud called for uid:",
  "⚠️ Firebase not available, skipping cloud load",
  "✅ Emergency cloud data loaded",
  "✅ Emergency data merged with appData",
  "ℹ️ No cloud data found for user",
  "❌ Emergency loadUserDataFromCloud failed:",
  "t throw - just log and continue\n      }\n    };\n\n    FlickletDebug.info(",
  ");\n  }\n\n  // Emergency addToList function\n  if (typeof window.addToList !== ",
  ") {\n    FlickletDebug.warn(",
  ");\n\n    window.addToList = function (item, listName) {\n      try {\n        FlickletDebug.info(",
  ", { item: item?.id, listName });\n\n        if (!item || !item.id) {\n          FlickletDebug.warn(",
  ");\n        const category = mediaType === ",
  "✅ Emergency addToList success",
  "ℹ️ Item already exists in list",
  "❌ Emergency addToList failed:",
  "✅ Emergency addToList function created",
  "⚠️ saveAppData not available, creating emergency fallback",
  "💾 Emergency saveAppData called",
  "⚠️ No appData to save",
  "✅ Emergency saveAppData success",
  "✅ Emergency Firebase save success",
  "❌ Emergency Firebase save failed:",
  "❌ Emergency saveAppData failed:",
  "✅ Emergency saveAppData function created",
  "🚨 Emergency functions loaded successfully",
  "\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      background: ${type === ",
  ", type = ERROR_TYPES.CRITICAL) {\r\n    const errorInfo = {\r\n      message: error.message || ",
  ",\r\n      stack: error.stack || ",
  "🚨 CRITICAL ERROR [${context}]:",
  "⚠️ WARNING [${context}]:",
  "🌐 NETWORK ERROR [${context}]:",
  "✅ VALIDATION ERROR [${context}]:",
  "❌ ERROR [${context}]:",
  "Error in ${context}: ${errorInfo.message}",
  "🔄 Retry ${attempt}/${maxRetries} for ${context}",
  "${context} (after ${maxRetries} retries)",
  "🗑️ Error history cleared",
  "t control\r\n    if (\r\n      event.error &&\r\n      event.error.message &&\r\n      (event.error.message.includes(",
  ") ||\r\n        event.error.message.includes(",
  "))\r\n    ) {\r\n      // Log but don",
  "Chrome extension error (ignored):",
  "Global Error Handler",
  "Unhandled Promise Rejection",
  "🛡️ Error Handler system initialized",
  "🧹 Starting Firebase cleanup...",
  "❌ No authenticated user found",
  "✅ User authenticated:",
  "ℹ️ No user document found",
  "📊 Current document size:",
  ",\r\n      );\r\n\r\n      // Check if already optimized\r\n      if (currentData.data_v >= 1) {\r\n        console.log(",
  "📊 New document size:",
  ");\r\n      console.log(",
  ", reduction + ",
  ");\r\n\r\n      if (newSize > 1048576) {\r\n        console.error(",
  "✅ Firebase cleanup complete",
  "❌ Firebase cleanup failed:",
  "✅ Data backed up to localStorage",
  "❌ Backup failed:",
  "🧹 Firebase cleanup needed - document size:",
  ");\r\n          console.log(",
  ");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn(",
  "Firebase not loaded yet, retrying...",
  "FIREBASE_CONFIG not found",
  "✅ Firebase v9 CDN bridge initialized with Auth and Firestore",
  "s 1MB document size limit.\r\n */\r\n\r\n(function () {\r\n  ",
  "🔄 Migration already in progress...",
  "🚀 Starting Firebase data migration to subcollections...",
  ");\r\n\r\n      // Create subcollection references\r\n      const subcollections = {\r\n        ",
  ": db.collection(",
  "),\r\n        ",
  "2.0",
  "✅ Firebase data migration completed successfully!",
  "📦 Migrating ${items.length} items to ${listName}...",
  "${item.id}_${i + index}",
  "✅ Migrated batch ${Math.floor(i / batchSize) + 1} of ${listName}",
  "✅ Completed migration of ${listName}: ${items.length} items",
  "📥 Loading data from subcollections...",
  ");\r\n          data.tv[listName] = items;\r\n        } else if (key.startsWith(",
  ")) {\r\n          const listName = key.replace(",
  "✅ Data loaded from subcollections successfully!",
  "❌ Failed to load from subcollections:",
  "✅ Data already migrated, loading from subcollections...",
  "🚨 Large document detected, starting migration...",
  "🔄 Firebase Migration module loaded",
  "🔧 Auth State Fix starting...",
  "🔧 Current user from Firebase:",
  "🔧 User is signed in, updating UI...",
  ";\r\n        window.setAuthUI(true, displayName);\r\n\r\n        console.log(",
  ", displayName);\r\n\r\n        // Show success message\r\n        if (window.showToast) {\r\n          window.showToast(",
  "Signed In",
  "Welcome back, ${displayName}!",
  "🔧 No user signed in",
  "🔧 Failed to fix auth state:",
  "✅ Auth State Fix loaded. Use window.fixAuthState() to manually fix.",
  "🔧 Auth UI Fix starting...",
  "🔧 Fixing auth UI state...",
  "🔧 Current user:",
  ");\r\n      const signOutArea = document.querySelector(",
  ");\r\n\r\n      if (signInArea) {\r\n        // Clear any conflicting text\r\n        signInArea.innerHTML = ",
  ">\r\n            <span id=",
  " data-username-display title=",
  ">${currentUser?.displayName || currentUser?.email?.split(",
  "}</span>\r\n            <button id=",
  ">Sign Out</button>\r\n          </div>\r\n        ",
  "🔧 Auth UI fixed! Signed in:",
  "Welcome back, ${currentUser.displayName || currentUser.email?.split(",
  ",\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(",
  "], [data-action=",
  ");\r\n    if (!el) return;\r\n\r\n    e.preventDefault();\r\n\r\n    try {\r\n      if (el.matches(",
  ")) {\r\n        console.log(",
  ");\r\n        signIn();\r\n      } else if (el.matches(",
  ");\r\n        signOut();\r\n      }\r\n    } catch (error) {\r\n      console.error(",
  "🔧 Firebase auth not available",
  "🔧 Starting Google sign in...",
  "🔧 Sign in successful:",
  "🔧 Sign in failed:",
  "Sign In Failed",
  "Please try again",
  "🔧 Starting sign out...",
  "🔧 Sign out successful",
  "Signed Out",
  "You have been signed out",
  "🔧 Sign out failed:",
  "Sign Out Failed",
  "✅ Auth UI Fix loaded. Use window.fixAuthUI() to manually fix.",
  "%cFlicklet safe mode loaded.",
  "padding:2px 6px;border:1px solid #000",
  "🔄 Force Data Loading script starting...",
  "🔄 Force loading user data...",
  "🔍 User UID:",
  "🔍 Firebase data:",
  "✅ Data loading completed successfully!",
  "Your shows and movies have been loaded!",
  "✅ Force Data Loading script ready. Use window.forceLoadUserData() to manually load data.",
  "DataOperations not available after timeout",
  "addToListFromCacheV2 called:",
  "Item already exists in list:",
  "Already in ${list}",
  "Found item data from search results:",
  "Failed to parse item data from search results:",
  "Using item data from options:",
  "Could not retrieve item data",
  "Item added successfully to",
  "Added to ${list}",
  "Failed to add item to list",
  "addToListFromCacheV2 failed:",
  "Failed to add item",
  "moveItemV2 called:",
  "Invalid destination list",
  "Item not found in any list",
  "Item moved successfully from",
  ", dest);\n        \n        // Show success notification\n        if (typeof window.showNotification === ",
  ") {\n          window.showNotification(",
  "Moved to ${dest}",
  "Failed to move item",
  "moveItemV2 failed:",
  "removeItemFromCurrentListV2 called:",
  "Item removed successfully from",
  "Item removed",
  "Failed to remove item",
  "removeItemFromCurrentListV2 failed:",
  "Found stored item data:",
  "Failed to parse stored item data:",
  ".unified-card-title",
  "Item ${id}",
  "Failed to fetch from TMDB:",
  "getItemData failed:",
  "findItemSourceList failed:",
  ");\n        if (card) {\n          card.remove();\n          log(",
  ");\n          \n          // Update results count\n          const resultsCount = document.getElementById(",
  ");\n          if (resultsCount) {\n            const remaining = searchRoot.querySelectorAll(",
  "removeFromSearchResults failed:",
  "UI updated after data change",
  "updateUIAfterDataChange failed:",
  "Enhanced functions v2 loaded",
  "🔧 Basic setup completed, continuing...",
  ")) {\n        log(",
  ");\n        try {\n          const data = await window.tmdbGet(",
  "Hinted type ${typeHint} failed for id ${id}, will try fallback",
  "Trying both movie and tv for id ${id}",
  "Found ${successful.value.media_type} for id ${id}",
  "No data found for id ${id} in any media type",
  "All resolution attempts failed for id ${id}:",
  "s always available\n  console.log(",
  ");\n    window.addToListFromCache = async function addToListFromCache(id, list) {\n      console.log(",
  "📝 Found stored item data:",
  "⚠️ Failed to parse stored item data:",
  ".media-card-title",
  ")?.textContent ||\n                         ",
  ";\n            const subtitle = card.querySelector(",
  ")?.textContent || \n                           card.querySelector(",
  ")?.textContent ||\n                           ",
  ";\n            const mediaType = card.dataset.mediaType || card.dataset.type || ",
  "📝 Extracted item data from card:",
  "t find the item, check if it",
  "📝 Item not found in search cache, checking appData...",
  "📝 Found existing item in appData:",
  "t find the item, fetch full data from TMDB using type-aware resolver\n      if (!item) {\n        console.log(",
  "📝 Fetched full TMDB data:",
  "No data from TMDB",
  "⚠️ Failed to fetch TMDB data, creating basic item:",
  "✅ Successfully added item to",
  ") ||\n              searchRoot.querySelector(",
  "[data-id], [data-item-id]",
  "Could not remove search card after add:",
  "⚠️ Failed to add item to",
  "Failed to add to ${list}",
  "📝 addToList not available, using fallback implementation",
  ");\n          const category = mediaType === ",
  "using fallback",
  "📝 WatchlistsAdapter.addItem result:",
  "💾 Saving app data...",
  "🔄 Calling window.saveData() to sync to Firebase...",
  "🔄 Invalidating WatchlistsAdapter cache after Firebase save...",
  "❌ Firebase save failed:",
  "📡 Emitting cards:changed event...",
  "🔄 Calling FlickletApp.updateUI...",
  "🔔 Showing notification...",
  ") ||\n                searchRoot.querySelector(",
  "❌ Fallback addToList failed:",
  "✅ addToListFromCache function defined successfully",
  "❌ Error in basic setup:",
  "🔧 Mobile polish gate starting...",
  "📱 Mobile polish guard disabled via FLAGS.mobilePolishGuard=false",
  "📱 Mobile polish already initialized, skipping",
  "🔧 Mobile polish gate initialized...",
  "📱 Mobile detection debug:",
  "📱 Mobile polish ${enable ? ",
  "} — vw:${viewportWidth} (device: ${isMobileDevice}, viewport: ${isMobileViewport}, size: ${isMobileSize})",
  "❌ Error in applyMobileFlag:",
  "❌ Error in mobilePolishGate:",
  "🔧 Calling mobilePolishGate...",
  "🔧 mobilePolishGate completed...",
  "❌ Error calling mobilePolishGate:",
  "🔧 Setting up data ready event listener...",
  "🔄 Data ready event received, updating lists...",
  "🔧 Data ready event listener set up...",
  "❌ Error setting up data ready event listener:",
  "🔧 Setting up helper functions...",
  "[countRenderedItems] Failed for ${listType}:",
  "🔧 Helper functions set up...",
  "❌ Error setting up helper functions:",
  "🔧 Setting up tab/render pipeline...",
  "🔧 Tab/render pipeline set up...",
  "❌ Error setting up tab/render pipeline:",
  "🔄 updateTabContent called for tab: ${tab}",
  "🔄 Calling loadListContent for ${tab}",
  "🔄 [CENTRALIZED] updateTabCounts called from watchlists:updated event",
  ",\n      );\n      // Update badges and list header counts\n      [",
  "Updated ${list}Badge: ${count}",
  "Badge not found for ${list}: ${list}Badge or [data-count=",
  ");\n        }\n        // Update list header count\n        const listCount = document.getElementById(",
  ");\n        if (listCount) {\n          listCount.textContent = count;\n          log(",
  ");\n        } else {\n          warn(",
  ");\n        }\n      });\n      log(",
  ", counts);\n      return counts;\n    } catch (e) {\n      console.warn(",
  "🎯 [CENTRALIZED] cards:changed event received, updating counts",
  "🎯 [CENTRALIZED] watchlists:updated event received, updating counts and lists",
  ".tab.is-active",
  ");\n      if (currentTab && [",
  "🔄 Re-rendering current list after watchlists:updated",
  "🔢 DOMContentLoaded - emitting cards:changed event",
  "🔢 userDataLoaded event - emitting cards:changed event",
  "[functions] Skipping duplicate home render",
  "🏠 Loading home content - using improved loading",
  "Starting duplicate card cleanup...",
  ".card, .cw-card, .media-card, [data-id]",
  "Removed duplicate card: ${key}",
  "Cleanup complete. Removed ${duplicatesRemoved} duplicate cards.",
  "[cleanup] Failed:",
  "🔧 Setting up WatchlistsAdapter...",
  "[WL v28.99]",
  "Using cached watchlists data for uid:",
  "Load already in progress, waiting...",
  "WatchlistsAdapter.load failed:",
  "Loading watchlists for uid:",
  "Firebase user doc found, watchlists keys:",
  "Firebase watchlists structure has data:",
  "Watchlists empty or missing, checking direct movies and tv fields...",
  "Firebase movies field:",
  "Firebase tv field:",
  "Created direct watchlists structure:",
  "Merged counts - watching:",
  "Firebase load failed, falling back to appData:",
  "Using appData fallback",
  "Fallback merged counts - watching:",
  "_normalizeWatchlists input:",
  "Invalid watchlists data:",
  "normalizeList called for ${listName}:",
  " field (number)\n            const result = list\n              .map((item) => {\n                if (typeof item === ",
  "${listName} array result:",
  "${listName} object result:",
  "${listName} empty result",
  "movies.watching",
  "tv.watching",
  "movies.wishlist",
  "tv.wishlist",
  "movies.watched",
  "tv.watched",
  "No cache available for moveItem",
  "Removed item:",
  "new count:",
  "Added item:",
  ", toList, ",
  "moveItem failed:",
  "No cache available for removeItem",
  "removeItem failed:",
  "No cache available for addItem, creating new cache",
  "Item already exists in",
  "addItem failed:",
  "Found item data for ID ${id}:",
  ";\n              } else if (isInMovieList && !isInTvList) {\n                normalizedItem.media_type = ",
  ";\n              } else if (normalizedItem.first_air_date) {\n                normalizedItem.media_type = ",
  ";\n              } else if (normalizedItem.release_date) {\n                normalizedItem.media_type = ",
  ";\n              }\n            }\n            \n            return normalizedItem;\n          } else {\n            log(",
  ");\n            return null;\n          }\n        } catch (error) {\n          log(",
  "No cache available for buildAppDataSnapshot",
  "Built appData snapshot from adapter:",
  "buildAppDataSnapshot failed:",
  "🔧 WatchlistsAdapter set up...",
  "❌ Error setting up WatchlistsAdapter:",
  "🔄 loadListContent called for ${listType}",
  "Skipping duplicate render for ${listType}",
  "[WL v28.33] Loaded ${idList.length} IDs for ${listType} from canonical adapter",
  "[WL v28.33] Set header ${list}Count: ${counts[list]}",
  "[WL v28.33] Set badge ${list}Badge: ${counts[list]}",
  "[WL v28.33] Looking for ${idList.length} IDs:",
  "[WL v28.33] ID ${id} ->",
  "NOT FOUND",
  "[WL v28.33] Mapped ${idList.length} IDs to ${items.length} items for ${listType}",
  "[WL v28.33] Missing items for ${listType}:",
  "] .section-content",
  "Container for ${listType}:",
  "Children before clear:",
  "Children after clear:",
  ");\n      log(",
  "Removing duplicate card from:",
  "Rendering ${items.length} items for ${listType} using Cards V2",
  "[WL v28.33] Using toCardProps adapter for ${item.title || item.name}",
  "[functions] toCardProps failed, using fallback:",
  "),\n              title: item.title || item.name || ",
  ",\n              name: item.title || item.name || ",
  ") : ",
  ",\n              seasonEpisode: item.seasonEpisode || item.sxxExx || ",
  ",\n              nextAirDate: item.next_episode_air_date || item.nextAirDate || item.next_air_date || ",
  ",\n              runtime: item.runtime || item.episode_run_time || ",
  ",\n              userRating: item.userRating || item.rating || 0,\n              progress: item.progress || ",
  ",\n              badges: item.badges || [],\n              whereToWatch: item.whereToWatch || ",
  ",\n              overview: item.overview || ",
  "Added V2 tab card ${index + 1}/${items.length} for ${listType}: ${snap.title}",
  "V2 card creation failed for ${snap.title}",
  "[Performance] Rendered ${items.length} cards in ${(endTime - startTime).toFixed(2)}ms",
  "Rendering ${items.length} items for ${listType} using createCardData + Card",
  "Card data for ${it.title || it.name}:",
  "Added card ${index + 1}/${items.length} for ${listType}:",
  "Card creation failed for ${it.title || it.name}",
  "render item failed:",
  "Rendering ${items.length} items for ${listType} using fallback Card method",
  "${it.year} • ${it.mediaType === ",
  "\n                : it.mediaType === ",
  "\n                  ? ",
  "\n                  : ",
  ">Card components not available.</div>",
  "Final children count for ${listType}:",
  "Enabled drag and drop for ${listType} container",
  "[functions] loadListContent failed:",
  ");\n        }\n      }\n      // Fallback to appData search if adapter doesn",
  ");\n            break;\n          }\n        }\n      }\n      if (!item) {\n        log(",
  ", itemId);\n        return;\n      }\n      if (mediaType !== ",
  ") {\n        log(",
  ");\n        return;\n      }\n      // Create modal HTML\n      const modalHTML = ",
  ">Season 1</option>\n                <option value=",
  ">Season 2</option>\n                <option value=",
  ">Season 3</option>\n              </select>\n            </div>\n            <div class=",
  ">\n              <label for=",
  ">Current Episode:</label>\n              <select id=",
  ">\n                <option value=",
  ">Episode 1</option>\n                <option value=",
  ">Episode 2</option>\n                <option value=",
  ">Episode 3</option>\n              </select>\n            </div>\n            <div class=",
  ">\n              <button class=",
  ">Save Progress</button>\n              <button class=",
  ">Mark Season Complete</button>\n              <button class=",
  ">Mark Series Complete</button>\n            </div>\n          </main>\n        </div>\n      </div>\n    ",
  "Save progress:",
  "Mark season complete:",
  "Mark series complete:",
  ".episode-modal-overlay",
  "Episode tracking modal opened for:",
  "[functions] openEpisodeTrackingModal failed:",
  "Updated rating for",
  "[functions] updateUserRating failed:",
  "Updated note for",
  "[functions] updateUserNote failed:",
  ", listType, ",
  "[functions] reorderItems failed:",
  "\n    <div class=",
  ">\n      <div class=",
  ">⏳</div>\n      <div class=",
  ">Loading recommendations...</div>\n    </div>\n  ",
  "⚠️ Failed to fetch recommendations - using empty results",
  ">\n          <div class=",
  ">✨</div>\n          <div class=",
  ">No Recommendations</div>\n          <div class=",
  ">Try adjusting your preferences or check back later.</div>\n        </div>\n      ",
  "Failed to load discover recommendations:",
  ">❌</div>\n          <div class=",
  ">Failed to Load</div>\n          <div class=",
  ">Unable to load recommendations. Please try again later.</div>\n          <button class=",
  " onclick=",
  ">\n            Try Again\n          </button>\n        </div>\n      ",
  "\n        : item.mediaType === ",
  "\n          ? ",
  "\n          : ",
  "View Details",
  "Added to Not Interested",
  "${item.title || item.name} won",
  ",\n            );\n          },\n          icon: ",
  "Failed to get not interested items:",
  "Failed to add to not interested:",
  "Failed to remove from not interested:",
  "Failed to clear not interested:",
  "Open details for item:",
  ".notification",
  "notification notification--${type}",
  "<span class=",
  "t exist\n    let modal = document.getElementById(",
  ");\n    if (!modal) {\n      modal = document.createElement(",
  ");\n      modal.id = ",
  ";\n      modal.className = ",
  ";\n      modal.setAttribute(",
  ";\n    modal.innerHTML = ",
  "Close modal",
  "Add your notes about this show or movie...",
  ">${existingNotes}</textarea>\n      </div>\n      <div class=",
  ">\n        <button class=",
  " data-close>Cancel</button>\n        <button class=",
  ">Save Notes</button>\n      </div>\n    </div>\n  ",
  ".modal__save",
  ".modal__textarea",
  "Notes Saved",
  "Notes saved for ${item.title || item.name}",
  "ModalUtility not available",
  " data-close></div>\n    <div class=",
  ">\n        <h3 class=",
  ">Episode Guide - ${item.title || item.name}</h3>\n        <button class=",
  " data-close>×</button>\n      </div>\n      <div class=",
  ">\n        <div class=",
  ">\n            <label for=",
  ">Season:</label>\n            <select id=",
  ">\n              <option value=",
  ">Season 1</option>\n              <option value=",
  ">Season 2</option>\n              <option value=",
  ">Season 3</option>\n            </select>\n          </div>\n          <div class=",
  ">\n            <div class=",
  ">\n              <div class=",
  ">S1E1</div>\n              <div class=",
  ">Pilot</div>\n              <div class=",
  ">Jan 15, 2023</div>\n              <button class=",
  ">Mark Watched</button>\n            </div>\n            <div class=",
  ">S1E2</div>\n              <div class=",
  ">The Second Episode</div>\n              <div class=",
  ">Jan 22, 2023</div>\n              <button class=",
  ">Mark Watched</button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=",
  " data-close>Close</button>\n      </div>\n    </div>\n  ",
  ">Remove Item</h3>\n        <button class=",
  "btn btn--secondary modal__cancel",
  "btn btn--danger modal__confirm",
  ";\n    // Add confirm functionality\n    const confirmBtn = modal.querySelector(",
  ");\n    confirmBtn.addEventListener(",
  "Item Removed",
  "${item.title || item.name} removed from ${section}",
  "confirmRemoveModal",
  "modal modal--pro",
  ">\n      <h3 class=",
  ">⭐ Flicklet PRO</h3>\n      <button class=",
  ">×</button>\n    </div>\n    <div class=",
  ">⭐</div>\n        <h4 class=",
  ">Unlock Premium Features</h4>\n        <ul class=",
  "btn btn--secondary modal__close",
  "btn btn--primary modal__upgrade",
  ".modal__close",
  ".modal__upgrade",
  "Coming Soon",
  "PRO upgrade will be available soon!",
  ";\n    } catch (error) {\n      console.error(",
  ", error);\n      return ",
  "Failed to save item notes:",
  ");\n    const mediaKey = mediaType === ",
  "Are you sure you want to clear all ",
  " items? This action cannot be undone.",
  "All ",
  " items have been removed",
  "\n      <div class=",
  ">\n        <p>No items marked as ",
  "</p>\n      </div>\n    ",
  ">${item.title}</div>\n        <div class=",
  ">${item.media_type === ",
  "}</div>\n        <div class=",
  ">Added: ${new Date(item.added_date).toLocaleDateString()}</div>\n      </div>\n      <button class=",
  " \n              data-id=",
  " \n              data-media-type=",
  ">\n        Remove\n      </button>\n    </div>\n  ",
  ".not-interested-item__remove",
  "Removed",
  "Item removed from ",
  " list",
  ".poster-card",
  ".poster-card__drag-handle",
  ";\n          dragHandle.setAttribute(",
  "Drag to reorder",
  ".poster-card__actions",
  ".card.v2 .drag-handle",
  ".card.v2",
  ".poster-card, .card.v2",
  ".poster-card:not(.poster-card--dragging), .card.v2:not(.poster-card--dragging)",
  ");\n    const mediaType =\n      section === ",
  " || section === ",
  "\n        ? containerId.includes(",
  ")\n          ? ",
  ";\n    const mediaKey = mediaType === ",
  "List order updated",
  "⚙️ Loading settings content - adding data tools handlers",
  "🔍 Debug: btnExport element found:",
  "🔍 Debug: fileImport element found:",
  "🔍 Debug: window.guard function exists:",
  "🔍 Debug: btnExport exists check:",
  "✅ Setting up export/import handlers",
  ");\n        const legacyData = JSON.parse(localStorage.getItem(",
  ");\n        const data = {\n          meta: {\n            app: ",
  ",\n            version: window.FlickletApp?.version || ",
  "🚀 Export button clicked!",
  "📊 Export data collected:",
  "💾 File download initiated",
  "Export created.",
  "❌ Export failed:",
  "Export failed: ",
  "Import complete. Reloading…",
  "Import failed: invalid file.",
  "Pro preview ON",
  "Pro preview OFF",
  "🔄 Pro toggle (btnProTry): Refreshing providers, extras, playlists, and trivia...",
  "✅ Providers refreshed",
  "✅ Extras refreshed",
  "✅ Playlists refreshed",
  "✅ Trivia refreshed",
  "✅ Series Organizer refreshed",
  "🔍 Debug: Advanced notifications card shown due to Pro state change",
  "🔍 Debug: Advanced notifications card hidden due to Pro state change",
  ">${c.watching}</div>\n            <div class=",
  ">Currently Watching</div>\n          </div>\n          <div class=",
  ">${c.wishlist}</div>\n            <div class=",
  ">Want to Watch</div>\n          </div>\n          <div class=",
  ">${c.watched}</div>\n            <div class=",
  ">Already Watched</div>\n          </div>\n          <div class=",
  ">${c.total}</div>\n            <div class=",
  ">Total Items</div>\n          </div>\n        </div>\n        <div class=",
  ">\n          <h5 class=",
  ">📺 TV Shows Breakdown</h5>\n          <div style=",
  "margin: 10px 0;",
  "display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px; font-size: 0.85rem; max-width: 75%;",
  ";\n      }\n      window.addEventListener(",
  "Notifications enabled",
  "Notifications disabled",
  "🎬 ${upcomingEpisodes.length} new ${episodeText} coming soon!",
  ".card .actions button",
  "Remove",
  "Remove this item from your list",
  "Move to",
  "Move to ",
  ");\n          btn.setAttribute(",
  "Move this item to ${targetList} list",
  ").forEach((el) => {\n        if (isProFromSettings) {\n          el.classList.add(",
  ");\n          el.classList.remove(",
  ");\n          el.removeAttribute(",
  ");\n        } else {\n          el.classList.remove(",
  ");\n          el.classList.add(",
  ");\n          el.setAttribute(",
  "Settings changed:",
  "🔄 Pro toggle (toggleProPreview): Refreshing providers, extras, playlists, and trivia...",
  "Share feature loading...",
  "Share feature coming soon!",
  "🔍 Debug: Checking advanced notifications conditions. FLAGS.notifAdvancedEnabled:",
  "FLAGS.proEnabled:",
  "🔍 Debug: Advanced notifications guard condition met",
  "🔍 Debug: Advanced card element found:",
  "🔍 Debug: Advanced notifications card display set to block",
  ";\n        notifScopeSelect.value = localStorage.getItem(",
  ";\n        // Save preferences on change\n        leadHoursInput.addEventListener(",
  ", (e) => {\n          localStorage.setItem(",
  ", e.target.value);\n        });\n        notifScopeSelect.addEventListener(",
  "🔧 Setting up remaining Item Management functions...",
  "📝 addToList called:",
  "⚠️ Invalid item for addToList",
  "📊 Current appData structure:",
  "📝 WatchlistsAdapterV2.addItem result:",
  "❌ addToList failed:",
  "moveItem called:",
  "✅ [DEBUG] moveItem function is now available on window",
  "No mediaType found for id:",
  "Updated adapter cache for move:",
  "Using enhanced item data for moveItem",
  "Item Moved",
  "Item moved to ${dest}",
  "[Search] Adding to watching:",
  "[Search] Enhancing item with detailed TMDB data...",
  "[Search] Enhanced item:",
  "[Search] Cannot add to watching - missing moveItem function or item.id",
  "[Search] Error enhancing item for watching:",
  "[Search] Adding to wishlist:",
  "[Search] Cannot add to wishlist - missing moveItem function or item.id",
  "[Search] Error enhancing item for wishlist:",
  "[WL v28.23]",
  "No auth or DB available for cloud-confirmed delete",
  "Cloud confirm OK for",
  "Cloud save failed, rolling back:",
  "adapterRemove-fallback",
  "Remove Failed",
  "Failed to remove item. Please try again.",
  "[WL v28.23] Updated adapter cache for removal:",
  "adapterRemove-direct",
  "[WL v28.23] adapterRemove failed:",
  "${hours}h ${minutes}m",
  "FlickWord game starting soon! 🎮",
  ">${tvWatching.length + movieWatching.length}</div>\n          <div class=",
  ">Currently Watching</div>\n        </div>\n        <div class=",
  ">${tvWishlist.length + movieWishlist.length}</div>\n          <div class=",
  ">Want to Watch</div>\n        </div>\n        <div class=",
  ">${tvWatched.length + movieWatched.length}</div>\n          <div class=",
  ">Already Watched</div>\n        </div>\n        <div class=",
  ">${totalItems}</div>\n          <div class=",
  ">Total Items</div>\n        </div>\n      </div>\n      <div class=",
  ">\n        <h5 class=",
  ">📺 TV Shows Breakdown</h5>\n        <div style=",
  ";\n        } catch (error) {\n          console.error(",
  ", error);\n          statsContent.innerHTML = ",
  ">🔔</div>\n        <div class=",
  ">Smart Notifications</div>\n          ${isProEnabled ? ",
  ">${isProEnabled ? ",
  "}</div>\n      </div>\n      <div class=",
  ">📊</div>\n        <div class=",
  ">Your Viewing Journey</div>\n          ${isProEnabled ? ",
  ">🎨</div>\n        <div class=",
  ">Advanced Customization</div>\n          ${isProEnabled ? ",
  ">👥</div>\n        <div class=",
  ">Social Features</div>\n          ${isProEnabled ? ",
  ">⚡</div>\n        <div class=",
  ">VIP Support</div>\n          ${isProEnabled ? ",
  "}</div>\n      </div>\n    </div>\n  ",
  ".unified-card-poster-skeleton",
  ".unified-card-poster-placeholder",
  ".skeleton",
  ".placeholder",
  ".empty",
  ".ad",
  ".hidden",
  "[Counts v28.17] Counter Bootstrap already initialized, skipping",
  "[Counts v28.17] Initializing Counter Bootstrap System",
  "t fail if containers aren",
  "[Counts v28.17] Armed but waiting for first render signal",
  "[Counts v28.17] Found ${countElements.length} count elements to attach",
  "[Counts v28.17] Target section not found: ${targetSelector}",
  "${element.id}-${targetSection.id}",
  "[Counts v28.17] Observer already exists for ${element.id}, skipping",
  "${countElement.id}-${targetSection.id}",
  "🔢 Attached observer for ${countElement.id} -> ${targetSection.id}",
  "[Counts v28.17] Direct recount triggered",
  "🔢 Counting cards in ${targetSection.id}:",
  "🔢 Using fallback count for ${countElement.id}: ${fallbackCount}",
  "s a badge element\n            if (\n              countElement.classList.contains(",
  ") ||\n              countElement.classList.contains(",
  "🔢 Updated count for ${countElement.id}: ${visibleCards} visible cards (was ${currentCount})",
  "🔢 Error updating count for ${countElement.id}:",
  "🔢 Using WatchlistsAdapter cache for ${countElementId}: ${cache[listKey].length}",
  "🔢 Fallback count for ${countElementId}: ${items.length} (deduplicated from ${allItems.length})",
  "[Counts v28.17] Counting cards in ${section.id}:",
  "[Counts v28.17] Excluded ${excludedCount} cards (hidden/inactive)",
  "[Counts v28.17] Final count for ${section.id}: ${visibleCount} visible cards",
  "[Counts v28.17] cards:changed event received - triggering recount",
  "[Counts v28.17] app:lists-rendered event received",
  "[Counts v28.17] Late bind successful - first real recount complete",
  "[Counts v28.17] tab:switched event received - triggering recount",
  "[Counts v28.17] language:changed event received - triggering recount",
  "🔢 Counter Bootstrap System destroyed",
  "🔧 Item Management functions set up...",
  "❌ Error setting up remaining Item Management functions:",
  "Unknown home sections context:",
  "Home section not found:",
  "🏠 Home Sections Configuration loaded",
  ").trim().toLowerCase().replace(/\\s+/g, ",
  ");\r\n  }\r\n\r\n  function showBanner(lines) {\r\n    const bar = document.createElement(",
  ";\r\n    bar.innerHTML = ",
  "• ${l}",
  "Missing container: ${r.containerSelector} for ",
  ");\r\n    if (!head) errs.push(",
  "${r.title}",
  ");\r\n    if (head && norm(head.textContent) !== norm(r.title)) {\r\n      errs.push(\r\n        ",
  "${r.key}",
  "${head.textContent.trim()}",
  ",\r\n      );\r\n    }\r\n  });\r\n\r\n  if (errs.length) {\r\n    console.group(",
  "[home-selftest] OK — Home matches config",
  "[home-selftest] failed",
  ");\n        const staff = JSON.parse(localStorage.getItem(",
  ");\n        const fresh = JSON.parse(localStorage.getItem(",
  ");\n        curatedData.push(...trending, ...staff, ...fresh);\n      } catch (e) {\n        console.warn(",
  ";\n    const list = (limit ? items.slice(0, limit) : items).filter(Boolean);\n    \n    // Don",
  "Nothing here yet.",
  "[home-wire] render error",
  "[home-wire] Attempting to fetch poster data for item:",
  ";\n        const tmdbData = await window.tmdbGet(",
  "[home-wire] Successfully fetched poster data:",
  "[home-wire] Failed to fetch poster data from TMDB:",
  ",\n          title: item.title || item.name || ",
  ",\n          poster: item.poster_path ? ",
  " : (item.posterUrl || ",
  "),\n          releaseDate: item.release_date || item.first_air_date || ",
  ",\n          genre: item.genre || (item.genres && item.genres[0]?.name) || ",
  ",\n          seasonEpisode: item.seasonEpisode || item.sxxExx || ",
  "\n        };\n        card = window.renderCardV2(container, props, { listType: ",
  ", context: ",
  " });\n      } else if (sectionHint === ",
  " && window.renderCardV2) {\n        // Design spec: Home Next Up - vertical layout with NO buttons, single ",
  " line\n        const props = {\n          id: item.id,\n          mediaType: item.media_type || ",
  ",\n          nextAirDate: item.next_episode_air_date || item.nextAirDate || item.next_air_date || ",
  ",\n          tmdbId: item.tmdbId || item.id,\n          whereToWatch: item.whereToWatch || item.provider || ",
  ",\n          curatorBlurb: item.curatorBlurb || item.description || ",
  "\n        };\n        card = window.renderCardV2(container, props, { listType: sectionHint, context: ",
  " });\n      }\n      \n      if (card) {\n        // Add preview-specific styling\n        card.classList.add(",
  ");\n        return card;\n      }\n    } catch (error) {\n      console.error(",
  ";\n    const mediaType = item.media_type || (item.first_air_date ? ",
  " tabindex=",
  ">\n          ${\n            posterUrl\n              ? ",
  "${title} poster",
  "this.style.display=",
  "; this.nextElementSibling.style.display=",
  "\n              : ",
  "\n          }\n          <div class=",
  "></div>\n            <div class=",
  ">🎬</div>\n          </div>\n        </div>\n        <div class=",
  ">\n          <button class=",
  " \n                  data-action=",
  " \n                  data-id=",
  " \n                  aria-label=",
  "\n                  title=",
  ">✅</span>\n            <span class=",
  ">Mark Watched</span>\n          </button>\n          <button class=",
  ">📖</span>\n            <span class=",
  ">Want to Watch</span>\n          </button>\n          <button class=",
  ">🗑️</span>\n            <span class=",
  ">Remove</span>\n          </button>\n        </div>\n      </div>\n      <div class=",
  ">${title}</h3>\n        <div class=",
  ">${year ? ",
  " : mediaType === ",
  "}</div>\n      </div>\n    ",
  ".unified-card-poster",
  "t trigger if clicking on action buttons\n        if (!e.target.closest(",
  ".unified-card-action-btn",
  "[home-wire] Failed to get item data for ID:",
  "),\n              wishlist: wishlistItems.filter(item => item.media_type === ",
  "),\n              watched: watchedItems.filter(item => item.media_type === ",
  ")\n            },\n            movies: {\n              watching: watchingItems.filter(item => item.media_type === ",
  ")\n            }\n          };\n        }\n      } catch (error) {\n        console.warn(",
  "[home-wire] missing container ${r.containerSelector} for ",
  "[home-wire] rendered:",
  "));\n  }\n\n  const config = await loadConfig();\n  // Render whenever data becomes ready\n  window.addEventListener(",
  "[home-wire] failed to init",
  "🌙 Go Dark",
  "☀️ Go Light",
  "TV & Movie Tracker",
  "Total Binge Time",
  "Currently Airing",
  "Series Complete",
  "Because you liked",
  "Choose which types of notifications you",
  ",\r\n    layout_settings: ",
  ",\r\n    layout_description: ",
  ",\r\n    data_management: ",
  ",\r\n    data_description: ",
  ",\r\n    pro_features: ",
  ",\r\n    pro_description: ",
  ",\r\n    settings_description: ",
  ",\r\n\r\n    // Settings options\r\n    condensed_list_view: ",
  ",\r\n    show_posters: ",
  ",\r\n    dark_mode: ",
  ",\r\n    home_page_lists: ",
  ",\r\n\r\n    // Data actions\r\n    export_json: ",
  ",\r\n    import_json: ",
  ",\r\n    extra_trivia_pro: ",
  ",\r\n    export_csv_pro: ",
  ",\r\n    reset_all_data: ",
  ",\r\n    data_hint:\r\n      ",
  "s Downloads/Files. Import accepts a valid Flicklet export.",
  "Toggle Pro features on/off to see what",
  ",\r\n    pro_features_include: ",
  ",\r\n    pro_simulate: ",
  ",\r\n\r\n    // Feedback feature\r\n    share_your_thoughts: ",
  ",\r\n    feedback: ",
  ",\r\n    feedback_working:\r\n      ",
  "s working (or not), share a quote for our rotation, make a confession, or just vent. We",
  ",\r\n    your_message: ",
  ",\r\n    feedback_placeholder:\r\n      ",
  ",\r\n    send: ",
  ",\r\n\r\n    // Share / lists\r\n    share_lists: ",
  ",\r\n    share_this_list: ",
  ",\r\n    share_selected: ",
  ",\r\n    share_link: ",
  ",\r\n    share_instructions: ",
  ",\r\n\r\n    // File pickers\r\n    choose_file: ",
  ",\r\n    no_file_chosen: ",
  ",\r\n\r\n    // Search\r\n    search: ",
  ",\r\n    search_placeholder: ",
  ",\r\n    search_for_shows: ",
  ",\r\n    search_tips: ",
  ",\r\n    search_results: ",
  ",\r\n    end_of_search_results: ",
  ",\r\n    search_failed: ",
  ",\r\n    no_results: ",
  ",\r\n    no_results_found: ",
  ",\r\n    searching: ",
  ",\r\n    search_loading: ",
  ",\r\n    search_results_cleared: ",
  ",\r\n    please_search_again: ",
  ",\r\n\r\n    // Counts / stats\r\n    currently_watching_count: ",
  ",\r\n    want_to_watch_count: ",
  ",\r\n    already_watched_count: ",
  ",\r\n    stats: ",
  ",\r\n    total_items: ",
  ",\r\n    watching_count: ",
  ",\r\n    wishlist_count: ",
  ",\r\n    watched_count: ",
  ",\r\n    top_genres: ",
  ",\r\n    average_rating: ",
  ",\r\n\r\n    // Generic statuses\r\n    loading: ",
  ",\r\n    failed_to_load: ",
  ",\r\n\r\n    // Home screen elements\r\n    community: ",
  ",\r\n    community_player: ",
  ",\r\n    community_player_placeholder: ",
  ",\r\n    flickword: ",
  ",\r\n    flickword_tagline: ",
  ",\r\n    daily_trivia: ",
  ",\r\n    daily_trivia_tagline: ",
  ",\r\n    play_now: ",
  ",\r\n    quote_of_the_moment: ",
  ",\r\n    loading_inspirational_quote: ",
  ",\r\n    your_shows: ",
  ",\r\n    for_you: ",
  ",\r\n    in_theaters: ",
  ",\r\n    report_bug: ",
  ",\r\n    suggest_feature: ",
  ",\r\n    general_feedback: ",
  ",\r\n    submit_video: ",
  ",\r\n\r\n    // Key missing translations\r\n    app_title: ",
  ",\r\n    app_subtitle: ",
  ",\r\n    dont_show_again: ",
  "t show again",
  "👁️ Currently Watching",
  "📅 Next Up This Week",
  "No upcoming episodes this week.",
  "🎯 Curated Sections",
  "Turn on location to see movies playing near you.",
  "Close Game",
  "No items.",
  "No description.",
  "🎨 Theme Packs",
  "[ Daily Trivia game mounts here ]",
  "Enable Episode Tracking",
  "Switch to dark theme. When enabled, follows your system",
  ",\r\n    number_of_curated_sections:\r\n      ",
  ",\r\n    currently_watching_preview_limit: ",
  ",\r\n    number_of_currently_watching:\r\n      ",
  ",\r\n    allow_tracking_of_individual:\r\n      ",
  ",\r\n    advanced_layout_and_theming: ",
  ",\r\n    choose_a_visual_theme:\r\n      ",
  ",\r\n    basic_data_management: ",
  ",\r\n    download_a_complete_backup:\r\n      ",
  ",\r\n    restore_your_data: ",
  ",\r\n    generate_a_shareable_text:\r\n      ",
  ",\r\n    permanently_delete_all:\r\n      ",
  ",\r\n    advanced_data_management: ",
  ",\r\n    export_your_data_csv: ",
  ",\r\n    access_additional_trivia:\r\n      ",
  ",\r\n    advanced_features_premium:\r\n      ",
  ",\r\n    were_not_here_to_reinvent:\r\n      ",
  "re not here to reinvent the wheel — we",
  "d rather give you tools that just… work.",
  "s fun, useful, and a little different from the pack — it belongs here.",
  ",\r\n    pam_once_trained_dolphins:\r\n      ",
  "re like a mash-up of ",
  " — and that combo lets us build apps that are simple, useful, and not boring.",
  "episode 7 mid-season thoughts.",
  ",\r\n    so_we_made_this_instead: ",
  ",\r\n    if_you_watch_tv:\r\n      ",
  "t want to make it a hobby just to track them, this app",
  ",\r\n    your_feedback_helps:\r\n      ",
  ",\r\n    your_name_will_appear: ",
  ",\r\n    view_your_watching_stats: ",
  ",\r\n    view_and_remove_items:\r\n      ",
  ",\r\n    get_notified_when_new:\r\n      ",
  "re watching are about to air",
  "Receive weekly recommendations for new shows and movies based on your preferences",
  "Configure advanced notification settings with custom lead times and list monitoring",
  "🎨 Personalized Recommendations",
  "Based on your watching history and preferences",
  "Your anime suggestions",
  "Your horror suggestions",
  "What everyone is watching",
  "Staff Picks",
  "Curated by us",
  "New This Week",
  "Fresh releases",
  "🎬 In Theaters Near You",
  "Current theatrical releases",
  "🎬 Now Playing",
  "Find Showtimes",
  "Click ",
  " to see showtimes at theaters near you",
  "Now Playing",
  "TV Shows Breakdown",
  "Movies Breakdown",
  "Manage shows and movies you",
  ",\r\n    manage_not_interested_list: ",
  ",\r\n\r\n    // Cards / actions\r\n    notes_tags: ",
  ",\r\n    mark_watched: ",
  ",\r\n    want_to_watch: ",
  ",\r\n    remove: ",
  ",\r\n    your_rating: ",
  ",\r\n    not_interested: ",
  ",\r\n    add: ",
  ",\r\n    more_actions: ",
  ",\r\n    continue: ",
  ",\r\n    available_on: ",
  ",\r\n    watch_on: ",
  ",\r\n    upgrade_to_reveal: ",
  ",\r\n    upgrade_to_watch: ",
  ",\r\n    extras: ",
  ",\r\n    already_in_list: ",
  ",\r\n    moved_to: ",
  ",\r\n    added_to: ",
  ",\r\n\r\n    // Curated homepage\r\n    trending_title: ",
  ",\r\n    trending_subtitle: ",
  ",\r\n    staff_picks_title: ",
  ",\r\n    staff_picks_subtitle: ",
  ",\r\n    new_this_week_title: ",
  ",\r\n    new_this_week_subtitle: ",
  ",\r\n\r\n    // Additional home content keys\r\n    personalized_recommendations: ",
  ",\r\n    based_on_watching_history: ",
  ",\r\n    your_anime_suggestions: ",
  ",\r\n    your_horror_suggestions: ",
  ",\r\n    your_suggestions: ",
  ",\r\n    in_theaters_near_you: ",
  ",\r\n    current_theatrical_releases: ",
  ",\r\n    now_playing: ",
  ",\r\n    find_showtimes: ",
  ",\r\n    click_find_showtimes: ",
  ",\r\n    now_playing_status: ",
  ",\r\n    movies_count: ",
  ",\r\n\r\n    // Discovery / recommendations\r\n    discover_description: ",
  ",\r\n    not_enough_signals: ",
  ",\r\n    recommendations_failed: ",
  ",\r\n\r\n    // FlickWord\r\n    flickword_title: ",
  ",\r\n    flickword_play: ",
  ",\r\n    flickword_streak: ",
  ",\r\n    flickword_best: ",
  ",\r\n    flickword_played: ",
  ",\r\n    flickword_daily_challenge: ",
  ",\r\n    hours_left_motivation: ",
  "s game!",
  "Play Today",
  ",\r\n    streak: ",
  ",\r\n    best: ",
  ",\r\n    played: ",
  ",\r\n\r\n    // Quotes\r\n    quote_title: ",
  ",\r\n    quote_of_the_day: ",
  ",\r\n    random_quote: ",
  ",\r\n    quote_1: ",
  "I am serious... and don\\",
  " — *Airplane!*",
  "Streaming is a lifestyle, not a choice.",
  ",\r\n    quote_3: ",
  "Binge now. Cry later.",
  ",\r\n    quote_4: ",
  "One does not simply watch one episode.",
  ",\r\n    quote_5: ",
  "You had me at \\",
  ",\r\n    quote_6: ",
  "Art is long, episodes are longer.",
  ",\r\n    quote_7: ",
  "We were on a break! From reality.",
  ",\r\n    quote_8: ",
  "I came, I saw, I queued it.",
  ",\r\n    quote_9: ",
  "To stream, perchance to nap.",
  "s cut)",
  "In this house we respect the \\",
  " prompt.",
  ",\r\n    quote_11: ",
  "The algorithm thinks I\\",
  "s right.",
  ",\r\n    quote_12: ",
  "If found, return to the couch.",
  ",\r\n    quote_13: ",
  "My love language is \\",
  ",\r\n    quote_14: ",
  "I contain multitudes and several watchlists.",
  ",\r\n    quote_15: ",
  "Sundays are for pilots and denial.",
  ",\r\n    quote_16: ",
  "Ctrl+Z for life, play for comfort.",
  ",\r\n    quote_17: ",
  "I fear no man, but I fear finales.",
  ",\r\n    quote_18: ",
  "This app gets me. Terrifying.",
  ",\r\n    quote_19: ",
  "Plot holes are just cardio for the brain.",
  ",\r\n    quote_20: ",
  "We accept the dopamine we think we deserve.",
  ",\r\n    quote_21: ",
  "I have never finished anything. Except seasons.",
  ",\r\n    quote_22: ",
  ",\r\n    quote_23: ",
  "Foreshadowing? I hardly know her.",
  ",\r\n    quote_24: ",
  "Character development is my cardio.",
  ",\r\n    quote_25: ",
  "If the title card hits, I\\",
  ",\r\n    quote_26: ",
  "Minimalism, but for episodes.",
  ",\r\n    quote_27: ",
  "Are you still watching?",
  "m thriving.\\",
  ",\r\n    quote_28: ",
  "I ship productivity with naps.",
  ",\r\n    quote_29: ",
  "Comfort show supremacy.",
  ",\r\n    quote_30: ",
  "This queue is a personality test I\\",
  ",\r\n\r\n    // Notifications / toasts\r\n    notification_success: ",
  ",\r\n    notification_error: ",
  ",\r\n    notification_warning: ",
  ",\r\n    notification_info: ",
  ",\r\n\r\n    // Cloud / offline\r\n    cloud_sync_ok: ",
  ",\r\n    cloud_load_failed: ",
  ",\r\n    cloud_sync_failed: ",
  ",\r\n    offline_mode: ",
  ",\r\n    auth_unavailable_offline: ",
  ",\r\n    working_offline_mode: ",
  ",\r\n\r\n    // Auth & onboarding\r\n    sign_in_title: ",
  ",\r\n    sign_in_subtitle: ",
  ",\r\n    sign_in_create_account: ",
  ",\r\n    signing_in: ",
  ",\r\n    sign_in_subtitle_text: ",
  ",\r\n    please_enter_display_name: ",
  ",\r\n    welcome_title: ",
  ",\r\n    welcome_subtitle: ",
  ",\r\n    welcome: ",
  ",\r\n    display_name: ",
  ",\r\n    display_name_placeholder: ",
  ",\r\n    save_name: ",
  ",\r\n    sign_in_account: ",
  ",\r\n    account: ",
  ",\r\n    user: ",
  ",\r\n    email_signin: ",
  ",\r\n    email_label: ",
  ",\r\n    continue_google: ",
  ",\r\n    click_to_sign_in: ",
  ",\r\n    signed_in_as: ",
  ",\r\n    click_to_sign_out: ",
  ",\r\n    click_to_log_out: ",
  ",\r\n    sign_out: ",
  ",\r\n    sign_out_confirmation: ",
  ",\r\n    signed_in_successfully: ",
  ",\r\n    signed_out_successfully: ",
  ",\r\n    sign_out_failed: ",
  ",\r\n\r\n    // Auth errors\r\n    auth_system_unavailable: ",
  ",\r\n    error_loading_user_data: ",
  ",\r\n    auth_system_error: ",
  ",\r\n    firestore_not_available: ",
  ",\r\n    no_displayname_field: ",
  ",\r\n    auth_system_loading: ",
  ",\r\n    google_signin_unavailable: ",
  ",\r\n    apple_signin_unavailable: ",
  ",\r\n    email_signin_unavailable: ",
  ",\r\n    unable_to_show_signin: ",
  ",\r\n    signin_system_not_ready: ",
  ",\r\n\r\n    // Genres\r\n    action: ",
  ",\r\n    adventure: ",
  ",\r\n    animation: ",
  ",\r\n    comedy: ",
  ",\r\n    crime: ",
  ",\r\n    documentary: ",
  ",\r\n    drama: ",
  ",\r\n    family: ",
  ",\r\n    fantasy: ",
  ",\r\n    history: ",
  ",\r\n    horror: ",
  ",\r\n    music: ",
  ",\r\n    mystery: ",
  ",\r\n    romance: ",
  ",\r\n    science_fiction: ",
  ",\r\n    tv_movie: ",
  ",\r\n    thriller: ",
  ",\r\n    war: ",
  ",\r\n    western: ",
  ",\r\n    action_adventure: ",
  ",\r\n    kids: ",
  ",\r\n    news: ",
  ",\r\n    reality: ",
  ",\r\n    sci_fi_fantasy: ",
  ",\r\n    soap: ",
  ",\r\n    talk: ",
  ",\r\n    war_politics: ",
  ",\r\n    talk_show: ",
  ",\r\n    reality_tv: ",
  ",\r\n\r\n    // Language change message\r\n    language: ",
  ",\r\n    language_changed_to: ",
  ",\r\n\r\n    // Home sections (grouped)\r\n    ",
  "My Library",
  "home.my_library_sub",
  "Your personal watchlists and progress",
  "home.community",
  "home.community_sub",
  "Spotlight videos and community games",
  "home.curated",
  "home.curated_sub",
  "Trending shows and staff recommendations",
  "home.personalized",
  "home.personalized_sub",
  "Recommendations just for you",
  "home.theaters",
  "In Theaters Near Me",
  "home.theaters_sub",
  ",\r\n    ",
  "home.feedback_link_sub",
  "Help us improve Flicklet",
  "Have thoughts to share? We",
  ",\r\n\r\n    // Trivia\r\n    trivia_title: ",
  ",\r\n    trivia_next: ",
  ",\r\n    trivia_loading: ",
  ",\r\n    trivia_error: ",
  ",\r\n    trivia_correct: ",
  ",\r\n    trivia_incorrect: ",
  ",\r\n    trivia_question: ",
  ",\r\n    trivia_answer: ",
  ",\r\n    trivia_completed_today: ",
  ",\r\n    trivia_come_back_tomorrow: ",
  ",\r\n    trivia_incorrect_answer: ",
  ",\r\n    trivia_streak_up: ",
  ",\r\n    trivia_try_again_tomorrow: ",
  ",\r\n    trivia_ok: ",
  ",\r\n  },\r\n\r\n  es: {\r\n    // Theme / UI toggles\r\n    go_dark: ",
  ",\r\n    go_light: ",
  ",\r\n\r\n    // App identity\r\n    app_title: ",
  ",\r\n    subtitle: ",
  ",\r\n\r\n    // High-level stats / sections\r\n    binge_total: ",
  ",\r\n    currently_watching: ",
  ",\r\n    already_watched: ",
  ",\r\n    currently_airing: ",
  ",\r\n    series_complete: ",
  ",\r\n    coming_soon: ",
  ",\r\n    next: ",
  ",\r\n    last: ",
  ",\r\n    start: ",
  ",\r\n    because_you_liked: ",
  ",\r\n\r\n    // Global navigation\r\n    home: ",
  ",\r\n    discover: ",
  ",\r\n    settings: ",
  ",\r\n\r\n    // Settings tabs + descriptions\r\n    general: ",
  ",\r\n    notifications: ",
  ",\r\n    layout: ",
  ",\r\n    data: ",
  ",\r\n    pro: ",
  ",\r\n    about: ",
  ",\r\n    general_description: ",
  ",\r\n    notifications_description: ",
  ",\r\n\r\n    // Pro preview\r\n    preview_pro_features: ",
  ",\r\n    pro_hint: ",
  ",\r\n    search_tips:\r\n      ",
  ",\r\n    currently_watching_section: ",
  ",\r\n    next_up_this_week: ",
  ",\r\n    no_upcoming_episodes: ",
  ",\r\n    win_percent: ",
  ",\r\n    accuracy: ",
  ",\r\n    curated_sections: ",
  ",\r\n    location_prompt: ",
  ",\r\n    share_your_thoughts: ",
  ",\r\n    help_improve_feedback: ",
  ",\r\n    close_game: ",
  ",\r\n    no_items: ",
  ",\r\n    no_description: ",
  ",\r\n    unknown: ",
  ",\r\n\r\n    // Additional critical translations\r\n    loading_stats: ",
  ",\r\n    core_features: ",
  ",\r\n    pro_notifications: ",
  ",\r\n    pro_layout_features: ",
  ",\r\n    pro_data_features: ",
  ",\r\n    theme_packs: ",
  ",\r\n    about_unique4u: ",
  ",\r\n    about_the_creators: ",
  ",\r\n    about_the_app: ",
  ",\r\n    copy: ",
  ",\r\n    daily_trivia_game_mounts: ",
  ",\r\n    enable_advanced_notifications: ",
  ",\r\n    lead_time_hours: ",
  ",\r\n    monitor_lists: ",
  ",\r\n    pro_feature_upgrade:\r\n      ",
  ",\r\n    pro_unlocks_more_themes: ",
  ",\r\n    saved: ",
  ",\r\n    enable_episode_tracking: ",
  ",\r\n    theme: ",
  ",\r\n    basic_layout_customization:\r\n      ",
  ",\r\n    show_more_items_per_screen:\r\n      ",
  ",\r\n    display_poster_images:\r\n      ",
  ",\r\n    switch_to_dark_theme:\r\n      ",
  ",\r\n    basic_data_management:\r\n      ",
  ",\r\n    restore_your_data:\r\n      ",
  ",\r\n    export_your_data_csv:\r\n      ",
  ",\r\n    everything_we_build:\r\n      ",
  ",\r\n    were_pam_and_travis:\r\n      ",
  "creativo se encuentra con operaciones",
  ",\r\n    heres_the_deal:\r\n      ",
  "pensamientos del episodio 7 de mitad de temporada.",
  "No me interesa",
  ",\r\n    receive_weekly_recommendations:\r\n      ",
  ",\r\n    get_a_monthly_summary:\r\n      ",
  ",\r\n    advanced_notification_features: ",
  ",\r\n    advanced_notifications_pro: ",
  ",\r\n    configure_advanced_notifications:\r\n      ",
  ",\r\n    range_1_3: ",
  ",\r\n    range_5_20: ",
  ",\r\n\r\n    // Home content sections\r\n    personalized_recommendations: ",
  ",\r\n    trending: ",
  ",\r\n    what_everyone_watching: ",
  ",\r\n    staff_picks: ",
  ",\r\n    curated_by_us: ",
  ",\r\n    new_this_week: ",
  ",\r\n    fresh_releases: ",
  "Encontrar Horarios",
  ",\r\n\r\n    // Additional missing keys\r\n    what_everyone_watching: ",
  ",\r\n    tv_shows_breakdown: ",
  ",\r\n    movies_breakdown: ",
  ",\r\n    not_interested_management: ",
  ",\r\n    manage_not_interested_description:\r\n      ",
  ",\r\n    not_enough_signals:\r\n      ",
  ",\r\n    play_todays_word: ",
  "Soy serio... y no me llames Shirley.",
  ",\r\n    quote_2: ",
  "El streaming es un estilo de vida, no una opción.",
  "Maratón ahora. Llora después.",
  "Uno no simplemente ve un episodio.",
  "Me conquistaste con \\",
  "El arte es largo, los episodios son más largos.",
  "¡Estábamos en un descanso! De la realidad.",
  "Vine, vi, lo puse en cola.",
  "Transmitir, tal vez dormitar.",
  ",\r\n    quote_10: ",
  "En esta casa respetamos el aviso \\",
  "El algoritmo piensa que soy complicado. Tiene razón.",
  "Si se encuentra, devolver al sofá.",
  "Mi lenguaje del amor es \\",
  "Contengo multitudes y varias watchlists.",
  "Los domingos son para pilotos y negación.",
  "Ctrl+Z para la vida, play para consuelo.",
  "No temo a ningún hombre, pero temo a los finales.",
  "Esta app me entiende. Aterrador.",
  "Los agujeros de guión son cardio para el cerebro.",
  "Aceptamos la dopamina que creemos merecer.",
  "Nunca he terminado nada. Excepto temporadas.",
  "Vibe de hoy: subtítulos y snacks.",
  "¿Presagio? Apenas la conozco.",
  "El desarrollo de personajes es mi cardio.",
  "Si la tarjeta de título pega, me quedo.",
  "Minimalismo, pero para episodios.",
  "¿Sigues viendo?\\",
  "Envío productividad con siestas.",
  "Supremacía de serie de consuelo.",
  "Esta cola es una prueba de personalidad que estoy fallando.",
  ",\r\n    working_offline_mode:\r\n      ",
  ",\r\n    sign_in_subtitle_text:\r\n      ",
  ",\r\n\r\n    // Auth errors\r\n    auth_system_unavailable:\r\n      ",
  ",\r\n    auth_system_loading:\r\n      ",
  ",\r\n    google_signin_unavailable:\r\n      ",
  ",\r\n    apple_signin_unavailable:\r\n      ",
  ",\r\n    email_signin_unavailable:\r\n      ",
  ",\r\n    unable_to_show_signin:\r\n      ",
  ",\r\n    signin_system_not_ready:\r\n      ",
  "Mi Biblioteca",
  "Tus listas de seguimiento y progreso personal",
  "Videos destacados y juegos de la comunidad",
  "Series populares y recomendaciones del equipo",
  "Recomendaciones solo para ti",
  "En Cines Cerca de Mí",
  "Qué se está proyectando en tus cines locales",
  "home.feedback_link",
  "Ayúdanos a mejorar Flicklet",
  "¿Tienes pensamientos que compartir? ¡Nos encantaría escucharlos!",
  "Cargando...",
  "Error al cargar trivia",
  "¡Correcto!",
  " • Completado hoy",
  "Vuelve mañana para una nueva pregunta.",
  "No — la respuesta correcta es",
  "Trivia: +1 racha",
  "Trivia: intenta de nuevo mañana",
  ",\r\n  },\r\n};\r\n\r\n// Translation function: strict fallback to EN if missing\r\nfunction t(key, lang = ",
  "));\r\n      const val = t(key, lang);\r\n      if (val && val !== key) fn(el, val);\r\n    });\r\n  };\r\n\r\n  apply(",
  ", (el, val) => {\r\n    // Skip marquee elements to prevent overwriting quotes\r\n    if (el.hasAttribute(",
  ") && el.getAttribute(",
  ") === ",
  ") {\r\n      return;\r\n    }\r\n    el.textContent = val;\r\n  });\r\n  apply(",
  ", (el, val) => {\r\n    el.placeholder = val;\r\n  });\r\n  apply(",
  ", (el, val) => {\r\n    el.title = val;\r\n  });\r\n  apply(",
  ", (el, val) => {\r\n    el.setAttribute(",
  ", val);\r\n  });\r\n}\r\n\r\n// Expose globally\r\nif (typeof window !== ",
  "📨 Iframe Auth Helper initializing...",
  "✅ Iframe Auth Helper ready",
  "📨 Requesting ${provider} auth from parent${method ? ",
  ");\r\n\r\n      const message = {\r\n        type: ",
  ");\r\n      } else {\r\n        console.warn(",
  ");\r\n      googleBtns.forEach((btn) => {\r\n        btn.addEventListener(",
  ", (e) => {\r\n          e.preventDefault();\r\n          this.requestAuth(",
  ");\r\n        });\r\n      });\r\n\r\n      // Handle Apple auth requests\r\n      const appleBtns = document.querySelectorAll(",
  ");\r\n      appleBtns.forEach((btn) => {\r\n        btn.addEventListener(",
  ");\r\n        });\r\n      });\r\n\r\n      // Handle Email auth requests\r\n      const emailBtns = document.querySelectorAll(",
  ");\r\n      emailBtns.forEach((btn) => {\r\n        btn.addEventListener(",
  ");\r\n      signInBtns.forEach((btn) => {\r\n        btn.addEventListener(",
  ";\r\n\r\n      prompt.innerHTML = ",
  ">\r\n          <h3 style=",
  ">Sign in to save progress</h3>\r\n          <p style=",
  ">Choose your preferred sign-in method:</p>\r\n          <div style=",
  ">\r\n            <button onclick=",
  ">Continue with Google</button>\r\n            <button onclick=",
  ">Continue with Apple</button>\r\n            <button onclick=",
  ">Continue with Email</button>\r\n          </div>\r\n          <button onclick=",
  ".iframe-auth-prompt",
  ">Cancel</button>\r\n        </div>\r\n      ",
  "✅ Auth success in iframe:",
  "👋 Auth sign out in iframe",
  "❌ Auth error in iframe:",
  "Authentication failed",
  ");\r\n      signInElements.forEach((el) => {\r\n        el.style.display = ",
  ";\r\n      });\r\n\r\n      // Show sign-out buttons\r\n      const signOutElements = document.querySelectorAll(",
  ");\r\n      signOutElements.forEach((el) => {\r\n        el.style.display = ",
  ";\r\n      });\r\n\r\n      // Hide sign-out buttons\r\n      const signOutElements = document.querySelectorAll(",
  "Failed to get stored language:",
  "🌍 Language saved to storage:",
  "❌ Failed to save language:",
  "🌍 Triggering language change event:",
  "🔄 Refreshing TMDB data for language:",
  "✅ TMDB data refreshed for language:",
  "❌ Failed to refresh TMDB data:",
  ";\r\n    this.observers = [];\r\n\r\n    // Don",
  "🌍 Language loaded from appData:",
  "🌍 Language loaded from localStorage:",
  ";\r\n        this.saveLanguage(",
  "🌍 LanguageManager initialized with language:",
  "🌍 changeLanguage called with:",
  "🌍 Language change already in progress, ignoring",
  "🌍 Language already set to:",
  "🌍 Changing language from",
  "🌍 Updated currentLang to:",
  "🌍 Calling applyTranslations with:",
  "🌍 Calling updateLanguageDependentUI with:",
  "✅ Language change completed successfully",
  "❌ Language change failed:",
  "<div style=",
  ", lang)}</div>",
  "🌍 Cards rendered, applying translations",
  "🌍 Applying translations after content re-render",
  "🌍 Delayed translation application",
  "🔄 Starting complex rehydration for language:",
  "🔄 Refreshing genres",
  "🔄 Force re-rendering all home content",
  "✅ Complex rehydration completed",
  "❌ Failed to rehydrate lists for locale:",
  "🔄 Refreshing Currently Watching metadata for language:",
  "🔄 No appData available for metadata refresh",
  "🔄 Updated TV item metadata:",
  "🔄 Failed to update TV item metadata:",
  "🔄 Updated movie item metadata:",
  "🔄 Failed to update movie item metadata:",
  "✅ Currently Watching metadata refreshed successfully",
  "❌ Failed to refresh Currently Watching metadata:",
  "🔄 Refreshing curated rows for language change",
  "🗑️ Cleared ${key} cache",
  "🔄 Re-rendering home rails with new language",
  "🔄 Re-rendering curated rows with new language",
  "🔄 Refreshing trivia content",
  "✅ Trivia refresh completed",
  "❌ Trivia refresh failed:",
  "🔄 Refreshing series organizer",
  "✅ Series organizer refresh completed",
  "❌ Series organizer refresh failed:",
  "🔄 Refreshing upcoming episodes content",
  "🔄 Refreshing daily countdown",
  "🔄 Refreshing FlickWord stats",
  "🔄 Refreshing spotlight content",
  "🔄 Search results visible, re-performing search in new language",
  "🗑️ Clearing search cache for language change",
  "🔍 Re-performing search with query:",
  ">\r\n          <p>${t(",
  ", lang)}</p>\r\n          <p>${t(",
  ", lang)}</p>\r\n        </div>",
  "❌ Observer callback failed:",
  "🌍 Re-initializing LanguageManager after appData load",
  "🌍 Language changed from",
  ";\r\n    let message = t(",
  ", lang);\r\n\r\n    // Replace placeholder if it exists\r\n    if (message && message.includes(",
  ")) {\r\n      message = message.replace(",
  ", langName);\r\n    } else {\r\n      message = ",
  ";\r\n    }\r\n\r\n    if (typeof window.showNotification === ",
  ") {\r\n      window.showNotification(message, ",
  ");\r\n    } else {\r\n      console.log(",
  "🌍 Language Manager loaded",
  "#appRoot > #search-container.top-search, #appRoot > .top-search",
  ");\r\n    } else {\r\n      root.classList.remove(",
  ");\r\n      root.style.removeProperty(",
  ");\r\n    }\r\n  }\r\n\r\n  document.addEventListener(",
  ", apply);\r\n  window.addEventListener(",
  ", apply);\r\n\r\n  /* If app code toggles the search region, emit one of these events */\r\n  for (const eventName of [",
  "🔧 Layout Enhancements loaded",
  ".skeleton-content, .skeleton-poster, .skeleton-text, .skeleton-button",
  ">\r\n              <div class=",
  "></div>\r\n              <div class=",
  "></div>\r\n            </div>\r\n          ",
  "></div>\r\n          ",
  ".preview-row-scroll",
  ".show-poster, .poster-placeholder, .preview-card-poster img",
  "2 / 3",
  ".skip-link",
  "s not visible\r\n        target.scrollIntoView({ behavior: ",
  ", block: ",
  "Skipped to ${target.getAttribute(",
  ") || target.textContent || ",
  "🔧 Initializing layout enhancements...",
  "✅ Layout enhancements initialized",
  "s a card that needs skeleton loading\r\n              if (node.classList && node.classList.contains(",
  ")) {\r\n                // Show skeleton while content loads\r\n                SkeletonManager.showSkeleton(node, ",
  "#homeSection, .list-container, .preview-row-scroll, .tab-section",
  "quips fetch failed: ${res.status}",
  "bad quips payload",
  "no usable quips",
  ") || document.querySelector(",
  ");\r\n    if (el) {\r\n      el.removeAttribute(",
  "); // prevent i18n from stomping\r\n      el.dataset.role = el.dataset.role || ",
  ";\r\n      el.classList.add(",
  ".marquee-container, .marquee, .home-group, main, body",
  "12s, 12s",
  ")[0].trim();\r\n    if (first.endsWith(",
  ")) return parseFloat(first);\r\n    if (first.endsWith(",
  ",\r\n      ",
  ",\r\n    ];\r\n\r\n    return container.querySelectorAll(focusableSelectors.join(",
  "🔒 [MODAL] Closing modal:",
  "🔒 [MODAL] Focus restored to:",
  "❌ [MODAL] Modal not found:",
  "🔒 [MODAL] Opening modal:",
  "[MODAL] isOpen(${modalId}): false - no active modal",
  "[MODAL] isOpen(${modalId}): false - no modal element",
  "s not aria-hidden and has a visible display style\r\n      const isAriaHidden = modalElement.getAttribute(",
  ";\r\n      const hasVisibleDisplay =\r\n        modalElement.style.display === ",
  " || modalElement.style.display === ",
  ";\r\n\r\n      const isOpen = !isAriaHidden && hasVisibleDisplay;\r\n      console.log(",
  "[MODAL] Force closing modal: ${modalId}",
  "✅ [MODAL] Modal utility loaded",
  "📺 Episode Guide Modal loaded",
  "s a TV show\r\n    if (item.media_type !== ",
  " && !item.first_air_date) {\r\n      showToast(",
  "Not Available",
  "Episode guide is only available for TV shows",
  "modal modal--episode-guide",
  "Unknown Show",
  ">\r\n        <h3 class=",
  ">Episode Guide - ${showTitle}</h3>\r\n        <button class=",
  ">×</button>\r\n      </div>\r\n      <div class=",
  ">\r\n          <div class=",
  ">\r\n            <label for=",
  ">Season:</label>\r\n            <select id=",
  ">\r\n              <option value=",
  ">Loading seasons...</option>\r\n            </select>\r\n          </div>\r\n          <div class=",
  ">Loading episodes...</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=",
  ">\r\n        <button class=",
  ">Cancel</button>\r\n        <button class=",
  ">Save Progress</button>\r\n      </div>\r\n    ",
  ".modal__cancel",
  "Progress Saved",
  "Your episode progress has been saved",
  ");\r\n\r\n      if (!showData || !showData.id) {\r\n        throw new Error(",
  "<option value=",
  ">Select a season...</option>",
  "Season ${season.season_number}",
  ";\r\n          await loadEpisodesForSeason(showId, ",
  ", episodeList);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(",
  ", error);\r\n      episodeList.innerHTML =\r\n        ",
  ">Loading episodes...</div>",
  "Failed to load episodes",
  ">No episodes found for this season.</div>",
  ">S${seasonNumber}E${episode.episode_number}</div>\r\n            <div class=",
  ">${episode.name || ",
  "}</div>\r\n            <div class=",
  ">${airDate}</div>\r\n            <div class=",
  ">${episode.vote_average ? ",
  "}</div>\r\n            <label class=",
  ">\r\n              <input type=",
  " ${isWatched ? ",
  "} data-episode=",
  ">\r\n              <span class=",
  ">Watched</span>\r\n            </label>\r\n          </div>\r\n        ",
  ");\r\n      checkboxes.forEach((checkbox) => {\r\n        checkbox.addEventListener(",
  ".episode-guide__episode",
  "Failed to load episodes:",
  ">Failed to load episodes. Please try again.</div>",
  "Failed to load user progress:",
  "Failed to save user progress:",
  "Toast [${type}]: ${title} - ${message}",
  "✅ Episode Guide Modal ready",
  "📝 Notes Modal loaded",
  "modal modal--notes",
  ">Notes for ${itemTitle}</h3>\r\n        <button class=",
  ">\r\n          <label for=",
  ">Your notes:</label>\r\n          <textarea \r\n            id=",
  " \r\n            class=",
  " \r\n            placeholder=",
  "\r\n            rows=",
  "\r\n          >${existingNotes}</textarea>\r\n          <div class=",
  ">0</span> characters\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=",
  ">Save Notes</button>\r\n      </div>\r\n    ",
  "Save Notes",
  "Clear Notes",
  "No Changes",
  "Notes saved for ${itemTitle}",
  "Notes Cleared",
  "Notes cleared for ${itemTitle}",
  ";\r\n    } catch (error) {\r\n      console.error(",
  ", error);\r\n      return ",
  ");\r\n\r\n    cards.forEach((card) => {\r\n      let indicator = card.querySelector(",
  ");\r\n\r\n      if (hasNotes && !indicator) {\r\n        // Add indicator\r\n        indicator = document.createElement(",
  ");\r\n        indicator.className = ",
  ";\r\n        indicator.title = ",
  ";\r\n        indicator.textContent = ",
  ";\r\n\r\n        const poster = card.querySelector(",
  "✅ Notes Modal ready",
  "], nav[role=",
  ");\r\n  if (!bar) {\r\n    console.warn(",
  ");\r\n    return;\r\n  }\r\n\r\n  // Discover panels by ID; adjust list only if needed\r\n  const panelIds = [",
  "),\r\n    ...document.querySelectorAll(",
  ")\r\n  ].filter(t => {\r\n    const isDisabled = t.getAttribute(",
  ";\r\n    const hasPanel = panels.has(t.getAttribute(",
  "));\r\n    return !isDisabled && hasPanel;\r\n  });\r\n  console.log(",
  ", allTabs.map(t => ({\r\n    id: t.id,\r\n    ariaControls: t.getAttribute(",
  "),\r\n    ariaDisabled: t.getAttribute(",
  "),\r\n    ariaSelected: t.getAttribute(",
  "),\r\n    hasPanel: panels.has(t.getAttribute(",
  "))\r\n  })));\r\n  \r\n  // Debug: Check if settings tab exists in DOM\r\n  const settingsTab = document.getElementById(",
  ");\r\n  console.log(",
  ", {\r\n    exists: !!settingsTab,\r\n    role: settingsTab?.getAttribute(",
  "),\r\n    ariaDisabled: settingsTab?.getAttribute(",
  "),\r\n    ariaControls: settingsTab?.getAttribute(",
  ")];\r\n  console.log(",
  ", allTabsInBar.map(t => ({\r\n    id: t.id,\r\n    role: t.getAttribute(",
  "),\r\n    ariaControls: t.getAttribute(",
  ")\r\n  })));\r\n  \r\n  const tabs = allTabs.filter(t => panels.has(t.getAttribute(",
  ")));\r\n  \r\n  // Debug: Log filtered tabs\r\n  console.log(",
  ", tabs.map(t => ({\r\n    id: t.id,\r\n    ariaControls: t.getAttribute(",
  ".fab-dock",
  "[nav-init] Refreshing tab discovery after authentication...",
  "[nav-init] Settings tab during refresh:",
  ")];\r\n    console.log(",
  ", allTabsInBarRefresh.map(t => ({\r\n      id: t.id,\r\n      role: t.getAttribute(",
  "),\r\n      ariaDisabled: t.getAttribute(",
  "),\r\n      ariaControls: t.getAttribute(",
  ")\r\n    })));\r\n    \r\n    const newTabs = [\r\n      ...bar.querySelectorAll(",
  "),\r\n      ...document.querySelectorAll(",
  ")\r\n    ].filter(t => {\r\n      const isDisabled = t.getAttribute(",
  ";\r\n      const hasPanel = panels.has(t.getAttribute(",
  "));\r\n      return !isDisabled && hasPanel;\r\n    });\r\n    console.log(",
  ", newTabs.map(t => ({\r\n      id: t.id,\r\n      ariaControls: t.getAttribute(",
  "),\r\n      ariaSelected: t.getAttribute(",
  "[nav-init] Tab discovery refreshed. Total tabs:",
  ".tab-label",
  ".badge",
  ");\r\n    const activePanel = document.querySelector(",
  "[nav-init] State mismatch:",
  ")];\r\n    const panels = tabs.map(t => document.getElementById(t.getAttribute(",
  "))).filter(Boolean);\r\n    \r\n    const selectedTabs = tabs.filter(t => t.getAttribute(",
  "Exactly one tab should be selected, found:",
  "Exactly one panel should be visible, found:",
  "[nav-init] Tab state assertion failed:",
  "FAB X position changed:",
  ", lastX);\r\n        console.assert(rect.y.toString() === lastY, ",
  ", rect.y, ",
  ");\r\n    if (currentActive && currentActive.getAttribute(",
  ") === id) {\r\n      console.log(",
  ", id);\r\n      return;\r\n    }\r\n\r\n    console.log(",
  ", id);\r\n    console.log(",
  ", Array.from(panels.keys()));\r\n    console.log(",
  ", tabs.map(t => t.getAttribute(",
  ";\r\n      } else {\r\n        console.warn(",
  "[nav-init] Unknown tab ID:",
  ").trim();\r\n    document.body.classList.add(",
  ");\r\n\r\n    // Handle search visibility based on tab policy\r\n    const searchAllowedTabs = [",
  "[nav-init] Loading content for tab:",
  "[nav-init] Tab activation completed in ${(endTime - startTime).toFixed(2)}ms",
  "[nav-init] Activated initial tab:",
  "[nav-init] Activated fallback tab:",
  ")) {\r\n      return; // Don",
  ");\r\n    if (!tab) return;\r\n\r\n    ev.preventDefault();\r\n    const id = tab.getAttribute(",
  ");\r\n    if (panels.has(id)) {\r\n      activate(id);\r\n      console.log(",
  ", id);\r\n    }\r\n  }, { capture: true });\r\n\r\n  // Arrow navigation for accessibility\r\n  bar.addEventListener(",
  ", ev => {\r\n    const tab = ev.target.closest(",
  ");\r\n    if (!tab) return;\r\n\r\n    const enabledTabs = [...bar.querySelectorAll(",
  ")];\r\n    const i = enabledTabs.indexOf(tab);\r\n    if (ev.key === ",
  "[nav-init] Tab navigation initialized with",
  "s the primary system\r\nif (document.readyState === ",
  "[nav-init] Legacy systems neutered, initializing primary tab engine",
  "Initializing notification system...",
  "Notification system initialized",
  "Showing notification:",
  "notification ${type}",
  ">\r\n          <span class=",
  ">${icon}</span>\r\n          <span class=",
  ">${this._escapeHtml(message)}</span>\r\n          <button class=",
  ">&times;</button>\r\n        </div>\r\n      ",
  ",\r\n        error: ",
  ",\r\n        warning: ",
  ",\r\n        info: ",
  "Notification system loaded",
  "\r\n    <div class=",
  ">\r\n      <img class=",
  ">\r\n    </div>\r\n    <div class=",
  ">\r\n      <div class=",
  ">${escapeHtml(item.title || item.name || ",
  ")}</div>\r\n      <div class=",
  ">Want to Watch</button>\r\n        <button class=",
  ">Watched</button>\r\n        <button class=",
  ">Not Interested</button>\r\n        <button class=",
  ">Delete</button>\r\n      </div>\r\n    </div>\r\n  ",
  ".poster-wrap",
  ".btn-want",
  "[cw-card] want",
  ".btn-watched",
  "[cw-card] watched",
  ".btn-notint",
  "[cw-card] not-interested",
  ".btn-delete",
  "[cw-card] delete",
  ",\r\n      title: show.title || show.name || ",
  ",\r\n      poster: show.posterUrl || (show.poster_path ? ",
  "),\r\n      releaseDate: show.release_date || show.first_air_date || ",
  ",\r\n      genre: (show.genres && show.genres[0]?.name) || ",
  ",\r\n      seasonEpisode: calcSxxExx(show) || ",
  ",\r\n      nextAirDate: air.date || air.label || ",
  "\r\n    };\r\n    \r\n    return window.renderCardV2(container, props, {\r\n      listType: ",
  ",\r\n      context: ",
  "\r\n    });\r\n  }\r\n\r\n  // Legacy fallback\r\n  const card = document.createElement(",
  ");\r\n  card.className = ",
  ";\r\n  card.dataset.id = show.id;\r\n\r\n  const sxxexx = calcSxxExx(show) || ",
  ";\r\n  const genre = (show.genres && show.genres[0]?.name) ? show.genres[0].name : ",
  ";\r\n\r\n  card.innerHTML = ",
  "${escapeHtml(show.title || show.name || ",
  ">${[sxxexx, genre].filter(Boolean).join(",
  ">${escapeHtml(air.label)}</div>\r\n    </div>\r\n  ",
  ",\r\n      overview: item.overview || ",
  ",\r\n      genre: item.genre || (item.genres && item.genres[0]?.name) || ",
  ",\r\n      tmdbId: item.tmdbId || item.id,\r\n      whereToWatch: item.whereToWatch || item.provider || ",
  ",\r\n      curatorBlurb: item.curatorBlurb || item.description || ",
  "\r\n    };\r\n\r\n    if (variant === ",
  ") {\r\n      props.variant = ",
  "curated-card v2 ${variant === ",
  "✅ Card V2 curated renderer loaded",
  ",\r\n      title: item.title || item.name || ",
  ",\r\n      poster: item.poster_path ? ",
  "),\r\n      releaseDate: item.release_date || item.first_air_date || ",
  ",\r\n      seasonEpisode: item.seasonEpisode || item.sxxExx || ",
  ",\r\n      nextAirDate: item.next_episode_air_date || item.nextAirDate || item.next_air_date || ",
  ",\r\n      userRating: item.userRating || item.rating || 0,\r\n      progress: item.progress || ",
  ",\r\n      badges: item.badges || [],\r\n      whereToWatch: item.whereToWatch || ",
  "cw-card v2 ${variant === ",
  "✅ Card V2 CW renderer loaded",
  "[card-v2] Blocked inline ${property} on Home card - use CSS instead",
  "star ${i <= rating ? ",
  ";\n      star.textContent = ",
  ";\n      star.dataset.rating = i;\n      \n      if (onRatingChange) {\n        star.addEventListener(",
  "(Your rating)",
  "badge ${badge.type || ",
  "[card-v2] formatMeta called with props:",
  "Runtime: ${props.runtime}m",
  "Next: ${props.nextAirDate}",
  " • ",
  "[card-v2] formatMeta result:",
  ";\n    \n    // Determine card type and layout based on design specs\n    const listType = options.listType || ",
  ";\n    const context = options.context || ",
  ";\n    \n    // Design specs: Home sections use vertical, tabs/search use horizontal\n    const isVertical = context === ",
  " && [",
  ");\n    \n    // Card type classes per design specs - context-aware\n    const cardType = (listType === ",
  " && context === ",
  ") ? ",
  " : \n                    (listType === ",
  " :\n                    (listType === ",
  " || listType === ",
  " :\n                    ",
  "; // fallback\n    \n    // Create card element with proper classes\n    const card = document.createElement(",
  "[card-v2] Card type selected: ${cardType}, className: ${card.className}",
  ");\n      posterLink.href = ",
  ";\n      posterLink.target = ",
  ";\n      posterLink.rel = ",
  ";\n      posterLink.title = ",
  ";\n      \n      const img = document.createElement(",
  ";\n    const year = props.releaseDate ? ",
  ";\n    title.textContent = ",
  ";\n    \n    // Create meta information (Genre • SxxExx format)\n    const meta = document.createElement(",
  ");\n    meta.className = ",
  "Up next: <date>",
  "Up next:",
  "Up next: ${props.nextAirDate}",
  "Where to Watch: ${props.whereToWatch}",
  "Progress: ${props.progress}",
  "btn btn--sm btn--secondary",
  "btn btn--sm btn--secondary btn--pro-outline",
  ";\n      dragHandle.title = ",
  ";\n      dragHandle.setAttribute(",
  ";\n    if (item.poster_path) {\n      posterUrl = ",
  "card v2 v2-home-cw preview-card",
  " with-actions",
  ">\n        <img src=",
  " loading=",
  " referrerpolicy=",
  ">\n      </div>\n      <div class=",
  ">${props.title}</h3>\n        ${props.genre ? ",
  "}\n        ${props.nextAirDate ? ",
  "}\n        ${withActions ? ",
  "${props.id}",
  "}\n      </div>\n    ",
  "🎯 renderCuratedCardV2: VERSION 28.500.0 - Function called with:",
  " || item.media_type === ",
  "\n      ? item.media_type\n      : ",
  "; // do NOT guess; empty string if unknown\n\n    const title = item.title || item.name || ",
  ";\n    const posterPath = item.poster_path || item.posterUrl || ",
  ";\n    const releaseDate = item.release_date || item.first_air_date || ",
  ";\n    const poster =\n      posterPath\n        ? (posterPath.startsWith(",
  ")\n            ? posterPath\n            : ",
  ")\n        : (typeof PLACEHOLDER_SVG !== ",
  " ? PLACEHOLDER_SVG : ",
  ",\n      whereToWatch: item.whereToWatch || ",
  ",\n      curatorBlurb: item.curatorBlurb || ",
  "🎯 renderCuratedCardV2: VERSION 28.500.0 - Setting className to: card v2 v2-home-curated curated-card",
  "card v2 v2-home-curated curated-card",
  "🎯 renderCuratedCardV2: VERSION 28.500.0 - Final className:",
  ".unified-card-poster, .unified-card-poster-container, a, header",
  ".ccv2-actions",
  ".actions",
  "],a.button",
  "✅ Card V2 renderer loaded",
  "RTL Scroll Helper initialized",
  ".legacy-up, .up-arrow, .scroll-to-top, .fab .icon-up, .fab-up",
  "Scroll to top",
  ";\n  (document.getElementById(",
  ") || document.body).appendChild(btn);\n  console.log(",
  ", btn);\n\n  // Find the tablist sentinel\n  const tablist = document.querySelector(",
  "Arrow clicked, scrolling to top",
  "Initializing search module...",
  "Required search elements not found",
  "Search module initialized",
  "Event listeners attached",
  "Search button clicked",
  "Clear button clicked",
  "Enter key pressed",
  "No search query provided",
  "Same query already searching, skipping",
  "Performing search for:",
  "searchTMDB function not available",
  "Search results received:",
  "About to call displayResults with:",
  "displayResults completed successfully",
  "Search failed:",
  "Clearing search",
  ";\n    currentQuery = ",
  "Returning to previous tab: ${previousTab}",
  "\n      <div style=",
  ">\n        <div style=",
  ">🔍</div>\n        <div>Searching for ",
  "...</div>\n      </div>\n    ",
  ">❌</div>\n        <div>Search failed: ${message}</div>\n        <button onclick=",
  ">\n          Try Again\n        </button>\n      </div>\n    ",
  "displayResults called with:",
  "ERROR: searchResults element not found",
  "Checking results structure:",
  "No results found, showing no results message",
  "Filtering results, original count:",
  "After filtering, count:",
  "All results filtered out, showing no results message",
  ";\n      const dateB = b.release_date || b.first_air_date || ",
  "Checking card rendering systems:",
  "Using Cards V2 system",
  "Using fallback system",
  "Rendering with Cards V2 system",
  "Cards V2 availability:",
  "\n      <h4>🎯 Search Results <span class=",
  ">${results.length}</span></h4>\n      <div class=",
  "></div>\n    ",
  "ERROR: searchResultsGrid not found!",
  "results...",
  ",\n          overview: item.overview || ",
  ",\n          badges: [{ label: ",
  ", type: ",
  " }],\n          whereToWatch: item.whereToWatch || ",
  "Enhancing search item with detailed TMDB data...",
  "Enhanced search item:",
  "Failed to enhance search item, using original data:",
  "Added card for:",
  "WARNING: renderCardV2 returned null for:",
  "Cards V2 render error:",
  "Cards V2 rendering complete. Grid children:",
  "Error creating V2 card:",
  "Rendering with fallback system",
  ";\n        const mediaType = item.media_type || ",
  ";\n        const poster = item.poster_path\n          ? ",
  ";\n\n        return ",
  "display: flex; align-items: center; padding: 15px; border-bottom: 1px solid #eee; cursor: pointer;",
  "window.SearchModule.openItemDetails(${item.id}, ",
  ">\n          ${\n            poster\n              ? ",
  "width: 60px; height: 90px; object-fit: cover; margin-right: 15px; border-radius: 4px;",
  "flex: 1;",
  "margin: 0 0 5px 0; color: #333; font-size: 16px;",
  "}</h4>\n            <p style=",
  ">${mediaType}</p>\n          </div>\n        </div>\n      ",
  ");\n\n    searchResults.innerHTML = ",
  ">🔍</div>\n        <div>No results found for ",
  "</div>\n        <div style=",
  ">Try different keywords or check your spelling</div>\n      </div>\n    ",
  "Remembered previous tab: ${previousTab}",
  "Hidden tab: ${tabId}Section",
  "Tab section not found: ${tabId}Section",
  "Home section hidden during search",
  ";\n        log(",
  ");\n      }\n    });\n\n    // Clear home section hidden attribute\n    const homeSection = document.getElementById(",
  ");\n    if (homeSection) {\n      homeSection.hidden = false;\n      log(",
  ");\n    }\n\n    log(",
  ");\n  }\n\n  // Open item details\n  function openItemDetails(id, mediaType) {\n    log(",
  ";\r\n    if (window.i18n && typeof window.i18n.setLanguage === ",
  "ui.theme",
  "app.language",
  "ui.mardiGrasOverlay",
  ");\r\n      } catch {}\r\n    });\r\n    lang.__fx = true;\r\n  }\r\n  const mg = document.querySelector(",
  ");\r\n  if (mg && !mg.__fx) {\r\n    mg.addEventListener(",
  ", () => {\r\n      document.body.classList.toggle(",
  "#settingsSection.tab-section:not([hidden])",
  ",\r\n    displayName: ",
  ",\r\n    usernamePrompted: false,\r\n    notif: {\r\n      theme: ",
  "Initializing settings manager",
  "Settings manager initialized",
  "Settings loaded from localStorage:",
  "Failed to load settings from localStorage:",
  "Settings saved to localStorage",
  "Failed to save settings to localStorage:",
  "User signed out - Pro reset to false",
  "Pro status updated from Firebase:",
  "Failed to check Pro status from Firebase:",
  "Setting changed: ${key} = ${value} (was: ${oldValue})",
  "Multiple settings updated:",
  "Emitted settings:changed event:",
  "Settings reset to defaults",
  "notif.episodes",
  "notif.digest",
  "notif.discover",
  "Settings manager module loaded",
  ";\r\n\r\n    // Focus trap\r\n    const focusables = modal.querySelectorAll(\r\n      ",
  ";\r\n    }\r\n  }\r\n\r\n  function init() {\r\n    const btn = document.getElementById(",
  ");\r\n    const close = document.getElementById(",
  ");\r\n    const modal = document.getElementById(",
  "[pro-gate] missing control",
  "Pro feature",
  "flicklet:pro.enabled",
  "[settings-bind] Missing control for selector:",
  "[settings-renderer] initSettings called",
  "[settings-renderer] schema loaded:",
  "user.displayName",
  "notif.monthlyDigest",
  "home.curatedRows",
  "home.currentlyWatchingLimit",
  "cards.episodeTracking",
  "pro.advancedNotifications",
  "pro.themePack",
  "[settings-renderer] Binding controls...",
  "[settings-renderer] Found control: ${selector} -> ${cfg.key}",
  "[settings-renderer] Set ${selector} to:",
  "[settings-renderer] Binding theme radio group...",
  "[settings-renderer] Module loaded, document.readyState:",
  "[settings-renderer] Adding DOMContentLoaded listener",
  "[settings-renderer] Error:",
  "[settings-renderer] DOM already ready, calling initSettings immediately",
  "Failed to load settings schema",
  "Invalid settings schema format",
  ");\r\n    if (!tab) {\r\n      errs.push(",
  "#${group.key}",
  "Missing group section: #${group.key} for ",
  ");\r\n    }\r\n\r\n    group.controls.forEach((control) => {\r\n      if (!control.selector) {\r\n        errs.push(",
  "Missing control element: ${control.selector} for ",
  " in ${group.title}",
  "Type mismatch for ${control.key}: expected ${expectedTag}, found ${element.tagName.toLowerCase()}",
  "[settings-selftest] ERRORS",
  "[settings-selftest] OK — Settings matches config",
  "[settings-selftest] failed",
  "#settingsSave",
  "#settingsCancel",
  ");\n  }\n  // theme radio group\n  const theme = STATE.draft[",
  "];\n  const radioMap = { system: ",
  ", light: ",
  ", dark: ",
  "#settingsSection input, #settingsSection select, #settingsSection textarea",
  ");\n  document.body.classList.toggle(",
  ", !!STATE.saved[",
  "Reset all settings to defaults?",
  "Value must be a number.",
  "Minimum is ${rule.validate.min}.",
  "Maximum is ${rule.validate.max}.",
  "Must be in increments of ${step}.",
  "Select a valid option.",
  ");\r\n    if (rule.validate?.maxLength && s.length > rule.validate.maxLength) {\r\n      errors.push(",
  ");\r\n    }\r\n  } else if (rule.type === ",
  "err-${el.id || Math.random().toString(36).slice(2)}",
  ";\r\n    el.removeAttribute(",
  ");\r\n    el.removeAttribute(",
  "[settings-wire] storage error:",
  "[settings-wire] ${config.key} = ${element.checked}",
  "[settings-wire] ${config.key} = ${element.value}",
  "[settings-wire] action ${config.action} not found",
  "${config.storageKey}_${cb.id}",
  "[settings-wire] ${config.key}.${cb.id} = ${cb.checked}",
  "t need binding, just validation\r\n      if (!element) {\r\n        console.warn(",
  ");\r\n      }\r\n    },\r\n  };\r\n\r\n  function bindControl(control) {\r\n    if (!control.selector) {\r\n      console.warn(",
  "[settings-wire] missing element: ${control.selector} for ${control.key}",
  "[settings-wire] unknown control type: ${control.type}",
  "[settings-wire] binding controls...",
  "[settings-wire] binding group: ${group.title}",
  "[settings-wire] binding complete",
  "[settings-wire] failed to init",
  "🔧 Syntax fix loading - providing minimal working functions",
  "✅ All critical functions available",
  "⚠️ Some critical functions missing, ensuring availability",
  "❌ tmdbGet still not available after emergency functions",
  "❌ loadUserDataFromCloud still not available after emergency functions",
  "❌ addToList still not available after emergency functions",
  "❌ saveAppData still not available after emergency functions",
  " | ",
  "\r\n\r\n  const media = window.matchMedia(",
  ") {\r\n      body.classList.add(",
  ");\r\n    } else {\r\n      body.classList.remove(",
  ");\r\n    }\r\n\r\n    // If theme is ",
  "Initializing UI integration...",
  "UI integration initialized",
  "DataOperations not available",
  "NotificationSystem not available, using fallback",
  "Setting up event listeners...",
  "Event listeners setup complete",
  "Notification system connected",
  "Item added:",
  "Added to ${detail.listName}",
  "Item moved:",
  "Moved to ${detail.toList}",
  "Item removed:",
  "Operation error:",
  "Failed to add item: ${error}",
  "Failed to move item: ${error}",
  "Failed to remove item: ${error}",
  "Operation failed: ${error}",
  "[${type.toUpperCase()}] ${message}",
  "Updating UI after data changes...",
  "UI update complete",
  "UI update failed:",
  ");\r\n          if (card) {\r\n            card.remove();\r\n            log(",
  ");\r\n            \r\n            // Update results count\r\n            const resultsCount = document.getElementById(",
  ");\r\n            if (resultsCount) {\r\n              const remaining = searchRoot.querySelectorAll(",
  "Failed to remove from search results:",
  "UI integration system loaded",
  "UnifiedDataLoader: Error loading currently watching items:",
  "UnifiedDataLoader: Error loading wishlist items:",
  "UnifiedDataLoader: Error loading watched items:",
  "Unified data loader initialized",
  "Returning Series",
  "In Production",
  "Up next: ${fmt(next)}",
  "Up next: ${fmt(first.air_date)}",
  ").toLowerCase() === ",
  ";\r\n  if (ended) return { label: ",
  ", date: null, ended: true };\r\n\r\n  // 4) Unknown future; if there are past episodes, say TBA.\r\n  return { label: ",
  ", date: null, ended: false };\r\n}\r\n\r\n// helpers\r\nexport function escapeHtml(s=",
  ") {\r\n  return String(s).replace(/[&<>",
  "]/g, m => ({",
  "S${String(ne.season_number).padStart(2,",
  ")}E${String(ne.episode_number).padStart(2,",
  "S${String(best.season_number).padStart(2,",
  ")}E${String(best.episode_number).padStart(2,",
  ";\r\n  }\r\n  return ",
  ",\r\n    lang: ",
  ";\r\n  return {\r\n    id: Number(x?.id ?? 0),\r\n    media_type: isTV ? ",
  ",\r\n    title: String(x?.title || x?.name || ",
  "),\r\n    vote_average: typeof x?.vote_average === ",
  "[saveAppData] Size:",
  ");\r\n    }\r\n\r\n    localStorage.setItem(key, s);\r\n    return true;\r\n  } catch (e) {\r\n    if (e && (e.name === ",
  " || /quota/i.test(String(e)))) {\r\n      console.warn(\r\n        ",
  ",\r\n      );\r\n      __lsDisabled = true;\r\n      return false;\r\n    }\r\n    console.error(",
  "🔍 Loading appData from localStorage:",
  "not found",
  "🔍 Parsed appData:",
  "🔍 Final appData after load:",
  "🔍 No saved data found, using defaults",
  "[loadAppData] failed:",
  "[validateAppData] Invalid data structure, using defaults",
  ", lang: ",
  ", theme: ",
  "fadeOutScale 0.3s ease-in forwards",
  "🔔 Notification: ${message} (${type})",
  "🔗 openTMDBLink called with:",
  ";\r\n    const url = ",
  ";\r\n    console.log(",
  ", url);\r\n    window.open(url, ",
  "❌ openTMDBLink error:",
  ";\r\n  const inMovies = [",
  "Home frame verification initialized",
  "Panel gutter verification initialized",
  "Rail normalization verification initialized",
  ") {\r\n    if (!element) {\r\n      FlickletDebug.warn(",
  ";\r\n          break;\r\n\r\n        case VISIBILITY_STATES.HIDDEN:\r\n          element.style.visibility = ",
  ";\r\n          element.style.opacity = ",
  ";\r\n          // Don",
  ";\r\n          break;\r\n\r\n        case VISIBILITY_STATES.INLINE:\r\n          element.style.display = ",
  ";\r\n          element.style.visibility = ",
  ";\r\n          break;\r\n\r\n        case VISIBILITY_STATES.INLINE_BLOCK:\r\n          element.style.display = ",
  ";\r\n          break;\r\n\r\n        default:\r\n          FlickletDebug.warn(",
  "👁️ Visibility changed: ${element.id || element} -> ${state} (${context})",
  "Visibility change for ${element.id || element}",
  ") {\r\n    const homeSections = window.HomeSectionsConfig.getSections(",
  ");\r\n    const sectionElements = window.HomeSectionsConfig.getSectionElements(",
  "Home section not found: ${sectionId}",
  ") {\r\n    const searchSections = window.HomeSectionsConfig.getSections(",
  "🗑️ Visibility history cleared",
  "👁️ Visibility Manager system initialized",
  "Initializing WatchlistsAdapter v2...",
  "Data migration failed:",
  "No user authenticated, loading from local data",
  "WatchlistsAdapter v2 initialized",
  "Using cached data for uid:",
  "Load failed:",
  "Using Firebase watchlists structure",
  "Using Firebase old structure, migrating...",
  "Firebase load failed, falling back to local data:",
  "Using local appData fallback",
  "Local data loaded:",
  "No cache available for addItem",
  ", listName, ",
  "Operation failed:",
  "),\n        wishlist: this._getItemsForList(",
  "),\n        watched: this._getItemsForList(",
  "Dispatched data change events after appData update",
  "Failed to dispatch data change events:",
  "Found item data for ID ${id} in cache:",
  "re searching through\n        log(",
  "Found item data for ID ${id} in appData:",
  ")\n          };\n        }\n        \n        log(",
  ");\n        return null;\n      } catch (error) {\n        err(",
  ")\n        };\n        \n        log(",
  ", id, ",
  ", itemData.title || itemData.name || ",
  ");\n      } catch (error) {\n        err(",
  ", error.message);\n      }\n    },\n\n    /**\n     * Invalidate cache\n     */\n    invalidate() {\n      log(",
  "WatchlistsAdapter v2 loaded",
  "🧪 [FIREBASE TEST CARDS] Adding test cards to Firebase...",
  "🧪 [FIREBASE TEST CARDS] Starting Firebase test data addition...",
  "🧪 [FIREBASE TEST CARDS] User not authenticated, cannot add to Firebase",
  "🧪 [FIREBASE TEST CARDS] User authenticated:",
  "Test Show ${i + 1}",
  ",\r\n            poster_path: ",
  ",\r\n            vote_average: 8.5,\r\n            overview: ",
  ",\r\n            first_air_date: ",
  "🧪 [FIREBASE TEST CARDS] ✅ Added 12 test shows to Firebase",
  "🧪 [FIREBASE TEST CARDS] Test shows:",
  "🧪 [FIREBASE TEST CARDS] ✅ Updated local storage",
  "🧪 [FIREBASE TEST CARDS] Triggering HomeClean refresh...",
  "🧪 [FIREBASE TEST CARDS] Reloading page...",
  "🧪 [FIREBASE TEST CARDS] Error:",
  "🧪 [FIREBASE TEST CARDS] Use addTestCardsToFirebase() to add test data to Firebase",
  "🧪 [TEST CARDS] Manual script loaded",
  "🧪 [TEST CARDS] Manual trigger - adding 12 test cards",
  ",\r\n        poster_path: ",
  ",\r\n        vote_average: 8.5,\r\n        overview: ",
  ",\r\n        first_air_date: ",
  "🧪 [TEST CARDS] Added 12 test shows:",
  "🧪 [TEST CARDS] Triggering HomeClean refresh...",
  "🧪 [TEST CARDS] Reloading page...",
  "🧪 [TEST CARDS] Use addTestCards() to add test data",
  "🧪 [TEST CARDS] Adding test cards to Currently Watching...",
  "🧪 [TEST CARDS] appData not available, waiting...",
  " },\r\n            { id: 1002, title: ",
  " },\r\n            { id: 1003, title: ",
  " },\r\n            { id: 1004, title: ",
  " },\r\n            { id: 1005, title: ",
  " },\r\n            { id: 1006, title: ",
  " },\r\n            { id: 1007, title: ",
  " },\r\n            { id: 1008, title: ",
  " },\r\n            { id: 1009, title: ",
  " },\r\n            { id: 1010, title: ",
  " },\r\n            { id: 1011, title: ",
  " },\r\n            { id: 1012, title: ",
  "/placeholder-poster.jpg",
  "Test show: ${show.title}",
  "🧪 [TEST CARDS] Added ${testShows.length} test shows to Currently Watching",
  "🧪 [TEST CARDS] Test shows:",
  "🧪 [TEST CARDS] Saved to localStorage",
  "🧪 [TEST CARDS] HomeClean not available, page refresh needed",
  "📊 Analytics module loaded",
  "📊 Analytics: ${event}",
  "❌ Analytics tracking failed:",
  "🛡️ Anti-Jump: Initializing simplified scroll prevention",
  " || location.pathname === ",
  ")) {\r\n    const allowed = new Set([",
  "🛡️ Anti-Jump: Removing hash",
  "to prevent auto-scroll",
  ", location.pathname);\r\n      } catch (e) {\r\n        console.warn(",
  ", e);\r\n      }\r\n    }\r\n\r\n    // Force scroll to top immediately\r\n    console.log(",
  ");\r\n    try {\r\n      window.scrollTo(0, 0);\r\n    } catch (e) {\r\n      console.warn(",
  ", e);\r\n    }\r\n  }\r\n\r\n  // 2) Remove autofocus (common scroll cause)\r\n  document.addEventListener(",
  ", () => {\r\n    const autofocusElements = document.querySelectorAll(",
  ");\r\n    if (autofocusElements.length > 0) {\r\n      console.log(",
  ", autofocusElements.length, ",
  ");\r\n      autofocusElements.forEach((n) => n.removeAttribute(",
  "🛡️ Anti-Jump: Forced scroll to top (0, 0)",
  "🛡️ Anti-Jump: Could not scroll to top:",
  "🛡️ Anti-Jump: Prevented scroll event during initial load",
  "🛡️ Anti-Jump: First frame complete, forcing scroll to top",
  "🛡️ Anti-Jump: Correcting scroll position after delay, was at",
  "🛡️ Anti-Jump: Final correction after load, was at",
  "🛡️ Anti-Jump: Released scroll prevention after load",
  "🛡️ Anti-Jump: Simplified guard initialized",
  "🎬 Content API presets loaded",
  "rows.trending",
  "rows.anime",
  "rows.horror",
  "rows.staff_picks",
  "🎬 Fetching trending content, page:",
  "[content] tmdbGet failed for trending",
  "🎬 Fetching ${genreName} content, page:",
  "[content] Genre not found via API or fallback:",
  "popularity.desc",
  "[content] tmdbGet failed for genre",
  "[content] Genre not found:",
  "🎬 Fetching staff picks, page:",
  "t paginate much\r\n      };\r\n    } catch (error) {\r\n      console.warn(",
  "🎌 Fetching anime content, page:",
  ").toLowerCase();\r\n        const overview = (item.overview || ",
  "🎌 Filtered ${animeResults.length} anime items from ${animatedContent.results.length} animated items",
  "[content] tmdbGet failed for anime",
  ") ||\r\n      document.querySelector(",
  ".modal",
  ");\r\n      el.style.marginTop = ",
  ";\r\n      el.style.color = ",
  ";\r\n      modal.querySelector(",
  ")?.insertAdjacentElement(",
  "Firebase not properly initialized. Please refresh the page and try again.",
  "❌ Firebase check failed:",
  "Authentication system is not ready. Please refresh the page.",
  "Something went wrong.",
  "🔍 Error message set:",
  "❌ Could not find error message element",
  "🔍 Error (no UI element available):",
  "🚪 closeAuthModal called",
  "🚪 Closing injected signInModal",
  "🚪 Closing auth modal via global handle",
  ", authModals.length);\r\n    authModals.forEach((modal) => {\r\n      console.log(",
  "🔐 loginWithGoogle called",
  "🔐 Checking Firebase...",
  "🔐 Firebase OK, creating provider...",
  "🔐 Calling signInWithPopup...",
  "🔐 Login successful!",
  "); // clear\r\n      closeAuthModal();\r\n\r\n      // Update account button immediately\r\n      console.log(",
  ";\r\n        const accountButtonLabel = accountBtn.querySelector(",
  "Signed in as ${result.user.email}. Click to sign out.",
  "🔍 Updated account button directly with user data:",
  "🔍 Updating account button after Google sign-in (delayed)",
  "Signed in successfully!",
  "Signed in successfully",
  "[auth] DEPRECATED: Username prompt trigger - handled by app layer",
  "[auth] google login failed",
  "Google sign-in failed. ",
  "Please try again and complete the sign-in process.",
  "Please allow popups for this site and try again.",
  "Network error. Please check your connection and try again.",
  "Too many failed attempts. Please try again later.",
  "Google sign-in is not enabled. Please contact support.",
  "Please try again.",
  "🔒 Google",
  "apple.com",
  "🍎 Apple login successful!",
  "🔍 Updating account button after Apple sign-in",
  "[auth] apple login failed",
  "Apple sign-in failed. ",
  "🍎 Apple",
  ").trim();\r\n      const pass = (modal?.querySelector(",
  ")?.value || ",
  ").trim();\r\n\r\n      if (!email || !pass) {\r\n        showInlineError(",
  ");\r\n        return;\r\n      }\r\n\r\n      if (!email.includes(",
  ")) {\r\n        showInlineError(",
  ");\r\n        return;\r\n      }\r\n\r\n      if (pass.length < 6) {\r\n        showInlineError(",
  "✉️ Email login successful!",
  "🔍 Updating account button after Email sign-in",
  "[auth] email login failed",
  "Email sign-in failed. ",
  "No account found with this email. Please check your email or create a new account.",
  "Incorrect password. Please try again.",
  "Please enter a valid email address.",
  "✉️ Email",
  "t blocked\r\n    const tpl = document.createElement(",
  ");\r\n    tpl.id = ",
  ";\r\n    tpl.setAttribute(",
  ");\r\n    tpl.setAttribute(",
  "></div>\r\n      <div class=",
  ">\r\n        <h2 id=",
  ">Sign in to sync</h2>\r\n        <p style=",
  ">Continue to Flicklet</p>\r\n        <div style=",
  ">\r\n          <button id=",
  ">🔒 Google</button>\r\n          <button id=",
  ">🍎 Apple</button>\r\n          <button id=",
  ">✉️ Email</button>\r\n        </div>\r\n        <div style=",
  ">\r\n          <button type=",
  ">Cancel</button>\r\n        </div>\r\n      </div>\r\n    ",
  "🔐 Google sign-in button clicked in injected modal",
  "🍎 Apple sign-in button clicked in injected modal",
  "✉️ Email sign-in button clicked in injected modal",
  "showSignInModal: no modal",
  ");\r\n    m.setAttribute(",
  "[auth] FlickletAuth.loginWithGoogle() → delegating to AuthManager",
  "[auth] AuthManager not available",
  "[auth] FlickletAuth.loginWithApple() → delegating to AuthManager",
  "[auth] FlickletAuth.loginWithEmail() → delegating to AuthManager",
  "[auth] FlickletAuth.showInlineError() → delegating to AuthManager",
  "✅ Firebase initialized (local):",
  "✅ Firebase v9 ESM initialized (local):",
  "❌ Firebase initialization error:",
  "🔘 [BUTTON TEST] Starting button visibility test...",
  "🔘 [BUTTON TEST] ❌ No clean-root found",
  "🔘 [BUTTON TEST] ✅ Found clean-root",
  "🔘 [BUTTON TEST] Found cards:",
  "🔘 [BUTTON TEST] ❌ No cards found",
  "🔘 [BUTTON TEST] Checking card ${index + 1}:",
  "🔘 [BUTTON TEST] Card class: ${card.className}",
  ".cw-actions",
  ".fy-actions",
  ".action-btn",
  ".cta-btn",
  "🔘 [BUTTON TEST] Card ${index + 1} elements:",
  "🔘 [BUTTON TEST] CW Actions styles:",
  "2px solid green",
  "rgba(0,255,0,0.1)",
  "🔘 [BUTTON TEST] FY Actions styles:",
  "🔘 [BUTTON TEST] Action button ${btnIndex + 1} styles:",
  "2px solid orange",
  "rgba(255,165,0,0.3)",
  "🔘 [BUTTON TEST] CTA button ${btnIndex + 1} styles:",
  ".card-content",
  "🔘 [BUTTON TEST] Card ${index + 1} content children:",
  "🔘 [BUTTON TEST] Child ${childIndex + 1}: ${child.tagName} - ${child.className}",
  "⚠️ Centralized add handler already initialized, skipping",
  "✅ Initializing centralized add handler",
  "⏭️ Add operation suppressed (duplicate within 500ms)",
  "❌ Add button missing required attributes",
  ") {\r\n      console.debug(",
  ");\r\n      return;\r\n    }\r\n\r\n    // Set busy flag\r\n    btn.dataset.busy = ",
  "➕ Centralized add handler processing",
  "❌ addToListFromCache function not available",
  "Add function not available",
  "❌ Add operation failed",
  "✅ Centralized add handler attached",
  "🎮 Community Games component loaded",
  ");\r\n    let value = window.i18n;\r\n    for (let i = 0; i < keys.length; i++) {\r\n      if (value && typeof value === ",
  " aria-hidden=",
  ">${title}</div>\r\n        <div class=",
  ">${subtitle}</div>\r\n      </div>\r\n    ",
  "🚫 Community Games disabled by feature flag, showing placeholder",
  "✅ Rendering Community Games",
  "games.trivia_title",
  "games.trivia_sub",
  "games.flickword_title",
  "games.flickword_sub",
  ">${stats.streak || 0}</div>\r\n          <div class=",
  ")}</div>\r\n        </div>\r\n        <div class=",
  ">${stats.totalAnswered || 0}</div>\r\n          <div class=",
  ">${stats.bestScore || ",
  "}</div>\r\n          <div class=",
  ")}</div>\r\n        </div>\r\n        <button class=",
  ")}</button>\r\n      ",
  ".teaser__cta",
  "🔧 Community Final Verification Starting...",
  "=== i18n Translation Test ===",
  ".game-tile",
  "games.",
  "✅ Tiles show localized text:",
  ".game-tile__title",
  ".game-tile__sub",
  "  - Tile ${index + 1}: ",
  " - ",
  ");\r\n    });\r\n  }\r\n\r\n  // Test 2: Data-Action Registration Fix\r\n  console.log(",
  ");\r\n\r\n  // Check if tiles have correct data-action values\r\n  const triviaTile = document.querySelector(",
  ");\r\n  const flickwordTile = document.querySelector(",
  ");\r\n\r\n  console.log(",
  ", !!triviaTile ? ",
  ", !!flickwordTile ? ",
  ");\r\n\r\n  // Test clicking tiles to see if they trigger router navigation\r\n  if (triviaTile) {\r\n    console.log(",
  "Navigating to",
  "Handling game route",
  "✅ Trivia click triggers navigation:",
  "=== Router Integration Test ===",
  "✅ Router available:",
  "  - Testing direct router navigation...",
  "✅ Trivia route handled:",
  "❌ Trivia route failed:",
  "✅ FlickWord route handled:",
  "❌ FlickWord route failed:",
  "=== Modal Functionality Test ===",
  "✅ Modal function available:",
  "  - Testing modal creation...",
  ".modal.games-teaser",
  "✅ Modal created:",
  ")?.textContent;\r\n        const modalBody = modal.querySelector(",
  ")?.textContent;\r\n        const modalButtons = modal.querySelectorAll(",
  ");\r\n\r\n        console.log(",
  ", modalTitle);\r\n        console.log(",
  ", modalBody);\r\n        console.log(",
  "✅ Modal shows localized text:",
  "❌ Modal creation failed:",
  "=== Console Cleanliness Test ===",
  "Unknown data-action",
  "✅ No ",
  " warnings:",
  "🎯 Overall result:",
  "✅ ALL FIXES WORKING",
  "❌ SOME ISSUES REMAIN",
  "🔧 Debug info:",
  "- Localized text:",
  "- Data-actions registered:",
  "- Router available:",
  "- Modal available:",
  "- No warnings:",
  "🧪 Manual verification steps:",
  "  1. Check tiles show ",
  " and ",
  " (not keys)",
  "  2. Click tiles - should navigate without ",
  " warnings",
  "  3. Modal should open with proper localized text",
  "  4. Console should show ",
  " not ",
  "🎬 Initializing community player placeholder...",
  "🎬 Creating community player placeholder...",
  ";\r\n\r\n    // Add loading animation\r\n    const loadingSpinner = document.createElement(",
  ");\r\n    loadingSpinner.className = ",
  ";\r\n\r\n    // Add CSS animation\r\n    if (!document.getElementById(",
  ")) {\r\n      const style = document.createElement(",
  ");\r\n      style.id = ",
  ";\r\n      style.textContent = ",
  ";\r\n      document.head.appendChild(style);\r\n    }\r\n\r\n    placeholder.innerHTML = ",
  "margin: 0 0 8px 0; color: var(--color-text, #333); font-size: 20px; font-weight: 600;",
  "margin: 0 0 16px 0; color: var(--color-text-secondary, #666); font-size: 16px;",
  "🎬 Load guard attempt ${loadAttempts}/${maxAttempts}",
  "🎬 Community player load guard triggered - max attempts reached",
  "0.5",
  ".coming-soon-text",
  "Unable to load community player. Please try again later.",
  "var(--color-error, #dc3545)",
  "🎬 Initializing community player...",
  "🎬 Community content area not found",
  "🎬 Community left column not found",
  "🎬 Community player placeholder added",
  "🎬 Community player disabled by feature flag",
  "🎬 Community content not found",
  "🎬 Community player not needed",
  "🎬 Community player system initialized",
  "🎬 Community Spotlight disabled by feature flag",
  "🎬 Community Spotlight row not found",
  "🎬 Initializing Community Spotlight...",
  "✅ Community Spotlight initialized",
  "❌ Community Spotlight initialization failed:",
  "🎬 Picking Community Spotlight content...",
  "🎬 Using community content:",
  "🎬 Community fetch failed:",
  "🎬 Using influencer content:",
  "🎬 Influencer fetch failed:",
  "🎬 Using TMDB content:",
  "🎬 TMDB fetch failed:",
  "🎬 Using house fallback content",
  "🎬 Rendering spotlight:",
  ".spotlight-video",
  ".spotlight-info",
  "❌ Spotlight DOM elements not found",
  ";\r\n      iframe.allow =\r\n        ",
  ";\r\n      iframe.allowFullscreen = true;\r\n      iframe.sandbox = ",
  ";\r\n      iframe.referrerPolicy = ",
  ";\r\n\r\n      videoEl.innerHTML = ",
  ";\r\n      img.src = item.thumbnailUrl || ",
  ";\r\n      img.loading = ",
  ";\r\n      videoEl.appendChild(img);\r\n    }\r\n\r\n    // Render info content\r\n    const titleEl = infoEl.querySelector(",
  ");\r\n    const creditEl = infoEl.querySelector(",
  ");\r\n    const descEl = infoEl.querySelector(",
  ");\r\n    const badgesEl = infoEl.querySelector(",
  ");\r\n\r\n    if (titleEl) titleEl.textContent = item.title || ",
  ";\r\n    if (creditEl) creditEl.textContent = item.credit || ",
  ";\r\n    if (descEl) descEl.textContent = item.description || ",
  ";\r\n\r\n    // Render badges\r\n    if (badgesEl) {\r\n      badgesEl.innerHTML = ",
  ";\r\n      (item.badges || []).forEach((badge) => {\r\n        const span = document.createElement(",
  ");\r\n        span.className = ",
  "Submit Your Video",
  ",\r\n            ",
  "Community Content",
  "Featured community content",
  "Influencer Content",
  "Featured influencer content",
  "TMDB Content",
  "Official trailer/teaser",
  "Flicklet Community Spotlight",
  "Submit your clip to be featured here. Pro program pending approval.",
  "/img/spotlight-fallback-16x9.svg",
  "🎬 fetchApprovedCommunitySpotlight not implemented yet",
  "🎬 fetchWhitelistedInfluencerSpotlight not implemented yet",
  "🎬 Fetching TMDB trending content...",
  "🎬 TMDB API key not available",
  "${window.TMDB_CONFIG.baseUrl}/trending/movie/day?api_key=${window.TMDB_CONFIG.apiKey}",
  "${window.TMDB_CONFIG.baseUrl}/trending/tv/day?api_key=${window.TMDB_CONFIG.apiKey}",
  "TMDB API error: ${moviesResponse.status} / ${tvResponse.status}",
  "🎬 Found ${allTrending.length} trending items",
  "${window.TMDB_CONFIG.baseUrl}/${item.media_type || ",
  "}/${item.id}/videos?api_key=${window.TMDB_CONFIG.apiKey}",
  "🎬 Found official trailer:",
  "🎬 Error fetching videos for item:",
  "🎬 No official trailers found in trending content",
  "[bind] element not found:",
  "[bind] failed:",
  "🎯 Action Bar component loaded",
  ");\n    const isEpisodeTrackingEnabled = () => {\n      return localStorage.getItem(",
  ";\n    };\n\n    const baseActions = {\n      // Common actions available in all lists\n      remove: {\n        label: t(",
  "),\n        icon: ",
  ",\n        action: ",
  ",\n        className: ",
  ",\n        priority: ",
  ", // Always available but can drop to overflow\n      },\n      notes: {\n        label: t(",
  ",\n            action: ",
  ",\n            list: ",
  ",\n            className: ",
  ",\n            priority: ",
  " && isEpisodeTrackingEnabled()) {\n      const trackEpisodes = {\n        label: t(",
  ");\n\n    // Generate primary actions HTML\n    const primaryActionsHTML = config.primary\n      .map(\n        (action) => ",
  "${action.className} action-btn action-btn--primary",
  "${action.action}",
  "${action.list || ",
  "\n        data-media-type=",
  "\n        aria-label=",
  "\n        title=",
  "\n      >\n        ${action.icon ? ",
  "}\n        <span class=",
  ">${action.label}</span>\n      </button>\n    ",
  "\n      <button \n        class=",
  " \n        data-action=",
  " \n        data-id=",
  " \n        data-list=",
  ");\n\n    // Generate overflow menu HTML\n    const overflowMenuHTML =\n      config.secondary.length > 0\n        ? ",
  " \n          aria-expanded=",
  "\n          aria-haspopup=",
  "\n        >\n          <span class=",
  ">⋯</span>\n        </button>\n        <div class=",
  ">\n          ${config.secondary\n            .map(\n              (action) => ",
  "\n              data-media-type=",
  "\n              aria-label=",
  "\n            >\n              ${action.icon ? ",
  "}\n              <span class=",
  ">${action.label}</span>\n            </button>\n          ",
  ")}\n        </div>\n      </div>\n    ",
  ";\n\n    return ",
  ".action-overflow-btn",
  ".action-overflow",
  ".action-btn, .action-overflow-item",
  ".action-overflow-menu",
  "Rating action for item:",
  "Track episodes action for item:",
  "Unknown action:",
  "🎴 Base Poster Card component loaded",
  ";\r\n    const titleWithYear = year ? ",
  ">\r\n        ${\r\n          posterUrl\r\n            ? ",
  "\r\n            : ",
  "\r\n        }\r\n        <div class=",
  ">🎬</div>\r\n      </div>\r\n      <div class=",
  ">${titleWithYear}</h3>\r\n        ${subline ? ",
  "}\r\n        ${showRating ? ",
  "}\r\n        ${\r\n          overflowActions.length > 0\r\n            ? ",
  "More options",
  "\r\n                <button class=",
  ">\r\n                  ${action.icon ? ",
  "}\r\n                  <span class=",
  ">${action.label}</span>\r\n                </button>\r\n              ",
  ")}\r\n            </div>\r\n          </div>\r\n        ",
  "\r\n        }\r\n      </div>\r\n    ",
  "t trigger if clicking overflow menu\r\n        if (!e.target.closest(",
  ".base-poster-card__overflow-btn",
  ".base-poster-card__overflow-menu",
  "${title}${year ? ",
  "base-poster-card base-poster-card--skeleton",
  "></div>\r\n          <div class=",
  "></div>\r\n        </div>\r\n      ",
  "Nothing here yet",
  "base-poster-card base-poster-card--empty",
  ">📭</div>\r\n        <p class=",
  ">${message}</p>\r\n      </div>\r\n    ",
  "✅ Base Poster Card component ready",
  "🎯 FlickWord Tab component loaded",
  "\r\n      <!-- Header Row -->\r\n      <div class=",
  ">\r\n        <h2 class=",
  ">FLICKWORD</h2>\r\n        <button class=",
  "() => {}",
  ">\r\n          Play\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Hero Row -->\r\n      <div class=",
  ">\r\n          <img src=",
  " \r\n               style=",
  ">\r\n        </div>\r\n        <div class=",
  ">\r\n          ${window.StatsCard ? window.StatsCard(userStats).outerHTML : ",
  "}\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Card Grid -->\r\n      <div class=",
  " data-word-id=",
  "/icons/word-puzzle.png",
  "WORD #${word.number || word.id}",
  ",\r\n                        },\r\n                        {\r\n                          label: ",
  ",\r\n                          onClick: () => console.log(",
  ", word.id),\r\n                          icon: ",
  ",\r\n                        },\r\n                      ],\r\n                    }).outerHTML\r\n                  : ",
  "\r\n              }\r\n            </div>\r\n          ",
  ")\r\n            : window.createEmptyState\r\n              ? window.createEmptyState(",
  ").outerHTML\r\n              : ",
  ");\r\n    if (playButton && onPlay) {\r\n      playButton.addEventListener(",
  ", onPlay);\r\n    }\r\n\r\n    // Add word card click handlers\r\n    const wordCards = tab.querySelectorAll(",
  ");\r\n    wordCards.forEach((card) => {\r\n      const wordId = card.dataset.wordId;\r\n      card.addEventListener(",
  "Word #${index + 1}",
  ".stats-card",
  ".flickword-tab__grid",
  "WORD #${word.number}",
  "Word clicked",
  "Play word",
  " },\r\n                  {\r\n                    label: ",
  ",\r\n                    onClick: () => console.log(",
  ", word.id),\r\n                    icon: ",
  ",\r\n                  },\r\n                ],\r\n              }).outerHTML\r\n            }\r\n          </div>\r\n        ",
  "✅ FlickWord Tab component ready",
  "📊 StatsCard component loaded",
  ",\r\n    lastPlayed = ",
  ",\r\n  }) {\r\n    const statsCard = document.createElement(",
  ");\r\n    statsCard.className = ",
  ";\r\n    statsCard.dataset.testid = ",
  ";\r\n\r\n    const statsHTML = ",
  ">Last Result</div>\r\n        </div>\r\n      </div>\r\n      ${\r\n        formattedLastPlayed\r\n          ? ",
  "\r\n          : ",
  "\r\n      }\r\n    ",
  ");\r\n    if (winRateElement) winRateElement.textContent = ",
  ";\r\n\r\n    // Update total games\r\n    const totalGamesElement = statsCard.querySelector(",
  ");\r\n    if (lastResultElement) lastResultElement.textContent = lastResult || ",
  ";\r\n\r\n    // Update last played\r\n    const lastPlayedElement = statsCard.querySelector(",
  ");\r\n    if (lastPlayedElement && lastPlayed) {\r\n      lastPlayedElement.textContent = ",
  "Failed to load FlickWord stats from localStorage:",
  ",\r\n      lastPlayed: ",
  "Failed to save FlickWord stats to localStorage:",
  "✅ StatsCard component ready",
  "🧠 Trivia Tab component loaded",
  ");\r\n    const streak = parseInt(localStorage.getItem(",
  ");\r\n\r\n    return ",
  "stats-row ${isPro ? ",
  ">Basic Plan</div>\r\n          <div class=",
  ">${dailyCount}/5 questions today</div>\r\n          <div class=",
  ">${isPro ? ",
  "}</div>\r\n        </div>\r\n        <div class=",
  ">Pro Plan</div>\r\n          <div class=",
  ">Current Streak: ${streak} days</div>\r\n          ${!isPro ? ",
  "}\r\n        </div>\r\n      </div>\r\n    ",
  ">TRIVIA</h2>\r\n        <button class=",
  ">\r\n          Play\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Stats Panel -->\r\n      <div class=",
  ">\r\n        ${createStatsPanel()}\r\n      </div>\r\n\r\n      <!-- Card Grid -->\r\n      <div class=",
  " data-category-id=",
  ", category.id),\r\n                          icon: ",
  ", onPlay);\r\n    }\r\n\r\n    // Add category card click handlers\r\n    const categoryCards = tab.querySelectorAll(",
  "/icons/movie-reel.png",
  "/icons/tv-screen.png",
  "/icons/music-note.png",
  "/icons/sports-ball.png",
  "/icons/history-book.png",
  "/icons/science-lab.png",
  "/icons/globe.png",
  "/icons/book.png",
  "/icons/palette.png",
  "/icons/brain.png",
  "/icons/trivia-default.png",
  "${category.questionCount} questions",
  "avg ${category.avgTime}",
  "last score ${category.lastScore}",
  "10 questions • avg 6:30",
  "Category ${index + 1}",
  ".trivia-tab__grid",
  "Category clicked",
  "Play category",
  ",\r\n                  },\r\n                  {\r\n                    label: ",
  ", category.id),\r\n                    icon: ",
  "✅ Trivia Tab component ready",
  "🎨 Loading non-critical CSS asynchronously...",
  "⚠️ Failed to load CSS: ${href}",
  "✅ All non-critical CSS loaded",
  "t be accessed (CORS)\r\n      console.warn(",
  "📊 CSS Usage Analysis:",
  "Used classes: ${usedClasses.size}",
  "Defined classes: ${definedClasses.size}",
  "Unused classes: ${unusedClasses.length}",
  "Missing classes: ${missingClasses.length}",
  "🗑️ Unused classes:",
  "❌ Missing classes:",
  "🎯 Curated genre settings loading...",
  ", // Drama\r\n      subGenre: ",
  ",  // Crime\r\n      mediaType: ",
  ",\r\n      title: ",
  "\r\n    },\r\n    {\r\n      mainGenre: ",
  ", // Comedy\r\n      subGenre: ",
  ", // Romance\r\n      mediaType: ",
  ", // Sci-Fi\r\n      subGenre: ",
  ", // Sci-Fi & Fantasy\r\n      mediaType: ",
  "\r\n    }\r\n  ];\r\n\r\n  /**\r\n   * Analyze user",
  "🎯 Analyzing user preferences from currently watching data...",
  "🎯 No appData available, using static defaults",
  "🎯 No currently watching items, using static defaults",
  "🎯 Analyzing ${allWatching.length} currently watching items",
  " || item.mediaType === ",
  "🎯 Genre analysis:",
  "🎯 Media type analysis:",
  "🎯 Top 3 genres:",
  ";\r\n\r\n      console.log(",
  "🎯 Generated smart defaults:",
  "🎯 Error analyzing user preferences:",
  "🎯 Loaded saved genre preferences:",
  "🎯 Error loading genre preferences:",
  "s watching data\r\n    console.log(",
  "🎯 Saved genre preferences:",
  "🎯 Error saving genre preferences:",
  "🎯 Genre selection changed for row ${i}:",
  "🎯 CustomGenreSelector not available",
  "Custom Row",
  ";\r\n    \r\n    let title = mainGenreName;\r\n    if (subGenreName && subGenreName !== mainGenreName) {\r\n      title += ",
  "Action & Adventure",
  "Sci-Fi & Fantasy",
  "War & Politics",
  "TV Movie",
  "Genre ${genreId}",
  "🎯 Resetting to smart defaults based on current user data",
  "🎯 Initializing curated genre settings...",
  "🎯 CustomGenreSelector found, initializing genre selectors...",
  "🎯 Curated genre settings initialized",
  "🎯 CustomGenreSelector not ready, retrying...",
  "s watching data to refresh smart defaults\r\n  document.addEventListener(",
  ", () => {\r\n    console.log(",
  "🎯 No saved preferences, will generate smart defaults on next load",
  "🎯 Curated genre settings loaded",
  "🎬 Curated Lists disabled by feature flag",
  "🎬 Curated Lists row not found",
  "🎬 Initializing Curated Lists row...",
  "🎬 Feature flag status:",
  "🎬 Delayed initialization of Curated Lists...",
  "[Curated] Error getting homeListsCount:",
  "🎬 loadSource called for: ${kind}",
  "🎬 Parsed data for ${kind}:",
  "🎬 Error parsing localStorage data for ${kind}:",
  "🎬 No data found for ${kind}, returning empty array",
  ";\r\n      const s = String(p);\r\n      return s.startsWith(",
  ")\r\n        ? s\r\n        : ",
  ";\r\n    return TMDB_IMG(rawPoster, ",
  "🎬 openShowDetail function not available",
  "><img alt=",
  "></div>\r\n    ",
  "🎬 Tile clicked:",
  ".curated-stacks",
  "🎬 Lists count from setting:",
  "🎬 No lists to show, removing section",
  "🎬 Rendering ${count} curated lists",
  "[Curated] Missing provider for ${cfg.kind}. Skipping.",
  "[Curated] Error fetching ${cfg.kind}:",
  "🎬 No items for ${cfg.kind}, skipping",
  "🎬 Rendering ${cfg.kind} with ${items.length} items",
  ">\r\n          <h3 class=",
  ">${cfg.title}</h3>\r\n        </div>\r\n        <div class=",
  "></div>\r\n      ",
  ".curated-list-scroll",
  "🎬 No lists rendered, removing section",
  "✅ Curated Lists row rendered with ${renderedLists} list(s)",
  "The Last Sentinel",
  " },\r\n      { id: 9002, title: ",
  ", posterPath: ",
  " },\r\n      { id: 9003, title: ",
  " },\r\n      { id: 9004, title: ",
  " },\r\n      { id: 9005, title: ",
  " },\r\n      { id: 9006, title: ",
  " },\r\n      { id: 9007, title: ",
  " },\r\n      { id: 9008, title: ",
  "s Gate",
  " },\r\n      { id: 9009, title: ",
  " },\r\n      { id: 9010, title: ",
  " },\r\n      { id: 9011, title: ",
  " },\r\n      { id: 9012, title: ",
  " },\r\n      { id: 9013, title: ",
  " },\r\n      { id: 9014, title: ",
  "🎭 Custom genre selector loading...",
  "Crime Drama",
  "Romance Drama",
  "Historical Drama",
  "Biographical Drama",
  "Romantic Comedy",
  "Action Comedy",
  "Dark Comedy",
  "Action Thriller",
  "Crime Action",
  "Sci-Fi Action",
  "Supernatural Horror",
  "Psychological Horror",
  "Horror Comedy",
  "Sci-Fi Fantasy",
  "Sci-Fi Thriller",
  "Sci-Fi Drama",
  "Science Fiction",
  "🎭 Using cached ${mediaType} genres",
  "🎭 tmdbGet not available, using fallback ${mediaType} genres",
  "🎭 Fetching ${mediaType} genres from TMDB...",
  "🎭 TMDB response for ${mediaType} genres:",
  "🎭 Loaded ${genres.length} ${mediaType} genres from TMDB",
  "🎭 Invalid response format for ${mediaType} genres:",
  "🎭 Failed to load ${mediaType} genres from TMDB:",
  "🎭 Using fallback ${mediaType} genres",
  "🎭 Container ${containerId} not found",
  ">Main Genre:</label>\r\n          <select id=",
  ">\r\n            <option value=",
  ">Loading genres...</option>\r\n          </select>\r\n        </div>\r\n        \r\n        <div class=",
  ">Sub Genre:</label>\r\n          <select id=",
  ">Select main genre first</option>\r\n          </select>\r\n        </div>\r\n        \r\n        <div class=",
  ">Media Type:</label>\r\n          <select id=",
  ">Movies</option>\r\n            <option value=",
  ">TV Shows</option>\r\n            <option value=",
  ">Both</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    ",
  "🎭 Populating main genres for media type: ${mediaType}",
  "🎭 Received ${genres.length} genres for ${mediaType}",
  ">Select main genre</option>",
  "🎭 Populated ${genres.length} main genres for ${mediaType}",
  "🎭 No genres received for ${mediaType}",
  ">No genres available</option>",
  "🎭 Set initial main genre: ${initialValues.mainGenre}",
  "🎭 Error populating main genres:",
  ">Error loading genres</option>",
  ">Select sub genre</option>",
  ">Select main genre first</option>",
  "🎭 Populated ${subGenres.length} sub genres for main genre ${mainGenreId}",
  ",\r\n          mediaType: mediaTypeSelect.value\r\n        });\r\n      }\r\n    });\r\n\r\n    subGenreSelect.addEventListener(",
  "🎭 Failed to populate genres, using fallback:",
  ".genre-selector select:nth-of-type(1)",
  ".genre-selector select:nth-of-type(2)",
  ".genre-selector select:nth-of-type(3)",
  ",\r\n      subGenre: subGenre || ",
  ",\r\n      mediaType: mediaType || ",
  ".genre-selector select",
  ";\r\n      selects[1].value = selection.subGenre || ",
  ";\r\n      selects[2].value = selection.mediaType || ",
  "🎭 Custom genre selector loaded successfully",
  "⚙️ User Settings data module loaded",
  "[getMyRows] failed:",
  "✅ My rows saved:",
  "[setMyRows] failed:",
  "🔄 Personalized rows reset to new defaults:",
  "🔍 [DOM TEST] Starting DOM structure test...",
  "🔍 [DOM TEST] #clean-root not found, skipping DOM analysis.",
  "🔍 [DOM TEST] ✅ Found clean-root",
  "🔍 [DOM TEST] Found cards: ${cards.length}",
  "🔍 [DOM TEST] === CARD ${index + 1} ANALYSIS ===",
  "🔍 [DOM TEST] Card class: ${card.className}",
  "🔍 [DOM TEST] Card children count: ${card.children.length}",
  "🔍 [DOM TEST] Child ${childIndex + 1}: ${child.tagName} - ${child.className}",
  "s the content div, show its children\r\n                    if (child.classList.contains(",
  ")) {\r\n                        console.log(",
  "🔍 [DOM TEST]   Content child ${contentIndex + 1}: ${contentChild.tagName} - ${contentChild.className}",
  "s the actions div, show its children\r\n                    if (child.classList.contains(",
  "🔍 [DOM TEST]   Action child ${actionIndex + 1}: ${actionChild.tagName} - ${actionChild.className}",
  ".cw-actions, .fy-actions",
  "🔍 [DOM TEST] Actions containers found in card: ${actionsInCard.length}",
  "🔍 [DOM TEST] Actions container ${actionsIndex + 1}: ${actionsContainer.className}",
  ");\r\n                    console.log(",
  "🔍 [DOM TEST] Actions container styles: {display: ",
  ", visibility: ",
  ", opacity: ",
  ", position: ",
  ", top: ",
  ", left: ",
  ");\r\n                });\r\n                \r\n                console.log(",
  ");\r\n            }\r\n        });\r\n\r\n        console.log(",
  "📺 Episode tracking system initialized",
  "📺 openEpisodeModal called with:",
  "📺 window.openModal available:",
  "📺 Episode tracking is disabled",
  "📺 No modal handler available for episode tracking",
  "📺 Available window functions:",
  "📺 Opening episode modal for:",
  ">\r\n          <div style=",
  ">\r\n            <div>\r\n              <h2 style=",
  ">${escapeHtml(seriesTitle)} — Episodes</h2>\r\n              <div id=",
  ">\r\n                Loading...\r\n              </div>\r\n            </div>\r\n            <button id=",
  ">✕ Close</button>\r\n          </div>\r\n          <div id=",
  "></div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=",
  ">\r\n          <div id=",
  ">\r\n            <div style=",
  ">\r\n              Loading series data...\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ",
  "${seriesTitle} — Episodes",
  "📺 Failed to create episode modal",
  "📺 Loading series data for:",
  "Failed to load series data",
  "📺 Error loading series data:",
  ">\r\n            <p>Error loading series data.</p>\r\n            <p style=",
  ">Please try again later.</p>\r\n          </div>\r\n        ",
  "📺 Failed to load season ${seasonNumber}:",
  "📺 Episode tracking API key check:",
  "${apiKey.slice(0, 4)}...",
  "${TMDB_API_BASE}${endpoint}?api_key=${apiKey}",
  "TMDB API error: ${response.status}",
  "📺 TMDB API error:",
  " data-season=",
  ">\r\n          <div>\r\n            <h3 style=",
  ">Season ${seasonNumber}</h3>\r\n            <div style=",
  ">\r\n              ${watchedCount}/${totalEpisodes} watched\r\n            </div>\r\n          </div>\r\n          <div style=",
  "></div>\r\n            </div>\r\n            <span class=",
  ">${isExpanded ? ",
  "}</span>\r\n          </div>\r\n        </button>\r\n        \r\n        <div class=",
  ">\r\n          ${episodesHtml}\r\n        </div>\r\n      </div>\r\n    ",
  "Episode ${episodeNumber}",
  "${episode.runtime}min",
  ";\r\n    const isWatched = isEpisodeWatched(seriesId, seasonNumber, episodeNumber);\r\n\r\n    return ",
  "\r\n           tabindex=",
  ">\r\n            S${seasonNumber}E${episodeNumber} • ${escapeHtml(title)}\r\n          </div>\r\n          <div style=",
  ">\r\n            ${airDate}${runtime ? ",
  "}\r\n          </div>\r\n        </div>\r\n        <div class=",
  ">\r\n          <label class=",
  ">\r\n            <input type=",
  "} \r\n                   data-series=",
  " data-episode=",
  "\r\n                   style=",
  ">\r\n            <span class=",
  "; height: 18px; width: 18px; left: 3px; bottom: 3px; background-color: white; transition: 0.3s; border-radius: 50%;",
  ".season-header",
  ".season-episodes[data-season=",
  ",\r\n        );\r\n        const chevron = seasonHeader.querySelector(",
  ");\r\n\r\n        if (episodesContainer && chevron) {\r\n          const isExpanded = episodesContainer.style.display !== ",
  ";\r\n          episodesContainer.style.display = isExpanded ? ",
  ";\r\n          chevron.textContent = isExpanded ? ",
  ";\r\n        }\r\n      }\r\n    });\r\n\r\n    // Episode toggle clicks\r\n    document.addEventListener(",
  ", (e) => {\r\n      if (e.target.matches(",
  ".episode-row",
  "input, label, .switch, .slider",
  ") {\r\n          e.preventDefault();\r\n          const checkbox = episodeRow.querySelector(",
  "📺 Setting S${seasonNumber}E${episodeNumber} watched:",
  "📺 Error parsing series data:",
  "📺 Error saving series data:",
  "📺 Syncing episode data for series:",
  ".progress-fill",
  "${progress.watched}/${progress.total} watched",
  ".season-progress-fill",
  ".season-container",
  ".episode-row[data-series=",
  " + seriesId + ",
  "Marked as watched.",
  "Episode down.",
  "Nice. One more brain worm defeated.",
  "Marked as unwatched.",
  "Episode restored.",
  "Back on the watchlist.",
  ").replace(\r\n      /[&<>",
  "]/g,\r\n      (m) =>\r\n        ({\r\n          ",
  "📊 Initializing CSV export system...",
  "CSV export is a Pro feature. Upgrade to Pro to export your data.",
  ";\r\n            const stringValue = String(value);\r\n            if (\r\n              stringValue.includes(",
  ") ||\r\n              stringValue.includes(",
  ")\r\n            ) {\r\n              return ",
  "${stringValue.replace(/",
  ";\r\n            }\r\n            return stringValue;\r\n          })\r\n          .join(",
  "),\r\n      ),\r\n    ].join(",
  "📊 No app data available for export",
  "TV Show",
  ",\r\n          first_air_date: item.first_air_date || ",
  ",\r\n          vote_average: item.vote_average || ",
  ",\r\n          poster_path: item.poster_path || ",
  ",\r\n          networks: (item.networks || []).map((n) => n.name).join(",
  "),\r\n          genres: (item.genres || []).map((g) => g.name).join(",
  "),\r\n          added_date: item.added_date || ",
  ",\r\n          user_rating: item.user_rating || ",
  ",\r\n          like_status: item.like_status || ",
  ",\r\n          notes: item.notes || ",
  ",\r\n          tags: (item.tags || []).join(",
  "),\r\n        });\r\n      });\r\n    });\r\n\r\n    // Export Movies\r\n    [",
  ",\r\n          release_date: item.release_date || ",
  ",\r\n          genres: (item.genres || []).map((g) => g.name).join(",
  "),\r\n          runtime: item.runtime || ",
  ",\r\n          added_date: item.added_date || ",
  "📊 CSV download failed:",
  "📊 Starting CSV export...",
  "No data to export. Add some shows or movies to your lists first.",
  "flicklet-export.csv",
  "Failed to generate CSV data.",
  ")[0];\r\n    const filename = ",
  "Exported ${data.length} items to ${filename}",
  "📊 CSV export completed successfully",
  "Failed to download CSV file.",
  "📊 Exporting ${mediaType} ${listType} list...",
  "No items in ${listType} list to export.",
  ",\r\n      list: listType,\r\n      id: item.id,\r\n      title: item.name || item.title || ",
  ",\r\n      date: mediaType === ",
  " ? item.first_air_date || ",
  " : item.release_date || ",
  ",\r\n      vote_average: item.vote_average || ",
  ",\r\n      poster_path: item.poster_path || ",
  ",\r\n      added_date: item.added_date || ",
  ",\r\n      user_rating: item.user_rating || ",
  ",\r\n      like_status: item.like_status || ",
  ",\r\n      notes: item.notes || ",
  ",\r\n      tags: (item.tags || []).join(",
  "),\r\n    }));\r\n\r\n    const csvContent = convertToCSV(exportData, ",
  ");\r\n    if (!csvContent) {\r\n      if (window.Toast && window.Toast.show) {\r\n        window.Toast.show(",
  "Exported ${items.length} items from ${listType} list",
  ");\r\n      if (!btn) return;\r\n\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      // Check if it",
  "📊 CSV export system initialized",
  "🔧 Feedback layout fix script loaded - VERSION 2",
  "🔧 Feedback section not found",
  "🔧 Found feedback section, applying fixes...",
  ";\n  feedbackSection.style.marginRight = ",
  ";\n  feedbackSection.style.paddingLeft = ",
  ";\n  feedbackSection.style.paddingRight = ",
  ";\n  console.log(",
  ".preview-row-container",
  ";\n    previewContainer.style.marginRight = ",
  ";\n    previewContainer.style.paddingLeft = ",
  ";\n    previewContainer.style.paddingRight = ",
  ";\n    console.log(",
  ".feedback-actions",
  "🔧 Fixed feedback-actions layout",
  ".feedback-content",
  ";\n    feedbackContent.style.marginRight = ",
  ";\n    feedbackContent.style.paddingLeft = ",
  ";\n    feedbackContent.style.paddingRight = ",
  ");\n  }\n\n  // Debug: Check widths of all parent containers\n  const feedbackCard = feedbackSection.querySelector(",
  ");\n  const feedbackSectionContent = feedbackSection.querySelector(",
  ");\n  const previewContainerDebug = feedbackSection.querySelector(",
  ");\n  \n  console.log(",
  ");\n  console.log(",
  ", feedbackSection.offsetWidth);\n  console.log(",
  ", previewContainerDebug?.offsetWidth);\n  console.log(",
  ", feedbackSectionContent?.offsetWidth);\n  console.log(",
  ";\n    feedbackCard.style.marginRight = ",
  ";\n    feedbackCard.style.paddingLeft = ",
  ";\n    feedbackCard.style.paddingRight = ",
  ", feedbackCard.offsetWidth);\n    console.log(",
  ");\n  }\n\n  // Style the buttons to be more compact\n  const buttons = feedbackSection.querySelectorAll(",
  ");\n  buttons.forEach(button => {\n    button.style.minWidth = ",
  ";\n    button.style.maxWidth = ",
  ";\n    button.style.flexShrink = ",
  ";\n    button.style.padding = ",
  ";\n    button.style.fontSize = ",
  ";\n    button.style.margin = ",
  ";\n  });\n  console.log(",
  "🔧 Feedback layout fix applied successfully",
  "🔧 Feedback section not ready, retrying...",
  "🔧 Feedback layout fix initialized",
  "🎯 Initializing FlickWord...",
  ">\r\n          <h4>FlickWord</h4>\r\n          <div class=",
  ">Streak: 0</span>\r\n            <span class=",
  ">Next: --:--</span>\r\n          </div>\r\n        </div>\r\n        <div class=",
  ">\r\n          <button class=",
  ">New Game</button>\r\n          <button class=",
  ">Hint</button>\r\n        </div>\r\n      </div>\r\n    ",
  "s word\r\n    game.target = await getTodayWord();\r\n    game.guesses = [];\r\n    game.current = ",
  "🎯 FlickWord initialized with target:",
  ".fw-grid",
  ");\r\n      for (let j = 0; j < 5; j++) {\r\n        const tile = document.createElement(",
  ");\r\n        tile.className = ",
  ";\r\n        tile.textContent = guess[j] || ",
  ".fw-keyboard",
  ";\r\n\r\n    // Row 1 + Backspace\r\n    const r1 = document.createElement(",
  ");\r\n    r1.className = ",
  ";\r\n    for (const L of ROWS[0]) r1.appendChild(makeKey(L));\r\n    r1.appendChild(makeKey(",
  ", handler) {\r\n    const btn = document.createElement(",
  ");\r\n    btn.type = ",
  ";\r\n    btn.textContent = label;\r\n    btn.className = ",
  ".trim();\r\n\r\n    if (label === ",
  ") {\r\n      btn.onclick = backspace;\r\n    } else if (label === ",
  "Not a valid word!",
  "🎉 Correct! Well done!",
  "Game over! The word was: ${game.target}",
  ".fw-notification",
  "fw-notification ${type}",
  ".fw-streak",
  "Streak: ${streak}",
  "Hint: ${hint}",
  "🎮 Game Tabs initialization loaded",
  "MOVIES: 1990s",
  "TV SHOWS",
  ",\r\n      questionCount: 15,\r\n      avgTime: ",
  ",\r\n      lastScore: ",
  ",\r\n    },\r\n    {\r\n      id: ",
  ",\r\n      name: ",
  ",\r\n      type: ",
  ",\r\n      questionCount: 12,\r\n      avgTime: ",
  ",\r\n      questionCount: 8,\r\n      avgTime: ",
  ",\r\n      questionCount: 20,\r\n      avgTime: ",
  ",\r\n      questionCount: 10,\r\n      avgTime: ",
  ",\r\n    },\r\n  ];\r\n\r\n  let currentTab = ",
  "🎮 Initializing game tabs...",
  ".game-tab-btn",
  "Game tab containers not found",
  "✅ Game tabs initialized",
  "🔄 Switching to ${tabName} tab",
  ").classList.add(",
  ");\r\n\r\n    // Update tab content\r\n    document.querySelectorAll(",
  ").forEach((tab) => {\r\n      tab.classList.remove(",
  ");\r\n    });\r\n    document.getElementById(",
  "🎯 FlickWord play clicked",
  "FlickWord modal function not available",
  "📝 Word clicked:",
  "🧠 Trivia play clicked",
  "Trivia modal function not available",
  "📚 Category clicked:",
  "✅ Game Tabs initialization ready",
  "[HomeCleanData] Using cached CW data",
  "[HomeCleanData] Failed to get CW data:",
  "[HomeCleanData] Using cached Next Up data",
  "[HomeCleanData] Failed to get Next Up data:",
  "genre-${genre.toLowerCase()}",
  "[HomeCleanData] Using cached ${genre} data",
  "[HomeCleanData] Failed to get ${genre} data:",
  "[HomeCleanData] Using cached In Theaters data",
  "[HomeCleanData] Failed to get In Theaters data:",
  "No description available",
  "[HomeCleanData] Unknown genre: ${genre}",
  "[HomeCleanData] TMDB error for ${genre}:",
  "[HomeCleanData] TMDB error for In Theaters:",
  "American Horror Story",
  "Season 12 • Episode 3",
  "\r\n            },\r\n            {\r\n                id: ",
  ",\r\n                title: ",
  ",\r\n                poster: ",
  ",\r\n                meta: ",
  ",\r\n                blurb: ",
  "The Undertone",
  "New episode tomorrow",
  "A psychological thriller about a woman who discovers her new apartment has a dark history.",
  "Baywatch: Hawaiian Wedding",
  "Series complete",
  "The final episode of the classic beach drama series.",
  "Monster: The Ed Gein Story",
  "2024 • TV Series",
  "A chilling drama about one of America\\",
  "\r\n                },\r\n                {\r\n                    id: ",
  ",\r\n                    title: ",
  ",\r\n                    poster: ",
  ",\r\n                    meta: ",
  ",\r\n                    blurb: ",
  "\r\n                }\r\n            ],\r\n            ",
  ": [\r\n                {\r\n                    id: ",
  "2023 • Movie",
  "The story of American scientist J. Robert Oppenheimer and his role in the development of the atomic bomb.",
  "${year} • TV Series",
  "TV Series",
  "New episode today",
  "New episode in ${diffDays} days",
  "New episode ${date.toLocaleDateString()}",
  "${year} • Movie",
  "[HomeCleanData] Cache cleared",
  "[home-clean] Phase 4 system enabled",
  "[home-clean] FLAGS state:",
  "[home-clean] HomeClean component available:",
  "[home-clean] mountHomeClean function available:",
  "[home-clean] Component loader not available, loading...",
  "[home-clean] Home section not found",
  "[home-clean] Found home section:",
  "[home-clean] Home section current content length:",
  "[home-clean] Mounting component...",
  "[home-clean] Component mounted successfully",
  "[home-clean] Home section new content length:",
  "[home-clean] Failed to mount component",
  "[home-clean] Mount error:",
  "[home-clean] Component loader loaded, retrying mount...",
  "[home-clean] Failed to load component loader",
  "[home-clean] Want to Watch:",
  "[home-clean] Marked as Watched:",
  "[home-clean] Dismissed:",
  "[home-clean] Deleted:",
  "[home-clean] Component destroyed",
  "[home-clean] Manual mount triggered...",
  "[home-clean] Cannot mount - missing homeSection or mountHomeClean",
  "[home-clean] Backup mount attempt...",
  "[home-clean] Forcing mount...",
  "[home-clean] Backup mount result:",
  "[HomeCleanPerformance] Performance optimizations initialized",
  "[HomeCleanPerformance] IntersectionObserver not supported",
  "[HomeCleanPerformance] ${name}: ${(end - start).toFixed(2)}ms",
  "[HomeCleanPerformance] Performance optimizations destroyed",
  "[HomeCleanPerformance] Performance optimizations loaded",
  "[home-rails-fix] Loading patch...",
  "s a significant discrepancy\n            if (Math.abs(actualWidth - outerWidth) > 100) {\n                console.warn(",
  "[home-rails-fix] Forcing viewport width normalization...",
  ";\n                    document.body.style.transform = ",
  ";\n                    document.body.style.zoom = ",
  "[home-rails-fix] Viewport normalization failed:",
  "[home-rails-fix] Community disabled via FLAGS",
  "[home-rails-fix] Community disabled via localStorage",
  "[home-rails-fix] Community gating check failed:",
  "[home-rails-fix] HomeClean component not found",
  "[home-rails-fix] Patching preserveExistingContent with gating...",
  "[home-rails-fix] Community section preserved and gated",
  "[home-rails-fix] Community section hidden by gating",
  "[home-rails-fix] HomeClean preserveExistingContent patched",
  "[home-rails-fix] HomeClean patching failed:",
  "[home-rails-fix] Patching mobile polish viewport calculation...",
  "[home-rails-fix] Mobile polish applied with normalized width:",
  "[home-rails-fix] Mobile polish logic patched",
  "[home-rails-fix] Mobile polish patching failed:",
  "[home-rails-fix] Initializing patches...",
  "[home-rails-fix] HomeClean not found after 5 seconds",
  "[home-rails-fix] Initial viewport width normalized:",
  "[home-rails-fix] Patches initialized successfully",
  "[home-rails-fix] Patch loaded successfully",
  "[home-rails-fix] Poster reconciler initialized",
  "[home-rails-fix] Failed to load poster reconciler:",
  "add-to-list missing id or list",
  ") return;\r\n      btn.dataset.busy = ",
  ";\r\n      setTimeout(() => {\r\n        btn.dataset.busy = ",
  "No add function available",
  "add-to-list failed",
  ".curated-card,.list-card,.list-row,.card,.show-card",
  ".count, .badge, .pill, .tab-badge",
  "🔢 Updating all tab counts after list change",
  "], .btn-not-interested",
  ".curated-card,.list-card,.list-row,.card",
  ";\r\n      const sourceList = card.dataset.sourceList || card.getAttribute(",
  "🔧 Global card actions system not available, falling back to legacy handler",
  "h3, .title, .card-title",
  "Unknown item",
  "[remove] failed",
  "Could not remove item",
  "s scoped\r\n  if (typeof window.updateCount !== ",
  " && typeof updateCount === ",
  "🧪 [MANUAL TEST] Starting home-clean test...",
  "🧪 [MANUAL TEST] Checking system state...",
  "🧪 [MANUAL TEST] HomeClean class available:",
  "🧪 [MANUAL TEST] mountHomeClean function available:",
  "🧪 [MANUAL TEST] FLAGS state:",
  "🧪 [MANUAL TEST] Home section found:",
  "🧪 [MANUAL TEST] Home section content length:",
  "🧪 [MANUAL TEST] Home section has clean-root:",
  "🧪 [MANUAL TEST] Forcing mount...",
  "🧪 [MANUAL TEST] Mount result:",
  "🧪 [MANUAL TEST] ✅ Home-clean mounted successfully!",
  "🧪 [MANUAL TEST] Home section new content length:",
  "🧪 [MANUAL TEST] Clean-root found:",
  "🧪 [MANUAL TEST] ❌ Failed to mount home-clean",
  "🧪 [MANUAL TEST] ❌ Mount error:",
  "🧪 [MANUAL TEST] ✅ Home-clean already mounted!",
  "🧪 [MANUAL TEST] ❌ Cannot mount - missing dependencies",
  "🪟 Modal core system loaded",
  ".modal-overlay",
  "t fully implemented yet\r\n */\r\n\r\n(function () {\r\n  ",
  ";\r\n\r\n  console.log(",
  "🎮 Showing games teaser modal for:",
  "modal games-teaser",
  ">\r\n          <h3>${t(",
  ")}</h3>\r\n          <button class=",
  ">×</button>\r\n        </div>\r\n        <div class=",
  ")}</p>\r\n        </div>\r\n        <div class=",
  ")}</button>\r\n          <button class=",
  ")}</button>\r\n        </div>\r\n      </div>\r\n    ",
  ".close",
  ".modal__backdrop",
  ".open-trivia",
  "🎮 Trivia game not available",
  "Trivia game coming soon!",
  ".open-flickword",
  "🎮 FlickWord game not available",
  "FlickWord game coming soon!",
  "/features/flickword-v2.html",
  ".gm-close",
  "🎯 Close button found:",
  "🎯 Close button styles:",
  ",\r\n      );\r\n      if (firstFocusable) {\r\n        firstFocusable.focus();\r\n      }\r\n    } else {\r\n      console.error(",
  ");\r\n    }\r\n  }\r\n\r\n  function closeFlickWordModal() {\r\n    console.log(",
  ");\r\n    const frame = document.getElementById(",
  ");\r\n\r\n    if (modal) {\r\n      modal.setAttribute(",
  "🎯 Updating stats display after modal close... (attempt",
  ",\r\n    );\r\n\r\n    if (!window.lastFlickWordStats) {\r\n      console.log(",
  "🎯 Available elements:",
  "🎯 All elements with data-testid:",
  "🎯 All .stats-card elements:",
  "🎯 All elements with ",
  " in class:",
  ").length,\r\n    );\r\n    console.log(\r\n      ",
  ",\r\n      document.querySelectorAll(",
  ").length,\r\n    );\r\n\r\n    // Log the actual elements with ",
  " in class\r\n    const statsElements = document.querySelectorAll(",
  ");\r\n    console.log(\r\n      ",
  "🎯 Elements with just numbers:",
  "🎯 Elements with stats-related text:",
  " + el.parentElement?.className,\r\n        id: el.id,\r\n        dataTestId: el.getAttribute(",
  "🎯 Potential stats display elements:",
  "🎯 Attempting to update potential stats elements...",
  "🎯 Element ${index + 1}:",
  "🎯 Found number element: ",
  " - attempting to update...",
  ".stat-label",
  "🎯 Found FlickWord stat-label elements:",
  "🎯 Stat label ${index + 1}:",
  " + label.parentElement?.className,\r\n        nextSibling: label.nextElementSibling?.tagName + ",
  ".stat-value, .stat-number, [class*=",
  "], [class*=",
  ",\r\n        );\r\n      if (valueElement) {\r\n        console.log(",
  "${label.textContent}",
  "🎯 Updated streak to: ${stats.streak}",
  "🎯 Updated best to: ${stats.maxStreak}",
  ";\r\n          console.log(",
  ");\r\n        } else if (label.textContent.includes(",
  ") || label.textContent.includes(",
  ")) {\r\n          valueElement.textContent = stats.totalGames;\r\n          console.log(",
  ")) {\r\n          valueElement.textContent = stats.wins;\r\n          console.log(",
  ")) {\r\n          valueElement.textContent = stats.losses;\r\n          console.log(",
  ", !!flickwordTab);\r\n    if (flickwordTab) {\r\n      console.log(",
  ", flickwordTab.innerHTML.substring(0, 200));\r\n      const flickwordNumbers = flickwordTab.querySelectorAll(",
  "🎯 Numbers in FlickWord tab:",
  ");\r\n\r\n    const bestElement =\r\n      document.querySelector(",
  ");\r\n\r\n    const winElement =\r\n      document.querySelector(",
  ");\r\n\r\n    const totalGamesElement =\r\n      document.querySelector(",
  ");\r\n\r\n    console.log(",
  "🎯 Updated streak to:",
  "🎯 Updated best to:",
  ";\r\n      console.log(",
  ", stats.winRate + ",
  ");\r\n    }\r\n\r\n    if (totalGamesElement) {\r\n      totalGamesElement.textContent = stats.totalGames;\r\n      console.log(",
  ".flickword-tab .stats-card",
  "🎯 Calling updateStatsCard after modal close...",
  "🎯 updateStatsCard called successfully after modal close",
  "🎯 No stats card found after modal close or updateStatsCard not available",
  "🎯 No stats elements found, trying again in 500ms... (retry",
  ",\r\n        MAX_STATS_UPDATE_RETRIES,\r\n        ",
  "🎯 Max retries reached, giving up on stats update",
  "🎯 Stats display update complete after modal close",
  "🎯 Processing game result:",
  "t reset streak to 0, just don",
  "🎯 Updated FlickWord stats:",
  "🎯 Updating stats display directly...",
  ");\r\n      const bestElement = document.querySelector(",
  ");\r\n      const winElement = document.querySelector(",
  ");\r\n\r\n      console.log(",
  ", winPercentage + ",
  ", allStatsElements.length);\r\n\r\n      console.log(",
  ");\r\n    } catch (error) {\r\n      console.error(",
  "🎯 Initializing FlickWord modal event listeners...",
  ");\r\n    const closeBtn = document.querySelector(",
  ");\r\n    const overlay = document.querySelector(",
  ", { openBtn, closeBtn, overlay });\r\n\r\n    if (openBtn) {\r\n      console.log(",
  ");\r\n      openBtn.addEventListener(",
  ", openFlickWordModal);\r\n    }\r\n\r\n    if (closeBtn) {\r\n      console.log(",
  ");\r\n      closeBtn.addEventListener(",
  ", (e) => {\r\n        console.log(",
  ");\r\n        closeFlickWordModal();\r\n      });\r\n    }\r\n\r\n    if (overlay) {\r\n      console.log(",
  ");\r\n      overlay.addEventListener(",
  ");\r\n        closeFlickWordModal();\r\n      });\r\n    }\r\n\r\n    // Handle escape key\r\n    document.addEventListener(",
  ") {\r\n        const modal = document.getElementById(",
  ");\r\n        if (modal && modal.getAttribute(",
  "🎯 Received message:",
  "🎯 Received close message from iframe",
  "🎯 Received game result from iframe:",
  ");\r\n      this.closeBtn = qs(",
  ");\r\n\r\n      this.init();\r\n    }\r\n\r\n    init() {\r\n      if (!this.modal || !this.frame) {\r\n        console.error(",
  "🎮 Opening Game Cards modal",
  "🎮 Closing Game Cards modal",
  "#clean-root .rail .card .poster-container",
  "img.poster",
  ".poster-fallback > img.poster-fallback-img",
  "calc(var(--card-w,154px) * 1.5)",
  "🧠 Opening Trivia modal with data:",
  "🧠 Trivia game mounted successfully",
  "🧠 Error mounting Trivia game:",
  "🧠 DailyTriviaBridge not available",
  ");\r\n    }\r\n  }\r\n\r\n  function closeTriviaModal() {\r\n    console.log(",
  "🧠 Trivia game unmounted successfully",
  "🧠 Error unmounting Trivia game:",
  "[Trivia] ",
  "Trivia unavailable.",
  "🧠 Initializing Trivia modal event listeners...",
  "🧠 Adding click listener to close button",
  "🧠 Close button clicked!",
  "🧠 Adding click listener to overlay",
  "🧠 Overlay clicked!",
  "🧠 Received message:",
  "🧠 Received close message from iframe",
  "🔔 Initializing notifications testability system...",
  "New Episode Available",
  "Breaking Bad S01E01 - Pilot is now available",
  "Episode Reminder",
  "The Office S02E01 - The Dundies airs in 2 hours",
  "The Office",
  "The Dundies",
  "New Show Recommendation",
  "Based on your watching history, you might like ",
  ",\r\n      show: ",
  ",\r\n      priority: ",
  ",\r\n      message: ",
  "🔔 Notification mode set to:",
  "Live Mode",
  "Mock Mode",
  "🔔 Showing mock notification:",
  ";\r\n\r\n    const timestamp = new Date().toLocaleTimeString();\r\n    logEntry.innerHTML = ",
  "display: flex; justify-content: space-between; align-items: center;",
  "font-weight: 600;",
  "font-size: 12px; color: var(--color-text-secondary, #666);",
  "margin-top: 4px; color: var(--color-text-secondary, #666);",
  "mock-${Date.now()}",
  "🔔 Testing notification system...",
  "Notifications are disabled. Enable them to test.",
  "Test notification from live mode",
  "\r\n      <h4 class=",
  ">🧪 Notification Testing</h4>\r\n      <p class=",
  ">Test and debug notification functionality</p>\r\n      \r\n      <div style=",
  ">\r\n        <button id=",
  ">\r\n          🧪 Test Notification\r\n        </button>\r\n        <button id=",
  ">\r\n          🗑️ Clear Log\r\n        </button>\r\n      </div>\r\n      \r\n      <div style=",
  ">\r\n        <label for=",
  ">\r\n          Notification Mode:\r\n        </label>\r\n        <select id=",
  ">\r\n          <option value=",
  ">Live Mode</option>\r\n          <option value=",
  ">Mock Mode</option>\r\n          <option value=",
  ">Disabled</option>\r\n        </select>\r\n        <div id=",
  "></div>\r\n      </div>\r\n      \r\n      <div>\r\n        <label style=",
  ">\r\n          Notification Log:\r\n        </label>\r\n        <div id=",
  ">\r\n            No notifications yet. Click ",
  " to start.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ",
  ">No notifications yet. Click ",
  " to start.</div>",
  "🔔 Setting up mock mode...",
  "🔔 Notifications testability system initialized",
  "Notifications: regions missing. Did you paste the HTML block into index.html?",
  "Close notification",
  "Close banner",
  "📊 Performance Monitor loaded",
  "📊 Home load started at:",
  "📊 Home load completed in:",
  "📊 Section ${sectionId} loaded in:",
  ");\r\n  }\r\n\r\n  // Log performance summary\r\n  function logPerformanceSummary() {\r\n    console.log(",
  ", performanceData.totalLoadTime.toFixed(2), ",
  ");\r\n\r\n    Object.entries(performanceData.sectionLoadTimes).forEach(([section, time]) => {\r\n      console.log(",
  ");\r\n    });\r\n\r\n    // Performance recommendations\r\n    if (performanceData.totalLoadTime > 1000) {\r\n      console.warn(",
  ");\r\n    }\r\n\r\n    if (performanceData.totalLoadTime > 2000) {\r\n      console.error(",
  ");\r\n    }\r\n\r\n    console.log(",
  "✅ Performance Monitor ready",
  "Could not establish connection",
  "Chrome extension messaging suppressed:",
  "Chrome runtime.lastError suppressed:",
  "Unhandled promise rejection suppressed:",
  "youtube.com",
  "YouTube extension message suppressed:",
  "YouTube message error suppressed:",
  "Wrapped sendMessage callback error suppressed:",
  "🔧 Chrome extension messaging polyfill loaded",
  " = active\r\n  const isPro = () => localStorage.getItem(KEY) === ",
  "Pro ON",
  "Pro OFF",
  "🔒 Applying Pro gates...",
  ", gated.length, ",
  ");\r\n    const proStatus = isPro();\r\n    console.log(",
  ", proStatus);\r\n\r\n    gated.forEach((el) => {\r\n      const mode = (el.getAttribute(",
  ").toLowerCase();\r\n      // Clean previous state\r\n      el.classList.remove(",
  ");\r\n      el.removeAttribute(",
  ");\r\n      const tip = el.querySelector(",
  "this feature",
  "Pro required for ${feat}.",
  "Pro activated",
  "⭐ Initializing Pro preview system...",
  ";\r\n  }\r\n\r\n  // Pro features list - single source of truth\r\n  const PRO_FEATURES = {\r\n    ",
  ": {\r\n      name: ",
  ",\r\n      description: ",
  ",\r\n      icon: ",
  ",\r\n      category: ",
  ",\r\n    },\r\n    ",
  ",\r\n    },\r\n    providers: {\r\n      name: ",
  ",\r\n    },\r\n    extras: {\r\n      name: ",
  ",\r\n    },\r\n    playlists: {\r\n      name: ",
  ",\r\n    },\r\n    stats: {\r\n      name: ",
  ",\r\n    },\r\n  };\r\n\r\n  // Show Pro preview modal\r\n  function showProPreview() {\r\n    console.log(",
  ");\r\n\r\n    const modal = document.createElement(",
  ";\r\n\r\n    const modalContent = document.createElement(",
  ");\r\n    modalContent.className = ",
  ">\r\n        <h3 style=",
  ">\r\n          ${category}\r\n        </h3>\r\n        <div class=",
  ">\r\n          ${features\r\n            .map(\r\n              (feature) => ",
  ">\r\n              <span style=",
  ">${feature.icon}</span>\r\n              <div style=",
  ">\r\n                <div style=",
  ">${feature.name}</div>\r\n                <div style=",
  ">\r\n                  ${feature.description}\r\n                </div>\r\n              </div>\r\n              <div style=",
  ">\r\n                PRO\r\n              </div>\r\n            </div>\r\n          ",
  ")}\r\n        </div>\r\n      </div>\r\n    ",
  ");\r\n\r\n    modalContent.innerHTML = ",
  "display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;",
  "margin: 0; color: var(--color-primary, #007bff); font-size: 24px; font-weight: 700;",
  ">×</button>\r\n      </div>\r\n      \r\n      <p style=",
  ">\r\n        Unlock advanced features and premium content with Flicklet Pro. \r\n        Here",
  "ll get access to:\r\n      </p>\r\n      \r\n      ${featuresHTML}\r\n      \r\n      <div style=",
  ">\r\n          Ready to upgrade?\r\n        </h3>\r\n        <p style=",
  ">\r\n          Pro features are coming soon! Stay tuned for the launch.\r\n        </p>\r\n        <button id=",
  " onmouseover=",
  "var(--color-primary-dark, #0056b3)",
  " \r\n           onmouseout=",
  "var(--color-primary, #007bff)",
  ">\r\n          Get Notified When Pro Launches\r\n        </button>\r\n      </div>\r\n    ",
  "Thanks! We",
  "⭐ Unknown Pro feature:",
  "⭐ Showing preview for feature:",
  "${feature.name} is a Pro feature. ${feature.description}",
  ");\r\n\r\n    gatedElements.forEach((element) => {\r\n      // Add preview functionality\r\n      element.addEventListener(",
  ";\r\n        previewIndicator.textContent = ",
  ">\r\n        <span style=",
  ">${feature.icon}</span>\r\n        <div style=",
  ">${feature.name}</div>\r\n          <div style=",
  ">\r\n            ${feature.description}\r\n          </div>\r\n        </div>\r\n        <div style=",
  ">\r\n          PRO\r\n        </div>\r\n      </div>\r\n    ",
  "⭐ Pro preview system initialized",
  "💬 Initializing enhanced quotes system...",
  "The best way to predict the future is to create it. - Peter Drucker",
  "Life is what happens to you while you",
  "t waste it living someone else",
  ",\r\n\r\n    // Sarcastic/Snarky TV & Movie themed\r\n    ",
  "t always watch TV, but when I do, I prefer shows that don",
  "m not addicted to TV shows. I can stop watching anytime I want. Just not right now.",
  "My watchlist is like a black hole—things go in, but they never come out.",
  "I have a PhD in binge-watching. My thesis was on ",
  "t have a problem with spoilers. I have a problem with people who think I care about spoilers.",
  "The best part about streaming services? They never judge you for watching the same show 47 times.",
  "m not avoiding social interaction. I",
  "t watch bad movies. I watch ",
  "re good",
  "s a fine line.",
  "The only thing worse than a cliffhanger is waiting a year to find out what happens next.",
  "I have a love-hate relationship with TV shows. I love them; they hate my sleep schedule.",
  "My watchlist is longer than my grocery list, and somehow more important.",
  "I don",
  "s cheaper.",
  "The only thing more dramatic than a soap opera is my reaction to a plot twist.",
  "m not procrastinating. I",
  "t have commitment issues. I have commitment issues with TV shows that get cancelled.",
  "The only thing more predictable than a rom-com is my decision to watch another rom-com.",
  "🎬 Plot twist: You",
  "s story.",
  "🍿 Popcorn is just a socially acceptable way to eat butter for dinner.",
  "📺 My TV remote has more buttons than my car, and I use it more often.",
  "🎭 I don",
  "m not crying during sad movies.",
  "🎪 My life is like a reality show, but with better editing and worse ratings.",
  "🎨 I don",
  "next episode",
  "m not a clown, but I do make questionable life choices based on TV shows.",
  "m currently at 0.001%.",
  "🎪 My circus is my watchlist, and I",
  "t need a mirror. I have TV shows to reflect on my life choices.",
  "🎨 My masterpiece is the perfect binge-watching setup.",
  "🎵 My soundtrack is the sound of my own voice saying ",
  "s not looking good.",
  "🎪 My performance is pretending I",
  ",\r\n\r\n    // Tech & Modern Life\r\n    ",
  "m not a robot, but I do have automated responses for ",
  "t need Google. I have a photographic memory of every TV show I",
  "s, and that",
  "s all TV.",
  "🏆 My achievements include finishing entire seasons in one sitting.",
  "🥇 My gold medal is for the most creative excuses to avoid social plans.",
  "To watch or not to watch, that is the question. The answer is always ",
  "s probably in season 3, episode 7.",
  "I have not failed. I",
  "t work for me.",
  "The best way to find out if you can trust somebody is to watch TV with them.",
  "Life is like a box of chocolates, but TV shows are like a box of surprises.",
  "The only thing constant in life is change... and my love for TV shows.",
  "I have a dream that one day my watchlist will be empty. Just kidding, that",
  "best way",
  "great work",
  ") ||\r\n          q.includes(",
  "),\r\n      ),\r\n      philosophical: quotes.filter(\r\n        (q) =>\r\n          q.includes(",
  "quote_${quoteIndex + 1}",
  "💬 Failed to save quote deck:",
  "💬 Cleared corrupted quote deck data",
  "💬 Failed to load quote deck:",
  "💬 Quote rotation started with",
  "ms interval",
  "💬 Quote rotation stopped",
  "opacity 0.3s ease",
  ";\r\n\r\n      setTimeout(() => {\r\n        quoteText.textContent = newQuote;\r\n        quoteText.style.opacity = ",
  "💬 Enhanced quotes system initialized with",
  " });\r\n        FlickletDebug.info(",
  "Unknown failure",
  "❌ ${testName}: FAIL - ${result}",
  "💥 ${testName}: ERROR - ${error.message}",
  "FlickletDebug not available",
  "FlickletDebug.info not a function",
  "FlickletDebug.error not a function",
  "FlickletDebug.warn not a function",
  "HomeSectionsConfig not available",
  "ALL_SECTIONS not an array",
  "getSections not a function",
  "getSectionElements not a function",
  "getSections did not return array",
  "DOMCache not available",
  "DOMCache.get not a function",
  "DOMCache.getMultiple not a function",
  "DOM caching not working correctly",
  "ErrorHandler not available",
  "ErrorHandler.handle not a function",
  "ErrorHandler.safe not a function",
  "ErrorHandler.safe not working correctly",
  "VisibilityManager not available",
  "VisibilityManager.show not a function",
  "VisibilityManager.hide not a function",
  "manageHomeSections not a function",
  "FlickletUtils not available",
  "createElement not a function",
  "storage not available",
  "storage.get not a function",
  "createElement not working correctly",
  "FlickletApp not available",
  "switchToTab not a function",
  "init not a function",
  "Tab switch to ${tab} failed - current tab is ${window.FlickletApp.currentTab}",
  "Error switching to tab ${tab}: ${error.message}",
  "Home section ${sectionId} is not visible on home tab",
  "Home section ${sectionId} is not hidden on watching tab",
  "performSearch not available",
  "clearSearch not available",
  "Search input not found",
  "Search button not found",
  "saveAppData not available",
  "loadAppData not available",
  "Data persistence not working correctly",
  "🧪 Starting refactor validation tests...",
  "Debug System",
  "Home Sections Config",
  "DOM Caching",
  "Error Handling",
  "Visibility Management",
  "Common Utilities",
  "Core App Functionality",
  "Tab Switching",
  "Home Sections Visibility",
  "Search Functionality",
  "Data Persistence",
  "📊 Test Results Summary:",
  "✅ Passed: ${testResults.passed}",
  "❌ Failed: ${testResults.failed}",
  "📈 Pass Rate: ${passRate}%",
  "⚠️ Some tests failed - check functionality",
  "  - ${test.name}: ${test.message}",
  "🎉 All tests passed - refactoring successful!",
  "🧪 Refactor Validation system loaded",
  ";\r\n    const allowed = new Set([",
  "🔧 Route Fix: Removing hash",
  ", location.pathname);\r\n    }\r\n  }\r\n\r\n  function ensureTopOnLoad() {\r\n    // Ensure we",
  "🔧 Route Fix: Scrolled to top on initial load",
  "🔧 Route Fix: Correcting scroll position after load",
  "FlickletDebug.error(",
  "FlickletDebug.warn(",
  "FlickletDebug.info(",
  "ll do manual replacements in the browser\n      console.log(",
  ", filePath);\n      return true;\n    } catch (error) {\n      console.error(",
  "🔧 Safe Console Replacement utility loaded",
  ".section, .stats, .binge-banner, .section-header, .list-container",
  "re already positioned correctly in HTML\r\n      const searchResults = $(",
  ");\r\n      if (searchResults) {\r\n        // DON",
  "re already in the right place\r\n        searchResults.style.display = ",
  ";\r\n        searchResults.classList.remove(",
  ");\r\n      }\r\n    }\r\n  }\r\n\r\n  function hideResultsUI() {\r\n    // Hide search results\r\n    const searchResults = $(",
  ");\r\n    if (searchResults) {\r\n      searchResults.style.display = ",
  ";\r\n      searchResults.classList.add(",
  ");\r\n\r\n      // DON",
  ");\r\n    if (q) q.value = ",
  ";\r\n    const g = document.querySelector(",
  ");\r\n    if (g) g.value = ",
  "performSearch error",
  "s previous choice\r\n  const hidden = localStorage.getItem(KEY) === ",
  ";\r\n  if (hidden) wrap.style.display = ",
  ";\r\n\r\n  // Open/close\r\n  function openPop() {\r\n    if (wrap.style.display === ",
  ") return;\r\n    positionPop();\r\n    pop.hidden = false;\r\n    trigger.setAttribute(",
  "t close if clicking on modal elements\r\n    if (e.target.closest(",
  ") || e.target.closest(",
  "\r\n  dontShow.addEventListener(",
  ", () => {\r\n    if (dontShow.checked) {\r\n      localStorage.setItem(KEY, ",
  ");\r\n      closePop();\r\n      wrap.style.display = ",
  ";\r\n      window.Notify?.info?.(",
  ");\r\n    } else {\r\n      localStorage.removeItem(KEY);\r\n      window.Notify?.info?.(",
  ");\r\n    }\r\n  });\r\n\r\n  // Wire\r\n  trigger.addEventListener(",
  ", () => (pop.hidden ? openPop() : closePop()));\r\n  closeBtn.addEventListener(",
  ", closePop);\r\n\r\n  // Optional first-run nudge: auto-open once if user hasn",
  ") || active.matches(",
  "🗂️ Refreshing series organizer content",
  "🗂️ Cleared series cache:",
  "No series selected.",
  ".season-toggle",
  ".season",
  ".episodes",
  ";\r\n    }\r\n  }\r\n\r\n  function onKey(e) {\r\n    const btn = e.target.closest(",
  ");\r\n    if (!btn) return;\r\n    if (e.key === ",
  ") {\r\n      e.preventDefault();\r\n      btn.click();\r\n    }\r\n    if (e.key === ",
  ") {\r\n      const wrap = btn.closest(",
  ");\r\n      wrap.setAttribute(",
  "Season ${i}",
  ">${esc(s.title || ",
  ")}</h2>\r\n        <div class=",
  " aria-live=",
  ">${totalSeasons} season${totalSeasons !== 1 ? ",
  "} • ~${totalEps} episodes</div>\r\n      </div>",
  "Season ${sn}",
  ";\r\n    return ",
  "${count} eps",
  "}</span>\r\n        </button>\r\n        <div id=",
  "></div>\r\n      </section>",
  ">No episodes available.</div>",
  ");\r\n    const hasMore = episodes.length > 5;\r\n    const moreBtn = hasMore\r\n      ? ",
  "\r\n      : ",
  ";\r\n  }\r\n\r\n  function epHTML(ep) {\r\n    const n = ep.episode_number ?? ",
  ";\r\n    const title = ep.name || ",
  ";\r\n    const date = ep.air_date ? ",
  ";\r\n    const overview = ep.overview ? ",
  ";\r\n  }\r\n\r\n  // Handle ",
  " + action buttons\r\n  mount.addEventListener(",
  ", (e) => {\r\n    const more = e.target.closest(",
  ");\r\n    if (more) {\r\n      const sn = Number(more.getAttribute(",
  "));\r\n      const listWrap = mount.querySelector(",
  ");\r\n      more.remove();\r\n      return;\r\n    }\r\n    const actionBtn = e.target.closest(",
  ");\r\n    if (actionBtn) {\r\n      const act = actionBtn.dataset.action;\r\n      const ep = actionBtn.closest(",
  ")?.dataset?.ep;\r\n      if (act === ",
  ") {\r\n        // Wire to your app",
  "Marked E${ep} watched",
  "Reminder set for E${ep}",
  "]/g,\r\n      (m) => ({ ",
  ").split(",
  ").map(Number);\r\n    if (!y || !m || !d) return ",
  ";\r\n    const dt = new Date(Date.UTC(y, m - 1, d));\r\n    return dt.toLocaleDateString(undefined, { year: ",
  ", month: ",
  ", day: ",
  "Episode ${i}",
  ", overview: ",
  " });\r\n    }\r\n    return out;\r\n  }\r\n  function emptyState(msg) {\r\n    return ",
  "padding:12px; opacity:.7;",
  "], #settingsSection, [data-section=",
  "], #settings",
  ".content, .settings-body, .section__body, .tab-panel__body",
  "⚙️ My Rows settings module loaded",
  "❌ No root element provided for My Rows settings",
  "🎛️ Rendering My Rows settings",
  ">🎯 <span data-i18n=",
  ">My Rows</span></h3>\r\n        <p class=",
  " data-i18n=",
  ">Choose what content appears in your personalized rows on the home screen</p>\r\n        \r\n        <div class=",
  ">\r\n          ${[0, 1]\r\n            .map(\r\n              (i) => ",
  "settings-control-group my-row-slot",
  "settings.row",
  ">None</option>\r\n                ${(window.ROW_PRESETS || [])\r\n                  .map(\r\n                    (preset) => ",
  "${preset.key}",
  ",\r\n                  )\r\n                  .join(",
  ")}\r\n              </select>\r\n              <p class=",
  ">Select a content type for this row</p>\r\n            </div>\r\n          ",
  ")}\r\n        </div>\r\n\r\n        <div class=",
  ">\r\n            💾 <span data-i18n=",
  ">Save</span>\r\n          </button>\r\n          <button class=",
  ">\r\n            🗑️ <span data-i18n=",
  ">Clear All</span>\r\n          </button>\r\n        </div>\r\n\r\n        <div class=",
  ">\r\n          <h4 class=",
  ">Preview</h4>\r\n          <p class=",
  ">Your personalized rows will appear on the home screen in this order</p>\r\n          <div class=",
  "\r\n                <div class=",
  ">\r\n                  <div class=",
  ">\r\n                    <span class=",
  ">\r\n                      ${window.t ? window.t(",
  ", { n: i + 1 }) : ",
  "}\r\n                    </span>\r\n                    <span class=",
  ">\r\n                      ${preset ? (window.t ? window.t(preset.labelKey) : preset.labelKey) : window.t ? window.t(",
  "}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              ",
  ")}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ",
  ".settings-select",
  ".settings-select[data-slot]",
  "settings.saved",
  "Settings saved!",
  "✅ My rows saved successfully:",
  "Failed to save rows",
  "setMyRows function not available",
  "❌ Failed to save My Rows:",
  "settings.save_error",
  "Failed to save settings",
  "settings.clear_confirm",
  "Are you sure you want to clear all rows?",
  "settings.cleared",
  "Rows cleared!",
  "✅ My rows cleared",
  "❌ Failed to clear My Rows:",
  ".preview-row",
  ".preview-row-content",
  "settings.none",
  "⚙️ Initializing settings tie-ins system...",
  "🌍 Ensuring Spanish persistence...",
  ") {\r\n      localStorage.setItem(",
  "🌍 Language manager save failed:",
  "🌍 Spanish persistence ensured:",
  "🔘 Ensuring FOBs visibility...",
  ".fab, .fab-left, .fab-stack",
  ";\r\n      fab.style.visibility = ",
  ";\r\n      fab.style.opacity = ",
  ";\r\n\r\n      // Ensure FABs are actionable\r\n      fab.style.pointerEvents = ",
  ";\r\n      fab.style.cursor = ",
  ";\r\n\r\n      // Remove any disabled states\r\n      fab.disabled = false;\r\n      fab.removeAttribute(",
  ");\r\n\r\n      // Ensure proper positioning\r\n      if (fab.classList.contains(",
  ")) {\r\n        fab.style.position = ",
  ";\r\n        fab.style.marginRight = ",
  ";\r\n      }\r\n\r\n      if (fab.classList.contains(",
  ")) {\r\n        fab.style.display = ",
  ";\r\n        fab.style.flexDirection = ",
  ";\r\n        fab.style.gap = ",
  ";\r\n        fab.style.marginLeft = ",
  ".tab-section:not([style*=",
  ");\r\n    if (activePanel) {\r\n      let fabDock = activePanel.querySelector(",
  ");\r\n      if (!fabDock) {\r\n        fabDock = document.createElement(",
  ");\r\n        fabDock.className = ",
  "🔘 FOBs visibility ensured",
  "📺 Ensuring Episode Tracking integration...",
  "📺 Episode tracking toggle not found",
  "📺 Episode tracking toggle changed:",
  "📺 Episode Tracking integration ensured",
  "📺 Setting episode tracking to:",
  "📺 Updating episode tracking UI:",
  ");\r\n\r\n    episodeButtons.forEach((button) => {\r\n      if (enabled) {\r\n        button.style.display = ",
  ";\r\n        button.disabled = false;\r\n        button.removeAttribute(",
  ");\r\n      } else {\r\n        button.style.display = ",
  ";\r\n        button.disabled = true;\r\n        button.setAttribute(",
  ".episode-tracking-indicator",
  "📺 Episode tracking UI updated",
  "💾 Ensuring settings persistence...",
  ");\r\n    } else {\r\n      localStorage.setItem(",
  "💾 Settings persistence ensured",
  "⚙️ Settings tie-ins system initialized",
  ".tab-button",
  "🔗 Initializing enhanced share system...",
  "1.0",
  "${baseUrl}?share=${compressed}",
  "🔗 Failed to generate shareable URL:",
  "🔗 Failed to parse shareable URL:",
  "📺 My TV & Movie Lists\\n\\n",
  "🔴 Currently Watching:\\n",
  "Unknown Service",
  "  • ${item.title} (${network})\\n",
  ";\r\n    }\r\n\r\n    if (selectedItems.wishlist.length > 0) {\r\n      shareText += ",
  ";\r\n      selectedItems.wishlist.forEach((item) => {\r\n        const network = item.networks?.[0] || ",
  ";\r\n        shareText += ",
  ";\r\n      });\r\n      shareText += ",
  ";\r\n    }\r\n\r\n    if (selectedItems.watched.length > 0) {\r\n      shareText += ",
  ";\r\n      selectedItems.watched.forEach((item) => {\r\n        const network = item.networks?.[0] || ",
  "\\n🔗 View this list online: ${shareUrl}",
  "🔗 Clipboard API failed, trying fallback:",
  "Copy failed",
  "🔗 Fallback copy failed:",
  "🔗 Copying share list...",
  "No items selected to share",
  "No items selected",
  "🔗 Share text copied to clipboard",
  "List copied to clipboard!",
  "🔗 Failed to copy:",
  "Failed to copy list. Please try again.",
  "🔗 Generating shareable link...",
  "Shareable link copied to clipboard!",
  "🔗 Failed to copy URL:",
  "Link generated but failed to copy. Check the text area.",
  "🔗 Loading shared list:",
  "Loading shared list with ${Object.values(shareData.items || {}).flat().length} items...",
  "🔗 Shared list data:",
  "🔗 Enhanced share system initialized",
  ";\r\n\r\n  // Route guard: don",
  "Share this page or item.",
  "Share modal already opened — skipping",
  ";\r\n    // focus first control\r\n    requestAnimationFrame(() => urlInput.focus());\r\n    document.addEventListener(",
  ", onKey, true);\r\n    document.addEventListener(",
  ", trapFocus, true);\r\n  }\r\n\r\n  function close() {\r\n    modal.hidden = true;\r\n    document.removeEventListener(",
  ", onKey, true);\r\n    document.removeEventListener(",
  "Shared.",
  "Link copied.",
  "Link copied",
  "Copy failed — select the link and copy manually.",
  "🔗 Share button found and bound",
  "🔗 Share button clicked",
  "🔗 Share button not found",
  "🔍 Search state changed:",
  "🔄 Current tab changed:",
  "🔍 Search mode - showing tab: ${tabId}",
  "${this.currentTab}Tab",
  "✅ Hidden current tab: ${tabId}",
  "✅ Shown tab: ${tabId}",
  "[SimpleTabManager] LEGACY SHIM: Tab switching disabled - delegating to nav engine:",
  "[SimpleTabManager] LEGACY MODE: Using old tab system",
  "[SimpleTabManager] Nav engine not available - falling back to legacy",
  ";\r\n        }\r\n      });\r\n\r\n      // Update home sections visibility\r\n      this.updateHomeSections(tab === ",
  ");\r\n    },\r\n\r\n    // Clear search\r\n    clearSearch: function () {\r\n      FlickletDebug.info(",
  ");\r\n\r\n      // Clear search input\r\n      const searchInput = document.getElementById(",
  ");\r\n      if (searchInput) {\r\n        searchInput.value = ",
  ";\r\n      }\r\n\r\n      // Hide search results\r\n      const searchResults = document.getElementById(",
  ");\r\n      if (searchResults) {\r\n        searchResults.style.display = ",
  "🔄 SimpleTabManager handling tab switch:",
  "isSearching",
  "🧩 Simple Tab Manager loaded",
  "Alien: Earth — Ep 6 Teaser",
  "Tensions rise as powerful enemies confront each other…",
  ".spotlight-date",
  "(prefers-reduced-motion: reduce)",
  "Featured clip",
  ",\r\n      mute: ",
  ",\r\n      playsinline: ",
  ",\r\n      rel: ",
  ",\r\n      modestbranding: ",
  ",\r\n      controls: ",
  ",\r\n    });\r\n    const src = toYouTubeEmbed(item.videoUrl) + (params.toString() ? ",
  ");\r\n    const iframe = document.createElement(",
  ");\r\n    iframe.setAttribute(",
  ", item.title || ",
  "allow-scripts allow-same-origin allow-presentation",
  "autoplay; encrypted-media; picture-in-picture",
  ";\r\n    mediaEl.appendChild(iframe);\r\n    player = {\r\n      kind: ",
  "t fight YouTube",
  ";\r\n    src.type = guessMime(item.videoUrl);\r\n    video.appendChild(src);\r\n\r\n    mediaEl.innerHTML = ",
  ";\r\n    mediaEl.appendChild(video);\r\n\r\n    player = {\r\n      kind: ",
  "t care — user can press Play\r\n    video.addEventListener(",
  ", () => console.warn(",
  ", item.videoUrl));\r\n  }\r\n\r\n  // Controls\r\n  playBtn.addEventListener(",
  ", () => player?.play && player.play());\r\n  muteBtn.addEventListener(",
  "Featured from Trending",
  ";\r\n      if (u.hostname.includes(",
  ")) id = u.pathname.slice(1);\r\n      else id = u.searchParams.get(",
  ";\r\n      return id ? ",
  " : url;\r\n    } catch (_) {\r\n      return url;\r\n    }\r\n  }\r\n  function guessMime(u) {\r\n    if (!u) return ",
  ";\r\n    const ext = u.split(",
  ")[0].split(",
  ").pop().toLowerCase();\r\n    return ext === ",
  " : ext === ",
  ";\r\n  }\r\n  function niceDate(s) {\r\n    // expects YYYY-MM-DD\r\n    const [y, m, d] = s.split(",
  ").map(Number);\r\n    const dt = new Date(Date.UTC(y, m - 1, d));\r\n    return dt.toLocaleDateString(undefined, { year: ",
  " });\r\n  }\r\n  function today() {\r\n    const d = new Date();\r\n    return d.toLocaleDateString(undefined, { year: ",
  "🔧 Tab Position Fix loaded",
  "⚠️ Required elements not found, retrying...",
  "🔧 Moving tab container to correct position...",
  "✅ Tab container repositioned",
  "✅ Tab container is in correct position",
  "🧪 [TEST DATA] Starting data restoration...",
  "🧹 [TEST DATA] Cleared localStorage",
  "Game of Thrones",
  "Drama • 2011-2019",
  "Nine noble families fight for control over the mythical lands of Westeros.",
  "\n                },\n                {\n                    id: 1396,\n                    title: ",
  ",\n                    meta: ",
  ",\n                    blurb: ",
  ",\n                    poster: ",
  ",\n                    media_type: ",
  "\n                },\n                {\n                    id: 1398,\n                    title: ",
  "s deputy Rick Grimes awakens from a coma to a post-apocalyptic world.",
  "Sci-Fi Horror • 2016-Present",
  "When a young boy vanishes, a small town uncovers a mystery involving secret experiments.",
  "\n                },\n                {\n                    id: 1395,\n                    title: ",
  "Comedy • 2005-2013",
  "A mockumentary about a group of office workers where the workday consists of ego clashes.",
  "\n                }\n            ]\n        },\n        settings: {\n            theme: ",
  ",\n            lang: ",
  ",\n            username: ",
  ",\n            displayName: ",
  "\n        }\n    };\n    \n    // Store test data\n    localStorage.setItem(",
  ", JSON.stringify(testAppData));\n    console.log(",
  "🔄 [TEST DATA] Updated window.appData",
  "📡 [TEST DATA] Dispatched app:data:ready event",
  "📡 [TEST DATA] Dispatched cards:changed event",
  "🔄 [TEST DATA] Triggered HomeClean refresh",
  "⚠️ [TEST DATA] HomeClean not mounted yet",
  "🚀 [TEST DATA] Force mounting HomeClean...",
  "🚀 [TEST DATA] Force mount result:",
  "✅ [TEST DATA] Data restoration complete!",
  "📊 [TEST DATA] Summary:",
  "   - Currently Watching: 3 shows",
  "   - Wishlist: 2 shows",
  "   - Watched: 1 show",
  "   - Total: 6 shows across tabs",
  ";\r\n\r\n  // Return placeholder if no path\r\n  if (!path) return ",
  ";\r\n\r\n  const base = ",
  ";\r\n  const cleanPath = path || ",
  "; // keep the leading ",
  "\r\n\r\n  const joinTMDB = (size, p) => ",
  "${s200} 200w, ${s300} 300w, ${s342} 342w, ${s500} 500w",
  ") {\r\n  if (!poster_path) {\r\n    const img = document.createElement(",
  ");\r\n    img.alt = title || ",
  ";\r\n    img.loading = ",
  ";\r\n    img.decoding = ",
  ";\r\n    img.src = ",
  ";\r\n    return img;\r\n  }\r\n\r\n  const base = ",
  ";\r\n  const path = poster_path || ",
  ";\r\n  img.loading = ",
  ";\r\n  img.decoding = ",
  ";\r\n\r\n  // set responsive attrs first\r\n  img.setAttribute(",
  "${s200} 200w, ${s300} 300w, ${s500} 500w",
  "(max-width: 480px) 148px, 200px",
  ";\r\n  const TTL_MS = 24 * 60 * 60 * 1000; // 24h\r\n  const STAMP_KEY = ",
  "; // stores {",
  ": <ms>}\r\n\r\n  console.log(",
  ", {\r\n    API_KEY: API_KEY ? ",
  ",\r\n  });\r\n\r\n  // If curated keys exist and not stale, bail early\r\n  if (!needsSeed()) {\r\n    console.log(",
  ");\r\n    return;\r\n  }\r\n\r\n  // No key? Don",
  "🔑 TMDB API key not found - skipping TMDB seeding",
  "   Check: window.__TMDB_API_KEY__, window.TMDB_CONFIG.apiKey, or window.TMDB_API_KEY",
  "🌱 TMDB Seeder: Clearing curated data for fresh TMDB data",
  "🌱 TMDB Seeder: Proceeding with seeding...",
  "🌱 Seeder needsSeed check:",
  "${trending.length} chars",
  "${staff.length} chars",
  "${newData.length} chars",
  "🌱 Seeder: Starting seed process...",
  "🌱 Seeder: Fetching from TMDB...",
  "🌱 Seeder: TMDB response:",
  "🌱 Seeder: Total items collected:",
  "🌱 Seeder: Saved trending data:",
  "🌱 Seeder: Saved staff data:",
  "🌱 Seeder: Saved new data:",
  "🌱 Seeder: Seed process completed successfully",
  "🌱 Seeder: Error during seed process:",
  "HTTP ${res.status}",
  "🎬 TMDB API client loading...",
  "/.netlify/functions/tmdb-proxy",
  "Rate limit exceeded. Please try again later.",
  "Failed to get language from localStorage:",
  ")[0]; // Extract language code from ",
  " -> ",
  "\n    }\n\n    // Default fallback\n    return ",
  ";\n  }\n\n  function mapToTMDBLocale(lang) {\n    const langMap = {\n      en: ",
  ",\n      es: ",
  ",\n      fr: ",
  ",\n      de: ",
  ",\n      it: ",
  ",\n      pt: ",
  ",\n      ru: ",
  ",\n      ja: ",
  ",\n      ko: ",
  ",\n      zh: ",
  ",\n    };\n\n    return langMap[lang] || ",
  "[tmdb] 404",
  "[tmdb] error",
  "✅ TMDB",
  "results:${data.results.length}",
  "[tmdb] Fetching details for ${mediaType} ID: ${id}",
  "[tmdb] Failed to fetch details for ${mediaType}/${id}:",
  "[tmdb] Error fetching details for ${mediaType}/${id}:",
  ");\n      const id = item.id || item.tmdb_id || item.tmdbId;\n      \n      if (!id) {\n        console.warn(",
  "[tmdb] No details found for item:",
  "[tmdb] Enhanced item: ${enhanced.title || enhanced.name} with ${enhanced.genres?.length || 0} genres",
  "[tmdb] Error enhancing item:",
  "[tmdb] Starting enhancement of all existing items...",
  "[tmdb] No appData found",
  "[tmdb] Enhancing TV ${listName} items...",
  "[tmdb] Item ${item.title || item.name} already enhanced, skipping",
  "[tmdb] Enhanced TV item: ${enhanced.title || enhanced.name}",
  "[tmdb] Failed to enhance TV item ${item.title || item.name}:",
  "[tmdb] Enhancing movie ${listName} items...",
  "[tmdb] Enhanced movie item: ${enhanced.title || enhanced.name}",
  "[tmdb] Failed to enhance movie item ${item.title || item.name}:",
  "[tmdb] Enhancement complete: ${enhancedCount}/${totalCount} items enhanced",
  "[tmdb] Enhanced data saved to localStorage",
  "[tmdb] Enhanced data saved to Firebase",
  "[tmdb] UI updated with enhanced data",
  "✅ TMDB API client loaded successfully",
  "t exist, skip initialization\r\n  if (!qEl || !cEl || !fEl || !nBtn) {\r\n    console.warn(",
  ");\r\n    return;\r\n  }\r\n\r\n  // Safety check - if statsEl doesn",
  "trivia-stats element not found, creating placeholder",
  ";\r\n\r\n    // Check cache first\r\n    if (triviaCache && lastFetchDate === today) {\r\n      console.log(",
  ");\r\n      return triviaCache;\r\n    }\r\n\r\n    try {\r\n      console.log(",
  ", langCode);\r\n      const response = await fetch(\r\n        ",
  ",\r\n      );\r\n\r\n      if (response.status === 429) {\r\n        console.warn(",
  "🧠 Trivia questions fetched successfully:",
  "Invalid API response",
  "🧠 Failed to fetch trivia from API, using fallback:",
  "🧠 Refreshing trivia for language change",
  "🧠 Current language for trivia:",
  "🧠 New trivia question:",
  "statsEl not available, skipping stats render",
  " • Completed today",
  "${streakText}: ${streak}${last === today ? completedText : ",
  ";\r\n  }\r\n\r\n  function renderQuestion(q, isLocked) {\r\n    if (!qEl) {\r\n      console.warn(",
  ");\r\n      return;\r\n    }\r\n    qEl.textContent = q.q;\r\n    if (cEl) cEl.innerHTML = ",
  ";\r\n    if (fEl) fEl.textContent = ",
  ";\r\n    if (nBtn) nBtn.hidden = true;\r\n\r\n    q.choices.forEach((text, idx) => {\r\n      const li = document.createElement(",
  ");\r\n      li.dataset.idx = idx;\r\n      li.textContent = text;\r\n\r\n      if (isLocked) {\r\n        li.setAttribute(",
  ";\r\n        li.style.cursor = ",
  ";\r\n      } else {\r\n        li.addEventListener(",
  ", () => choose(idx));\r\n        li.addEventListener(",
  ", (e) => {\r\n          if (e.key === ",
  "Come back tomorrow for a new question.",
  "🧠 No current question available for trivia",
  "Correct!",
  "Nope — correct answer is",
  "${correctText} ✔",
  "${incorrectText} ",
  ";\r\n\r\n    // Notify (optional)\r\n    if (window.Notify) {\r\n      const streakUpText = t(",
  ";\r\n      const tryAgainText = t(",
  ";\r\n    nBtn.style.position = ",
  ";\r\n    nBtn.style.zIndex = ",
  ";\r\n    nBtn.textContent = isCorrect\r\n      ? t(",
  "\r\n      : t(",
  ";\r\n    nBtn.onclick = () => {\r\n      try {\r\n        loadNextQuestion().catch((error) => {\r\n          console.error(",
  ", error);\r\n          // Show error message to user\r\n          fEl.textContent = ",
  ";\r\n          nBtn.hidden = true;\r\n        });\r\n      } catch (error) {\r\n        console.error(",
  ", error);\r\n        fEl.textContent = ",
  "🧠 Next button shown after answer",
  "🧠 Loading next trivia question...",
  ";\r\n      nBtn.hidden = true;\r\n      nBtn.style.display = ",
  "🧠 Next question loaded:",
  "🧠 Error loading next question:",
  "Error loading next question. Please refresh the page.",
  "🎨 [VISUAL TEST] Starting visual card test...",
  "🎨 [VISUAL TEST] ❌ No clean-root found",
  "🎨 [VISUAL TEST] ✅ Found clean-root",
  "🎨 [VISUAL TEST] Found cards:",
  "🎨 [VISUAL TEST] ❌ No cards found",
  "🎨 [VISUAL TEST] Testing card ${index + 1}:",
  "🎨 [VISUAL TEST] Card ${index + 1} styles:",
  "3px solid red",
  "0 0 10px rgba(255,0,0,0.5)",
  "2px 4px",
  "${width} × ${height}",
  "🎨 [VISUAL TEST] ✅ Added visual indicators to card ${index + 1}",
  "🎨 [VISUAL TEST] Found rails:",
  "🎨 [VISUAL TEST] Rail ${index + 1} styles:",
  "2px solid blue",
  "0 0 5px rgba(0,0,255,0.3)",
  "🎨 [VISUAL TEST] ✅ Visual indicators added! Look for red-bordered cards and blue-bordered rails",
  "Test Holiday Chips Fix",
  "Holiday Chips Test",
  "This page tests if holiday chips stay visible after removing the old rendering system.",
  "Test Results:",
  "✅ Holiday chips should now stay visible permanently",
  "Holiday Chip Fix Test",
  "🎯 Holiday Chip Fix Test",
  "🧪 Starting HomeClean QA Tests...",
  "❌ QA Tests failed:",
  "🔍 Testing component structure...",
  "HomeClean container exists",
  "5 rails exist",
  "Section headers exist",
  "#home-clean .section-header",
  "🎴 Testing card rendering...",
  "Currently Watching cards rendered",
  "#cw-rail .card",
  "Next Up cards rendered",
  "#up-next-rail .card",
  "For You cards rendered",
  "#drama-rail .card, #comedy-rail .card, #horror-rail .card",
  "Cards have proper dimensions",
  "🔘 Testing action buttons...",
  "CW cards have 4 action buttons",
  "));\r\n                }\r\n            },\r\n            {\r\n                name: ",
  ",\r\n                test: () => {\r\n                    const forYouCard = document.querySelector(",
  ");\r\n                }\r\n            },\r\n            {\r\n                name: ",
  ",\r\n                test: () => {\r\n                    const allCards = document.querySelectorAll(",
  ");\r\n                    return Array.from(allCards).every(card => !!card.querySelector(",
  ",\r\n                test: () => {\r\n                    const wantBtn = document.querySelector(",
  "🎭 Testing holiday modal...",
  "Holiday modal opens",
  "Holiday modal has options",
  "Holiday modal closes",
  ".modal-close",
  "Holiday Modal",
  "📊 Testing data layer...",
  "Data layer exists",
  "Mock mode toggle works",
  "Cache functionality works",
  "Data Layer",
  "⚡ Testing performance...",
  "Component loads quickly",
  "#home-clean .card",
  "Images have lazy loading",
  "#home-clean .poster",
  "Scroll snapping works",
  "#home-clean .rail",
  ");\r\n    }\r\n\r\n    /**\r\n     * Generate test report\r\n     */\r\n    generateReport() {\r\n        console.log(",
  ";\r\n                console.log(",
  "\\n📊 Summary: ${passedTests}/${totalTests} tests passed (${passRate}%)",
  "100.0",
  "🎉 All tests passed! Component is ready for production.",
  "⚠️  Some tests failed. Review the results above.",
  "💨 Running quick smoke test...",
  "),\r\n            () => !!document.querySelector(",
  "✅ Smoke test passed",
  "❌ Smoke test failed",
  "[HomeCleanQA] QA testing scaffold loaded",
  "Available commands:",
  "  runHomeCleanTests() - Run full test suite",
  "  runHomeCleanSmokeTest() - Run quick smoke test",
  "🔍 Phase 5 Validation Starting...",
  "📊 Phase 5 Validation Results:",
  "✅ Phase 5 validation PASSED",
  "❌ Phase 5 validation FAILED",
  "🚂 Rails validation:",
  "📦 Containers validation:",
  "clean-root not found",
  "🎨 Theme validation:",
  "📊 Data validation:",
  "📜 Scroll validation:",
  "🔧 Phase 5 validation script loaded. Run validatePhase5() to test.",
  ",\r\n};\r\n\r\n// Set API key from environment (will be available in production)\r\nif (typeof process !== ",
  ");\r\n  if (metaTag && metaTag.content && metaTag.content !== ",
  "🎬 TMDB Config loaded"
]